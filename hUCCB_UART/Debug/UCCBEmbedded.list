
UCCBEmbedded.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000799c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08007a5c  08007a5c  00017a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007ce4  08007ce4  00017ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007ce8  08007ce8  00017ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000160  20000000  08007cec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000ba8  20000160  08007e4c  00020160  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20000d08  08007e4c  00020d08  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
  9 .debug_info   00012ef3  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003b1a  00000000  00000000  0003307b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000dc8  00000000  00000000  00036b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000c78  00000000  00000000  00037960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0001a846  00000000  00000000  000385d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00015a79  00000000  00000000  00052e1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00076135  00000000  00000000  00068897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  000de9cc  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002b38  00000000  00000000  000dea1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    00001b5c  00000000  00000000  000e1554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000160 	.word	0x20000160
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007a44 	.word	0x08007a44

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000164 	.word	0x20000164
 8000104:	08007a44 	.word	0x08007a44

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b06      	ldr	r3, [pc, #24]	; (8000244 <HAL_Init+0x24>)
 800022a:	2110      	movs	r1, #16
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000230:	2000      	movs	r0, #0
 8000232:	f000 f809 	bl	8000248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000236:	f006 fc3b 	bl	8006ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	40022000 	.word	0x40022000

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000250:	f004 fa20 	bl	8004694 <HAL_RCC_GetHCLKFreq>
 8000254:	0002      	movs	r2, r0
 8000256:	23fa      	movs	r3, #250	; 0xfa
 8000258:	0099      	lsls	r1, r3, #2
 800025a:	0010      	movs	r0, r2
 800025c:	f7ff ff54 	bl	8000108 <__udivsi3>
 8000260:	0003      	movs	r3, r0
 8000262:	0018      	movs	r0, r3
 8000264:	f001 f907 	bl	8001476 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000268:	6879      	ldr	r1, [r7, #4]
 800026a:	2301      	movs	r3, #1
 800026c:	425b      	negs	r3, r3
 800026e:	2200      	movs	r2, #0
 8000270:	0018      	movs	r0, r3
 8000272:	f001 f8cb 	bl	800140c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000276:	2300      	movs	r3, #0
}
 8000278:	0018      	movs	r0, r3
 800027a:	46bd      	mov	sp, r7
 800027c:	b002      	add	sp, #8
 800027e:	bd80      	pop	{r7, pc}

08000280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  uwTick++;
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <HAL_IncTick+0x14>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	1c5a      	adds	r2, r3, #1
 800028a:	4b02      	ldr	r3, [pc, #8]	; (8000294 <HAL_IncTick+0x14>)
 800028c:	601a      	str	r2, [r3, #0]
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	2000017c 	.word	0x2000017c

08000298 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <HAL_GetTick+0x10>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	0018      	movs	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	2000017c 	.word	0x2000017c

080002ac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *             the configuration information for the specified CAN.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef* hcan)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  uint32_t status = CAN_INITSTATUS_FAILED;  /* Default init status */
 80002b4:	2300      	movs	r3, #0
 80002b6:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0U;
 80002b8:	2300      	movs	r3, #0
 80002ba:	60bb      	str	r3, [r7, #8]
  
  /* Check CAN handle */
  if(hcan == NULL)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d101      	bne.n	80002c6 <HAL_CAN_Init+0x1a>
  {
     return HAL_ERROR;
 80002c2:	2301      	movs	r3, #1
 80002c4:	e112      	b.n	80004ec <HAL_CAN_Init+0x240>
  assert_param(IS_CAN_SJW(hcan->Init.SJW));
  assert_param(IS_CAN_BS1(hcan->Init.BS1));
  assert_param(IS_CAN_BS2(hcan->Init.BS2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
  
  if(hcan->State == HAL_CAN_STATE_RESET)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	223d      	movs	r2, #61	; 0x3d
 80002ca:	5c9b      	ldrb	r3, [r3, r2]
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d107      	bne.n	80002e2 <HAL_CAN_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hcan->Lock = HAL_UNLOCKED;
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	223c      	movs	r2, #60	; 0x3c
 80002d6:	2100      	movs	r1, #0
 80002d8:	5499      	strb	r1, [r3, r2]
    /* Init the low level hardware */
    HAL_CAN_MspInit(hcan);
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	0018      	movs	r0, r3
 80002de:	f006 fc11 	bl	8006b04 <HAL_CAN_MspInit>
  }
  
  /* Initialize the CAN state*/
  hcan->State = HAL_CAN_STATE_BUSY;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	223d      	movs	r2, #61	; 0x3d
 80002e6:	2102      	movs	r1, #2
 80002e8:	5499      	strb	r1, [r3, r2]
  
  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	681a      	ldr	r2, [r3, #0]
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	2102      	movs	r1, #2
 80002f6:	438a      	bics	r2, r1
 80002f8:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	681a      	ldr	r2, [r3, #0]
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2101      	movs	r1, #1
 8000306:	430a      	orrs	r2, r1
 8000308:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();   
 800030a:	f7ff ffc5 	bl	8000298 <HAL_GetTick>
 800030e:	0003      	movs	r3, r0
 8000310:	60bb      	str	r3, [r7, #8]
  
  /* Wait the acknowledge */
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8000312:	e010      	b.n	8000336 <HAL_CAN_Init+0x8a>
  {
    if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 8000314:	f7ff ffc0 	bl	8000298 <HAL_GetTick>
 8000318:	0002      	movs	r2, r0
 800031a:	68bb      	ldr	r3, [r7, #8]
 800031c:	1ad3      	subs	r3, r2, r3
 800031e:	2b0a      	cmp	r3, #10
 8000320:	d909      	bls.n	8000336 <HAL_CAN_Init+0x8a>
    {
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	223d      	movs	r2, #61	; 0x3d
 8000326:	2103      	movs	r1, #3
 8000328:	5499      	strb	r1, [r3, r2]
      /* Process unlocked */
      __HAL_UNLOCK(hcan);
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	223c      	movs	r2, #60	; 0x3c
 800032e:	2100      	movs	r1, #0
 8000330:	5499      	strb	r1, [r3, r2]
      return HAL_TIMEOUT;
 8000332:	2303      	movs	r3, #3
 8000334:	e0da      	b.n	80004ec <HAL_CAN_Init+0x240>
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	685b      	ldr	r3, [r3, #4]
 800033c:	2201      	movs	r2, #1
 800033e:	4013      	ands	r3, r2
 8000340:	d0e8      	beq.n	8000314 <HAL_CAN_Init+0x68>
    }
  }

  /* Check acknowledge */
  if (HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	685b      	ldr	r3, [r3, #4]
 8000348:	2201      	movs	r2, #1
 800034a:	4013      	ands	r3, r2
 800034c:	d100      	bne.n	8000350 <HAL_CAN_Init+0xa4>
 800034e:	e0bc      	b.n	80004ca <HAL_CAN_Init+0x21e>
  {
    /* Set the time triggered communication mode */
    if (hcan->Init.TTCM == ENABLE)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	2b01      	cmp	r3, #1
 8000356:	d108      	bne.n	800036a <HAL_CAN_Init+0xbe>
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	681a      	ldr	r2, [r3, #0]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	2180      	movs	r1, #128	; 0x80
 8000364:	430a      	orrs	r2, r1
 8000366:	601a      	str	r2, [r3, #0]
 8000368:	e007      	b.n	800037a <HAL_CAN_Init+0xce>
    }
    else
    {
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	681a      	ldr	r2, [r3, #0]
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	2180      	movs	r1, #128	; 0x80
 8000376:	438a      	bics	r2, r1
 8000378:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	69db      	ldr	r3, [r3, #28]
 800037e:	2b01      	cmp	r3, #1
 8000380:	d108      	bne.n	8000394 <HAL_CAN_Init+0xe8>
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	681a      	ldr	r2, [r3, #0]
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	2140      	movs	r1, #64	; 0x40
 800038e:	430a      	orrs	r2, r1
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	e007      	b.n	80003a4 <HAL_CAN_Init+0xf8>
    }
    else
    {
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	681a      	ldr	r2, [r3, #0]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	2140      	movs	r1, #64	; 0x40
 80003a0:	438a      	bics	r2, r1
 80003a2:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	6a1b      	ldr	r3, [r3, #32]
 80003a8:	2b01      	cmp	r3, #1
 80003aa:	d108      	bne.n	80003be <HAL_CAN_Init+0x112>
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	2120      	movs	r1, #32
 80003b8:	430a      	orrs	r2, r1
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	e007      	b.n	80003ce <HAL_CAN_Init+0x122>
    }
    else
    {
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	681a      	ldr	r2, [r3, #0]
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2120      	movs	r1, #32
 80003ca:	438a      	bics	r2, r1
 80003cc:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003d2:	2b01      	cmp	r3, #1
 80003d4:	d108      	bne.n	80003e8 <HAL_CAN_Init+0x13c>
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	681a      	ldr	r2, [r3, #0]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	2110      	movs	r1, #16
 80003e2:	430a      	orrs	r2, r1
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	e007      	b.n	80003f8 <HAL_CAN_Init+0x14c>
    }
    else
    {
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	681a      	ldr	r2, [r3, #0]
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	2110      	movs	r1, #16
 80003f4:	438a      	bics	r2, r1
 80003f6:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	d108      	bne.n	8000412 <HAL_CAN_Init+0x166>
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	681a      	ldr	r2, [r3, #0]
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2108      	movs	r1, #8
 800040c:	430a      	orrs	r2, r1
 800040e:	601a      	str	r2, [r3, #0]
 8000410:	e007      	b.n	8000422 <HAL_CAN_Init+0x176>
    }
    else
    {
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	681a      	ldr	r2, [r3, #0]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	2108      	movs	r1, #8
 800041e:	438a      	bics	r2, r1
 8000420:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000426:	2b01      	cmp	r3, #1
 8000428:	d108      	bne.n	800043c <HAL_CAN_Init+0x190>
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	681a      	ldr	r2, [r3, #0]
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	2104      	movs	r1, #4
 8000436:	430a      	orrs	r2, r1
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	e007      	b.n	800044c <HAL_CAN_Init+0x1a0>
    }
    else
    {
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	681a      	ldr	r2, [r3, #0]
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	2104      	movs	r1, #4
 8000448:	438a      	bics	r2, r1
 800044a:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	689a      	ldr	r2, [r3, #8]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	68db      	ldr	r3, [r3, #12]
 8000454:	431a      	orrs	r2, r3
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	691b      	ldr	r3, [r3, #16]
 800045a:	431a      	orrs	r2, r3
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	695b      	ldr	r3, [r3, #20]
 8000460:	431a      	orrs	r2, r3
 8000462:	0011      	movs	r1, r2
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	685b      	ldr	r3, [r3, #4]
 8000468:	1e5a      	subs	r2, r3, #1
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	430a      	orrs	r2, r1
 8000470:	61da      	str	r2, [r3, #28]
                                              hcan->Init.BS1            |
                                              hcan->Init.BS2            |
                                              (hcan->Init.Prescaler - 1U) ));

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2101      	movs	r1, #1
 800047e:	438a      	bics	r2, r1
 8000480:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();   
 8000482:	f7ff ff09 	bl	8000298 <HAL_GetTick>
 8000486:	0003      	movs	r3, r0
 8000488:	60bb      	str	r3, [r7, #8]
   
    /* Wait the acknowledge */
    while(HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 800048a:	e010      	b.n	80004ae <HAL_CAN_Init+0x202>
    {
      if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 800048c:	f7ff ff04 	bl	8000298 <HAL_GetTick>
 8000490:	0002      	movs	r2, r0
 8000492:	68bb      	ldr	r3, [r7, #8]
 8000494:	1ad3      	subs	r3, r2, r3
 8000496:	2b0a      	cmp	r3, #10
 8000498:	d909      	bls.n	80004ae <HAL_CAN_Init+0x202>
      {
         hcan->State= HAL_CAN_STATE_TIMEOUT;
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	223d      	movs	r2, #61	; 0x3d
 800049e:	2103      	movs	r1, #3
 80004a0:	5499      	strb	r1, [r3, r2]

       /* Process unlocked */
       __HAL_UNLOCK(hcan);
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	223c      	movs	r2, #60	; 0x3c
 80004a6:	2100      	movs	r1, #0
 80004a8:	5499      	strb	r1, [r3, r2]

       return HAL_TIMEOUT;
 80004aa:	2303      	movs	r3, #3
 80004ac:	e01e      	b.n	80004ec <HAL_CAN_Init+0x240>
    while(HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	685b      	ldr	r3, [r3, #4]
 80004b4:	2201      	movs	r2, #1
 80004b6:	4013      	ands	r3, r2
 80004b8:	d1e8      	bne.n	800048c <HAL_CAN_Init+0x1e0>
      }
    }

    /* Check acknowledged */
    if(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	685b      	ldr	r3, [r3, #4]
 80004c0:	2201      	movs	r2, #1
 80004c2:	4013      	ands	r3, r2
 80004c4:	d101      	bne.n	80004ca <HAL_CAN_Init+0x21e>
    {
      status = CAN_INITSTATUS_SUCCESS;
 80004c6:	2301      	movs	r3, #1
 80004c8:	60fb      	str	r3, [r7, #12]
    }
  }
 
  if(status == CAN_INITSTATUS_SUCCESS)
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	2b01      	cmp	r3, #1
 80004ce:	d108      	bne.n	80004e2 <HAL_CAN_Init+0x236>
  {
    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2200      	movs	r2, #0
 80004d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	223d      	movs	r2, #61	; 0x3d
 80004da:	2101      	movs	r1, #1
 80004dc:	5499      	strb	r1, [r3, r2]
  
    /* Return function status */
    return HAL_OK;
 80004de:	2300      	movs	r3, #0
 80004e0:	e004      	b.n	80004ec <HAL_CAN_Init+0x240>
  }
  else
  {
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	223d      	movs	r2, #61	; 0x3d
 80004e6:	2104      	movs	r1, #4
 80004e8:	5499      	strb	r1, [r3, r2]

    /* Return function status */
    return HAL_ERROR;
 80004ea:	2301      	movs	r3, #1
  }
}
 80004ec:	0018      	movs	r0, r3
 80004ee:	46bd      	mov	sp, r7
 80004f0:	b004      	add	sp, #16
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterConfTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef* hcan, CAN_FilterConfTypeDef* sFilterConfig)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos = 0U;
 80004fe:	2300      	movs	r3, #0
 8000500:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));
  assert_param(IS_CAN_BANKNUMBER(sFilterConfig->BankNumber));
  
  filternbrbitpos = (1U) << sFilterConfig->FilterNumber;
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	2201      	movs	r2, #1
 8000508:	409a      	lsls	r2, r3
 800050a:	0013      	movs	r3, r2
 800050c:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  /* Select the start slave bank */
  MODIFY_REG(hcan->Instance->FMR                         ,
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	2380      	movs	r3, #128	; 0x80
 8000514:	009b      	lsls	r3, r3, #2
 8000516:	58d3      	ldr	r3, [r2, r3]
 8000518:	4a6c      	ldr	r2, [pc, #432]	; (80006cc <HAL_CAN_ConfigFilter+0x1d8>)
 800051a:	401a      	ands	r2, r3
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000520:	021b      	lsls	r3, r3, #8
 8000522:	431a      	orrs	r2, r3
 8000524:	0011      	movs	r1, r2
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	2301      	movs	r3, #1
 800052c:	4319      	orrs	r1, r3
 800052e:	2380      	movs	r3, #128	; 0x80
 8000530:	009b      	lsls	r3, r3, #2
 8000532:	50d1      	str	r1, [r2, r3]
             CAN_FMR_CAN2SB                              ,
             CAN_FMR_FINIT                              |
             (uint32_t)(sFilterConfig->BankNumber << 8U)   );  /* Filter Deactivation */
  CLEAR_BIT(hcan->Instance->FA1R, filternbrbitpos);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	2387      	movs	r3, #135	; 0x87
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	58d1      	ldr	r1, [r2, r3]
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	43d8      	mvns	r0, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	4001      	ands	r1, r0
 8000548:	2387      	movs	r3, #135	; 0x87
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	50d1      	str	r1, [r2, r3]

  /* Filter Scale */
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	69db      	ldr	r3, [r3, #28]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d12c      	bne.n	80005b0 <HAL_CAN_ConfigFilter+0xbc>
  {
    /* 16-bit scale for the filter */
    CLEAR_BIT(hcan->Instance->FS1R, filternbrbitpos);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	2383      	movs	r3, #131	; 0x83
 800055c:	009b      	lsls	r3, r3, #2
 800055e:	58d1      	ldr	r1, [r2, r3]
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	43d8      	mvns	r0, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	4001      	ands	r1, r0
 800056a:	2383      	movs	r3, #131	; 0x83
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	50d1      	str	r1, [r2, r3]

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	68db      	ldr	r3, [r3, #12]
 8000574:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	685b      	ldr	r3, [r3, #4]
 800057a:	041b      	lsls	r3, r3, #16
 800057c:	0c19      	lsrs	r1, r3, #16
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	695b      	ldr	r3, [r3, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000586:	4301      	orrs	r1, r0
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 8000588:	3348      	adds	r3, #72	; 0x48
 800058a:	00db      	lsls	r3, r3, #3
 800058c:	5099      	str	r1, [r3, r2]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	689b      	ldr	r3, [r3, #8]
 8000592:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	041b      	lsls	r3, r3, #16
 800059a:	0c1a      	lsrs	r2, r3, #16
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	6819      	ldr	r1, [r3, #0]
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	695b      	ldr	r3, [r3, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80005a4:	4302      	orrs	r2, r0
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 80005a6:	3348      	adds	r3, #72	; 0x48
 80005a8:	00db      	lsls	r3, r3, #3
 80005aa:	18cb      	adds	r3, r1, r3
 80005ac:	3304      	adds	r3, #4
 80005ae:	601a      	str	r2, [r3, #0]
  }

  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	69db      	ldr	r3, [r3, #28]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d12b      	bne.n	8000610 <HAL_CAN_ConfigFilter+0x11c>
  {
    /* 32-bit scale for the filter */
    SET_BIT(hcan->Instance->FS1R, filternbrbitpos);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	2383      	movs	r3, #131	; 0x83
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	58d1      	ldr	r1, [r2, r3]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	4319      	orrs	r1, r3
 80005ca:	2383      	movs	r3, #131	; 0x83
 80005cc:	009b      	lsls	r3, r3, #2
 80005ce:	50d1      	str	r1, [r2, r3]

    /* 32-bit identifier or First 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	041b      	lsls	r3, r3, #16
 80005dc:	0c19      	lsrs	r1, r3, #16
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	695b      	ldr	r3, [r3, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80005e6:	4301      	orrs	r1, r0
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 80005e8:	3348      	adds	r3, #72	; 0x48
 80005ea:	00db      	lsls	r3, r3, #3
 80005ec:	5099      	str	r1, [r3, r2]

    /* 32-bit mask or Second 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	68db      	ldr	r3, [r3, #12]
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	0c1a      	lsrs	r2, r3, #16
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	6819      	ldr	r1, [r3, #0]
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	695b      	ldr	r3, [r3, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000604:	4302      	orrs	r2, r0
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 8000606:	3348      	adds	r3, #72	; 0x48
 8000608:	00db      	lsls	r3, r3, #3
 800060a:	18cb      	adds	r3, r1, r3
 800060c:	3304      	adds	r3, #4
 800060e:	601a      	str	r2, [r3, #0]
  }

  /* Filter Mode */
  if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d10d      	bne.n	8000634 <HAL_CAN_ConfigFilter+0x140>
  {
    /*Id/Mask mode for the filter*/
    CLEAR_BIT(hcan->Instance->FM1R, filternbrbitpos);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	2381      	movs	r3, #129	; 0x81
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	58d1      	ldr	r1, [r2, r3]
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	43d8      	mvns	r0, r3
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	4001      	ands	r1, r0
 800062c:	2381      	movs	r3, #129	; 0x81
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	50d1      	str	r1, [r2, r3]
 8000632:	e00b      	b.n	800064c <HAL_CAN_ConfigFilter+0x158>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    SET_BIT(hcan->Instance->FM1R, filternbrbitpos);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	2381      	movs	r3, #129	; 0x81
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	58d1      	ldr	r1, [r2, r3]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	4319      	orrs	r1, r3
 8000646:	2381      	movs	r3, #129	; 0x81
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	50d1      	str	r1, [r2, r3]
  }

  /* Filter FIFO assignment */
  if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	691b      	ldr	r3, [r3, #16]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d10d      	bne.n	8000670 <HAL_CAN_ConfigFilter+0x17c>
  {
    /* FIFO 0 assignation for the filter */
    CLEAR_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	2385      	movs	r3, #133	; 0x85
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	58d1      	ldr	r1, [r2, r3]
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	43d8      	mvns	r0, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	4001      	ands	r1, r0
 8000668:	2385      	movs	r3, #133	; 0x85
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	50d1      	str	r1, [r2, r3]
 800066e:	e00b      	b.n	8000688 <HAL_CAN_ConfigFilter+0x194>
  }
  else
  {
    /* FIFO 1 assignation for the filter */
    SET_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	2385      	movs	r3, #133	; 0x85
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	58d1      	ldr	r1, [r2, r3]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	4319      	orrs	r1, r3
 8000682:	2385      	movs	r3, #133	; 0x85
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	50d1      	str	r1, [r2, r3]
  }
  
  /* Filter activation */
  if (sFilterConfig->FilterActivation == ENABLE)
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	6a1b      	ldr	r3, [r3, #32]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d10b      	bne.n	80006a8 <HAL_CAN_ConfigFilter+0x1b4>
  {
    SET_BIT(hcan->Instance->FA1R, filternbrbitpos);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	2387      	movs	r3, #135	; 0x87
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	58d1      	ldr	r1, [r2, r3]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	4319      	orrs	r1, r3
 80006a2:	2387      	movs	r3, #135	; 0x87
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	50d1      	str	r1, [r2, r3]
  }

  /* Leave the initialisation mode for the filter */
  CLEAR_BIT(hcan->Instance->FMR, ((uint32_t)CAN_FMR_FINIT));
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	2380      	movs	r3, #128	; 0x80
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	58d1      	ldr	r1, [r2, r3]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	2301      	movs	r3, #1
 80006b8:	4399      	bics	r1, r3
 80006ba:	2380      	movs	r3, #128	; 0x80
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	50d1      	str	r1, [r2, r3]
  
  /* Return function status */
  return HAL_OK;
 80006c0:	2300      	movs	r3, #0
}
 80006c2:	0018      	movs	r0, r3
 80006c4:	46bd      	mov	sp, r7
 80006c6:	b004      	add	sp, #16
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	ffffc0ff 	.word	0xffffc0ff

080006d0 <HAL_CAN_Transmit>:
  *         the configuration information for the specified CAN.  
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Transmit(CAN_HandleTypeDef* hcan, uint32_t Timeout)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	6039      	str	r1, [r7, #0]
  uint32_t transmitmailbox = CAN_TXSTATUS_NOMAILBOX;
 80006da:	2304      	movs	r3, #4
 80006dc:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0U;
 80006de:	2300      	movs	r3, #0
 80006e0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(hcan->pTxMsg->IDE));
  assert_param(IS_CAN_RTR(hcan->pTxMsg->RTR));
  assert_param(IS_CAN_DLC(hcan->pTxMsg->DLC));

  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	689a      	ldr	r2, [r3, #8]
 80006e8:	2380      	movs	r3, #128	; 0x80
 80006ea:	04db      	lsls	r3, r3, #19
 80006ec:	401a      	ands	r2, r3
 80006ee:	2380      	movs	r3, #128	; 0x80
 80006f0:	04db      	lsls	r3, r3, #19
 80006f2:	429a      	cmp	r2, r3
 80006f4:	d014      	beq.n	8000720 <HAL_CAN_Transmit+0x50>
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	689a      	ldr	r2, [r3, #8]
 80006fc:	2380      	movs	r3, #128	; 0x80
 80006fe:	051b      	lsls	r3, r3, #20
 8000700:	401a      	ands	r2, r3
  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 8000702:	2380      	movs	r3, #128	; 0x80
 8000704:	051b      	lsls	r3, r3, #20
 8000706:	429a      	cmp	r2, r3
 8000708:	d00a      	beq.n	8000720 <HAL_CAN_Transmit+0x50>
     ((hcan->Instance->TSR&CAN_TSR_TME2) == CAN_TSR_TME2))
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	689a      	ldr	r2, [r3, #8]
 8000710:	2380      	movs	r3, #128	; 0x80
 8000712:	055b      	lsls	r3, r3, #21
 8000714:	401a      	ands	r2, r3
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 8000716:	2380      	movs	r3, #128	; 0x80
 8000718:	055b      	lsls	r3, r3, #21
 800071a:	429a      	cmp	r2, r3
 800071c:	d000      	beq.n	8000720 <HAL_CAN_Transmit+0x50>
 800071e:	e186      	b.n	8000a2e <HAL_CAN_Transmit+0x35e>
  {
    /* Process locked */
    __HAL_LOCK(hcan);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	223c      	movs	r2, #60	; 0x3c
 8000724:	5c9b      	ldrb	r3, [r3, r2]
 8000726:	2b01      	cmp	r3, #1
 8000728:	d101      	bne.n	800072e <HAL_CAN_Transmit+0x5e>
 800072a:	2302      	movs	r3, #2
 800072c:	e184      	b.n	8000a38 <HAL_CAN_Transmit+0x368>
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	223c      	movs	r2, #60	; 0x3c
 8000732:	2101      	movs	r1, #1
 8000734:	5499      	strb	r1, [r3, r2]

    /* Change CAN state */
    switch(hcan->State)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	223d      	movs	r2, #61	; 0x3d
 800073a:	5c9b      	ldrb	r3, [r3, r2]
 800073c:	b2db      	uxtb	r3, r3
 800073e:	2b62      	cmp	r3, #98	; 0x62
 8000740:	d00f      	beq.n	8000762 <HAL_CAN_Transmit+0x92>
 8000742:	dc13      	bgt.n	800076c <HAL_CAN_Transmit+0x9c>
 8000744:	2b22      	cmp	r3, #34	; 0x22
 8000746:	d002      	beq.n	800074e <HAL_CAN_Transmit+0x7e>
 8000748:	2b32      	cmp	r3, #50	; 0x32
 800074a:	d005      	beq.n	8000758 <HAL_CAN_Transmit+0x88>
 800074c:	e00e      	b.n	800076c <HAL_CAN_Transmit+0x9c>
    {
      case(HAL_CAN_STATE_BUSY_RX0):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	223d      	movs	r2, #61	; 0x3d
 8000752:	2142      	movs	r1, #66	; 0x42
 8000754:	5499      	strb	r1, [r3, r2]
          break;
 8000756:	e00e      	b.n	8000776 <HAL_CAN_Transmit+0xa6>
      case(HAL_CAN_STATE_BUSY_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	223d      	movs	r2, #61	; 0x3d
 800075c:	2152      	movs	r1, #82	; 0x52
 800075e:	5499      	strb	r1, [r3, r2]
          break;
 8000760:	e009      	b.n	8000776 <HAL_CAN_Transmit+0xa6>
      case(HAL_CAN_STATE_BUSY_RX0_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	223d      	movs	r2, #61	; 0x3d
 8000766:	2172      	movs	r1, #114	; 0x72
 8000768:	5499      	strb	r1, [r3, r2]
          break;
 800076a:	e004      	b.n	8000776 <HAL_CAN_Transmit+0xa6>
      default: /* HAL_CAN_STATE_READY */
          hcan->State = HAL_CAN_STATE_BUSY_TX;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	223d      	movs	r2, #61	; 0x3d
 8000770:	2112      	movs	r1, #18
 8000772:	5499      	strb	r1, [r3, r2]
          break;
 8000774:	46c0      	nop			; (mov r8, r8)
    }

    /* Select one empty transmit mailbox */
    if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME0))
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	689a      	ldr	r2, [r3, #8]
 800077c:	2380      	movs	r3, #128	; 0x80
 800077e:	04db      	lsls	r3, r3, #19
 8000780:	4013      	ands	r3, r2
 8000782:	d002      	beq.n	800078a <HAL_CAN_Transmit+0xba>
    {
      transmitmailbox = CAN_TXMAILBOX_0;
 8000784:	2300      	movs	r3, #0
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	e00b      	b.n	80007a2 <HAL_CAN_Transmit+0xd2>
    }
    else if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME1))
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	689a      	ldr	r2, [r3, #8]
 8000790:	2380      	movs	r3, #128	; 0x80
 8000792:	051b      	lsls	r3, r3, #20
 8000794:	4013      	ands	r3, r2
 8000796:	d002      	beq.n	800079e <HAL_CAN_Transmit+0xce>
    {
      transmitmailbox = CAN_TXMAILBOX_1;
 8000798:	2301      	movs	r3, #1
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	e001      	b.n	80007a2 <HAL_CAN_Transmit+0xd2>
    }
    else
    {
      transmitmailbox = CAN_TXMAILBOX_2;
 800079e:	2302      	movs	r3, #2
 80007a0:	60fb      	str	r3, [r7, #12]
    }

    /* Set up the Id */
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	68fa      	ldr	r2, [r7, #12]
 80007a8:	3218      	adds	r2, #24
 80007aa:	0112      	lsls	r2, r2, #4
 80007ac:	58d2      	ldr	r2, [r2, r3]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2101      	movs	r1, #1
 80007b4:	4011      	ands	r1, r2
 80007b6:	68fa      	ldr	r2, [r7, #12]
 80007b8:	3218      	adds	r2, #24
 80007ba:	0112      	lsls	r2, r2, #4
 80007bc:	50d1      	str	r1, [r2, r3]
    if (hcan->pTxMsg->IDE == CAN_ID_STD)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d115      	bne.n	80007f4 <HAL_CAN_Transmit+0x124>
    {
      assert_param(IS_CAN_STDID(hcan->pTxMsg->StdId));  
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << CAN_TI0R_STID_Pos) | \
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	68fa      	ldr	r2, [r7, #12]
 80007ce:	3218      	adds	r2, #24
 80007d0:	0112      	lsls	r2, r2, #4
 80007d2:	58d1      	ldr	r1, [r2, r3]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	055a      	lsls	r2, r3, #21
                                                           hcan->pTxMsg->RTR);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e0:	68db      	ldr	r3, [r3, #12]
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << CAN_TI0R_STID_Pos) | \
 80007e2:	431a      	orrs	r2, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4311      	orrs	r1, r2
 80007ea:	68fa      	ldr	r2, [r7, #12]
 80007ec:	3218      	adds	r2, #24
 80007ee:	0112      	lsls	r2, r2, #4
 80007f0:	50d1      	str	r1, [r2, r3]
 80007f2:	e018      	b.n	8000826 <HAL_CAN_Transmit+0x156>
    }
    else
    {
      assert_param(IS_CAN_EXTID(hcan->pTxMsg->ExtId));
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) | \
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	68fa      	ldr	r2, [r7, #12]
 80007fa:	3218      	adds	r2, #24
 80007fc:	0112      	lsls	r2, r2, #4
 80007fe:	58d1      	ldr	r1, [r2, r3]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	00da      	lsls	r2, r3, #3
                                                           hcan->pTxMsg->IDE | \
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080c:	689b      	ldr	r3, [r3, #8]
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) | \
 800080e:	431a      	orrs	r2, r3
                                                           hcan->pTxMsg->RTR);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000814:	68db      	ldr	r3, [r3, #12]
                                                           hcan->pTxMsg->IDE | \
 8000816:	431a      	orrs	r2, r3
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) | \
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4311      	orrs	r1, r2
 800081e:	68fa      	ldr	r2, [r7, #12]
 8000820:	3218      	adds	r2, #24
 8000822:	0112      	lsls	r2, r2, #4
 8000824:	50d1      	str	r1, [r2, r3]
    }
    
    /* Set up the DLC */
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000FU;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	691a      	ldr	r2, [r3, #16]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000830:	210f      	movs	r1, #15
 8000832:	400a      	ands	r2, r1
 8000834:	611a      	str	r2, [r3, #16]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= 0xFFFFFFF0U;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	3318      	adds	r3, #24
 800083e:	011b      	lsls	r3, r3, #4
 8000840:	18d3      	adds	r3, r2, r3
 8000842:	3304      	adds	r3, #4
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6819      	ldr	r1, [r3, #0]
 800084a:	230f      	movs	r3, #15
 800084c:	439a      	bics	r2, r3
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	3318      	adds	r3, #24
 8000852:	011b      	lsls	r3, r3, #4
 8000854:	18cb      	adds	r3, r1, r3
 8000856:	3304      	adds	r3, #4
 8000858:	601a      	str	r2, [r3, #0]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	3318      	adds	r3, #24
 8000862:	011b      	lsls	r3, r3, #4
 8000864:	18d3      	adds	r3, r2, r3
 8000866:	3304      	adds	r3, #4
 8000868:	6818      	ldr	r0, [r3, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	691a      	ldr	r2, [r3, #16]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	6819      	ldr	r1, [r3, #0]
 8000874:	4302      	orrs	r2, r0
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	3318      	adds	r3, #24
 800087a:	011b      	lsls	r3, r3, #4
 800087c:	18cb      	adds	r3, r1, r3
 800087e:	3304      	adds	r3, #4
 8000880:	601a      	str	r2, [r3, #0]

    /* Set up the data field */
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR, ((uint32_t)hcan->pTxMsg->Data[3] << CAN_TDL0R_DATA3_Pos) |
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	7ddb      	ldrb	r3, [r3, #23]
 8000888:	061a      	lsls	r2, r3, #24
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	7d9b      	ldrb	r3, [r3, #22]
 8000890:	041b      	lsls	r3, r3, #16
 8000892:	431a      	orrs	r2, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000898:	7d5b      	ldrb	r3, [r3, #21]
 800089a:	021b      	lsls	r3, r3, #8
 800089c:	431a      	orrs	r2, r3
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	7d1b      	ldrb	r3, [r3, #20]
 80008a4:	0019      	movs	r1, r3
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	6818      	ldr	r0, [r3, #0]
 80008aa:	430a      	orrs	r2, r1
 80008ac:	68f9      	ldr	r1, [r7, #12]
 80008ae:	23c4      	movs	r3, #196	; 0xc4
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	0109      	lsls	r1, r1, #4
 80008b4:	1841      	adds	r1, r0, r1
 80008b6:	18cb      	adds	r3, r1, r3
 80008b8:	601a      	str	r2, [r3, #0]
                                                                ((uint32_t)hcan->pTxMsg->Data[2] << CAN_TDL0R_DATA2_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[1] << CAN_TDL0R_DATA1_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[0] << CAN_TDL0R_DATA0_Pos));
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR, ((uint32_t)hcan->pTxMsg->Data[7] << CAN_TDL0R_DATA3_Pos) |
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	7edb      	ldrb	r3, [r3, #27]
 80008c0:	061a      	lsls	r2, r3, #24
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	7e9b      	ldrb	r3, [r3, #26]
 80008c8:	041b      	lsls	r3, r3, #16
 80008ca:	431a      	orrs	r2, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d0:	7e5b      	ldrb	r3, [r3, #25]
 80008d2:	021b      	lsls	r3, r3, #8
 80008d4:	431a      	orrs	r2, r3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	7e1b      	ldrb	r3, [r3, #24]
 80008dc:	0019      	movs	r1, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6818      	ldr	r0, [r3, #0]
 80008e2:	430a      	orrs	r2, r1
 80008e4:	68f9      	ldr	r1, [r7, #12]
 80008e6:	23c6      	movs	r3, #198	; 0xc6
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	0109      	lsls	r1, r1, #4
 80008ec:	1841      	adds	r1, r0, r1
 80008ee:	18cb      	adds	r3, r1, r3
 80008f0:	601a      	str	r2, [r3, #0]
                                                                ((uint32_t)hcan->pTxMsg->Data[6] << CAN_TDL0R_DATA2_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[5] << CAN_TDL0R_DATA1_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[4] << CAN_TDL0R_DATA0_Pos));

    /* Request transmission */
    SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	68fa      	ldr	r2, [r7, #12]
 80008f8:	3218      	adds	r2, #24
 80008fa:	0112      	lsls	r2, r2, #4
 80008fc:	58d2      	ldr	r2, [r2, r3]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	2101      	movs	r1, #1
 8000904:	4311      	orrs	r1, r2
 8000906:	68fa      	ldr	r2, [r7, #12]
 8000908:	3218      	adds	r2, #24
 800090a:	0112      	lsls	r2, r2, #4
 800090c:	50d1      	str	r1, [r2, r3]
  
    /* Get tick */
    tickstart = HAL_GetTick();   
 800090e:	f7ff fcc3 	bl	8000298 <HAL_GetTick>
 8000912:	0003      	movs	r3, r0
 8000914:	60bb      	str	r3, [r7, #8]
  
    /* Check End of transmission flag */
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 8000916:	e039      	b.n	800098c <HAL_CAN_Transmit+0x2bc>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	3301      	adds	r3, #1
 800091c:	d036      	beq.n	800098c <HAL_CAN_Transmit+0x2bc>
      {
        if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d007      	beq.n	8000934 <HAL_CAN_Transmit+0x264>
 8000924:	f7ff fcb8 	bl	8000298 <HAL_GetTick>
 8000928:	0002      	movs	r2, r0
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	683a      	ldr	r2, [r7, #0]
 8000930:	429a      	cmp	r2, r3
 8000932:	d22b      	bcs.n	800098c <HAL_CAN_Transmit+0x2bc>
        {
          hcan->State = HAL_CAN_STATE_TIMEOUT;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	223d      	movs	r2, #61	; 0x3d
 8000938:	2103      	movs	r1, #3
 800093a:	5499      	strb	r1, [r3, r2]

          /* Cancel transmission */
          __HAL_CAN_CANCEL_TRANSMIT(hcan, transmitmailbox);
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d108      	bne.n	8000954 <HAL_CAN_Transmit+0x284>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	689a      	ldr	r2, [r3, #8]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2180      	movs	r1, #128	; 0x80
 800094e:	430a      	orrs	r2, r1
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	e015      	b.n	8000980 <HAL_CAN_Transmit+0x2b0>
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	2b01      	cmp	r3, #1
 8000958:	d109      	bne.n	800096e <HAL_CAN_Transmit+0x29e>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	6899      	ldr	r1, [r3, #8]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	2380      	movs	r3, #128	; 0x80
 8000966:	021b      	lsls	r3, r3, #8
 8000968:	430b      	orrs	r3, r1
 800096a:	6093      	str	r3, [r2, #8]
 800096c:	e008      	b.n	8000980 <HAL_CAN_Transmit+0x2b0>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	6899      	ldr	r1, [r3, #8]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	2380      	movs	r3, #128	; 0x80
 800097a:	041b      	lsls	r3, r3, #16
 800097c:	430b      	orrs	r3, r1
 800097e:	6093      	str	r3, [r2, #8]

          /* Process unlocked */
          __HAL_UNLOCK(hcan);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	223c      	movs	r2, #60	; 0x3c
 8000984:	2100      	movs	r1, #0
 8000986:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 8000988:	2303      	movs	r3, #3
 800098a:	e055      	b.n	8000a38 <HAL_CAN_Transmit+0x368>
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d10b      	bne.n	80009aa <HAL_CAN_Transmit+0x2da>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	4a29      	ldr	r2, [pc, #164]	; (8000a40 <HAL_CAN_Transmit+0x370>)
 800099a:	4013      	ands	r3, r2
 800099c:	4a29      	ldr	r2, [pc, #164]	; (8000a44 <HAL_CAN_Transmit+0x374>)
 800099e:	4694      	mov	ip, r2
 80009a0:	4463      	add	r3, ip
 80009a2:	1e5a      	subs	r2, r3, #1
 80009a4:	4193      	sbcs	r3, r2
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	e019      	b.n	80009de <HAL_CAN_Transmit+0x30e>
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d10b      	bne.n	80009c8 <HAL_CAN_Transmit+0x2f8>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	4a24      	ldr	r2, [pc, #144]	; (8000a48 <HAL_CAN_Transmit+0x378>)
 80009b8:	4013      	ands	r3, r2
 80009ba:	4a24      	ldr	r2, [pc, #144]	; (8000a4c <HAL_CAN_Transmit+0x37c>)
 80009bc:	4694      	mov	ip, r2
 80009be:	4463      	add	r3, ip
 80009c0:	1e5a      	subs	r2, r3, #1
 80009c2:	4193      	sbcs	r3, r2
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	e00a      	b.n	80009de <HAL_CAN_Transmit+0x30e>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	4a20      	ldr	r2, [pc, #128]	; (8000a50 <HAL_CAN_Transmit+0x380>)
 80009d0:	4013      	ands	r3, r2
 80009d2:	4a20      	ldr	r2, [pc, #128]	; (8000a54 <HAL_CAN_Transmit+0x384>)
 80009d4:	4694      	mov	ip, r2
 80009d6:	4463      	add	r3, ip
 80009d8:	1e5a      	subs	r2, r3, #1
 80009da:	4193      	sbcs	r3, r2
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d19a      	bne.n	8000918 <HAL_CAN_Transmit+0x248>
        }
      }
    }

    /* Change CAN state */
    switch(hcan->State)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	223d      	movs	r2, #61	; 0x3d
 80009e6:	5c9b      	ldrb	r3, [r3, r2]
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	2b72      	cmp	r3, #114	; 0x72
 80009ec:	d00f      	beq.n	8000a0e <HAL_CAN_Transmit+0x33e>
 80009ee:	dc13      	bgt.n	8000a18 <HAL_CAN_Transmit+0x348>
 80009f0:	2b42      	cmp	r3, #66	; 0x42
 80009f2:	d002      	beq.n	80009fa <HAL_CAN_Transmit+0x32a>
 80009f4:	2b52      	cmp	r3, #82	; 0x52
 80009f6:	d005      	beq.n	8000a04 <HAL_CAN_Transmit+0x334>
 80009f8:	e00e      	b.n	8000a18 <HAL_CAN_Transmit+0x348>
    {
      case(HAL_CAN_STATE_BUSY_TX_RX0):
          hcan->State = HAL_CAN_STATE_BUSY_RX0;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	223d      	movs	r2, #61	; 0x3d
 80009fe:	2122      	movs	r1, #34	; 0x22
 8000a00:	5499      	strb	r1, [r3, r2]
          break;
 8000a02:	e00e      	b.n	8000a22 <HAL_CAN_Transmit+0x352>
      case(HAL_CAN_STATE_BUSY_TX_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_RX1;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	223d      	movs	r2, #61	; 0x3d
 8000a08:	2132      	movs	r1, #50	; 0x32
 8000a0a:	5499      	strb	r1, [r3, r2]
          break;
 8000a0c:	e009      	b.n	8000a22 <HAL_CAN_Transmit+0x352>
      case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	223d      	movs	r2, #61	; 0x3d
 8000a12:	2162      	movs	r1, #98	; 0x62
 8000a14:	5499      	strb	r1, [r3, r2]
          break;
 8000a16:	e004      	b.n	8000a22 <HAL_CAN_Transmit+0x352>
      default: /* HAL_CAN_STATE_BUSY_TX */
          hcan->State = HAL_CAN_STATE_READY;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	223d      	movs	r2, #61	; 0x3d
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	5499      	strb	r1, [r3, r2]
          break;
 8000a20:	46c0      	nop			; (mov r8, r8)
    }

    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	223c      	movs	r2, #60	; 0x3c
 8000a26:	2100      	movs	r1, #0
 8000a28:	5499      	strb	r1, [r3, r2]
    
    /* Return function status */
    return HAL_OK;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	e004      	b.n	8000a38 <HAL_CAN_Transmit+0x368>
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_ERROR; 
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	223d      	movs	r2, #61	; 0x3d
 8000a32:	2104      	movs	r1, #4
 8000a34:	5499      	strb	r1, [r3, r2]

    /* Return function status */
    return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
  }
}
 8000a38:	0018      	movs	r0, r3
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	b004      	add	sp, #16
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	04000001 	.word	0x04000001
 8000a44:	fbffffff 	.word	0xfbffffff
 8000a48:	08000100 	.word	0x08000100
 8000a4c:	f7ffff00 	.word	0xf7ffff00
 8000a50:	10010000 	.word	0x10010000
 8000a54:	efff0000 	.word	0xefff0000

08000a58 <HAL_CAN_Receive_IT>:
  *         the configuration information for the specified CAN.  
  * @param  FIFONumber    FIFO number.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	000a      	movs	r2, r1
 8000a62:	1cfb      	adds	r3, r7, #3
 8000a64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_FIFO(FIFONumber));

  /* Process locked */
  __HAL_LOCK(hcan);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	223c      	movs	r2, #60	; 0x3c
 8000a6a:	5c9b      	ldrb	r3, [r3, r2]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d101      	bne.n	8000a74 <HAL_CAN_Receive_IT+0x1c>
 8000a70:	2302      	movs	r3, #2
 8000a72:	e0b1      	b.n	8000bd8 <HAL_CAN_Receive_IT+0x180>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	223c      	movs	r2, #60	; 0x3c
 8000a78:	2101      	movs	r1, #1
 8000a7a:	5499      	strb	r1, [r3, r2]

  /* Check if CAN state is not busy for RX FIFO0 */
  if ((FIFONumber == CAN_FIFO0) && ((hcan->State == HAL_CAN_STATE_BUSY_RX0) ||        \
 8000a7c:	1cfb      	adds	r3, r7, #3
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d11d      	bne.n	8000ac0 <HAL_CAN_Receive_IT+0x68>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	223d      	movs	r2, #61	; 0x3d
 8000a88:	5c9b      	ldrb	r3, [r3, r2]
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	2b22      	cmp	r3, #34	; 0x22
 8000a8e:	d011      	beq.n	8000ab4 <HAL_CAN_Receive_IT+0x5c>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0) ||      \
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	223d      	movs	r2, #61	; 0x3d
 8000a94:	5c9b      	ldrb	r3, [r3, r2]
 8000a96:	b2db      	uxtb	r3, r3
  if ((FIFONumber == CAN_FIFO0) && ((hcan->State == HAL_CAN_STATE_BUSY_RX0) ||        \
 8000a98:	2b42      	cmp	r3, #66	; 0x42
 8000a9a:	d00b      	beq.n	8000ab4 <HAL_CAN_Receive_IT+0x5c>
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	223d      	movs	r2, #61	; 0x3d
 8000aa0:	5c9b      	ldrb	r3, [r3, r2]
 8000aa2:	b2db      	uxtb	r3, r3
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0) ||      \
 8000aa4:	2b62      	cmp	r3, #98	; 0x62
 8000aa6:	d005      	beq.n	8000ab4 <HAL_CAN_Receive_IT+0x5c>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0_RX1)))
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	223d      	movs	r2, #61	; 0x3d
 8000aac:	5c9b      	ldrb	r3, [r3, r2]
 8000aae:	b2db      	uxtb	r3, r3
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 8000ab0:	2b72      	cmp	r3, #114	; 0x72
 8000ab2:	d105      	bne.n	8000ac0 <HAL_CAN_Receive_IT+0x68>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	223c      	movs	r2, #60	; 0x3c
 8000ab8:	2100      	movs	r1, #0
 8000aba:	5499      	strb	r1, [r3, r2]

    return HAL_BUSY;
 8000abc:	2302      	movs	r3, #2
 8000abe:	e08b      	b.n	8000bd8 <HAL_CAN_Receive_IT+0x180>
  }

  /* Check if CAN state is not busy for RX FIFO1 */
  if ((FIFONumber == CAN_FIFO1) && ((hcan->State == HAL_CAN_STATE_BUSY_RX1) ||        \
 8000ac0:	1cfb      	adds	r3, r7, #3
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d11d      	bne.n	8000b04 <HAL_CAN_Receive_IT+0xac>
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	223d      	movs	r2, #61	; 0x3d
 8000acc:	5c9b      	ldrb	r3, [r3, r2]
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	2b32      	cmp	r3, #50	; 0x32
 8000ad2:	d011      	beq.n	8000af8 <HAL_CAN_Receive_IT+0xa0>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX1) ||      \
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	223d      	movs	r2, #61	; 0x3d
 8000ad8:	5c9b      	ldrb	r3, [r3, r2]
 8000ada:	b2db      	uxtb	r3, r3
  if ((FIFONumber == CAN_FIFO1) && ((hcan->State == HAL_CAN_STATE_BUSY_RX1) ||        \
 8000adc:	2b52      	cmp	r3, #82	; 0x52
 8000ade:	d00b      	beq.n	8000af8 <HAL_CAN_Receive_IT+0xa0>
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	223d      	movs	r2, #61	; 0x3d
 8000ae4:	5c9b      	ldrb	r3, [r3, r2]
 8000ae6:	b2db      	uxtb	r3, r3
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX1) ||      \
 8000ae8:	2b62      	cmp	r3, #98	; 0x62
 8000aea:	d005      	beq.n	8000af8 <HAL_CAN_Receive_IT+0xa0>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0_RX1)))
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	223d      	movs	r2, #61	; 0x3d
 8000af0:	5c9b      	ldrb	r3, [r3, r2]
 8000af2:	b2db      	uxtb	r3, r3
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 8000af4:	2b72      	cmp	r3, #114	; 0x72
 8000af6:	d105      	bne.n	8000b04 <HAL_CAN_Receive_IT+0xac>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	223c      	movs	r2, #60	; 0x3c
 8000afc:	2100      	movs	r1, #0
 8000afe:	5499      	strb	r1, [r3, r2]

    return HAL_BUSY;
 8000b00:	2302      	movs	r3, #2
 8000b02:	e069      	b.n	8000bd8 <HAL_CAN_Receive_IT+0x180>
  }

  /* Change CAN state */
  if (FIFONumber == CAN_FIFO0)
 8000b04:	1cfb      	adds	r3, r7, #3
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d11f      	bne.n	8000b4c <HAL_CAN_Receive_IT+0xf4>
  {
    switch(hcan->State)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	223d      	movs	r2, #61	; 0x3d
 8000b10:	5c9b      	ldrb	r3, [r3, r2]
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	2b52      	cmp	r3, #82	; 0x52
 8000b16:	d00f      	beq.n	8000b38 <HAL_CAN_Receive_IT+0xe0>
 8000b18:	dc13      	bgt.n	8000b42 <HAL_CAN_Receive_IT+0xea>
 8000b1a:	2b12      	cmp	r3, #18
 8000b1c:	d002      	beq.n	8000b24 <HAL_CAN_Receive_IT+0xcc>
 8000b1e:	2b32      	cmp	r3, #50	; 0x32
 8000b20:	d005      	beq.n	8000b2e <HAL_CAN_Receive_IT+0xd6>
 8000b22:	e00e      	b.n	8000b42 <HAL_CAN_Receive_IT+0xea>
    {
      case(HAL_CAN_STATE_BUSY_TX):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	223d      	movs	r2, #61	; 0x3d
 8000b28:	2142      	movs	r1, #66	; 0x42
 8000b2a:	5499      	strb	r1, [r3, r2]
        break;
 8000b2c:	e02e      	b.n	8000b8c <HAL_CAN_Receive_IT+0x134>
      case(HAL_CAN_STATE_BUSY_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	223d      	movs	r2, #61	; 0x3d
 8000b32:	2162      	movs	r1, #98	; 0x62
 8000b34:	5499      	strb	r1, [r3, r2]
        break;
 8000b36:	e029      	b.n	8000b8c <HAL_CAN_Receive_IT+0x134>
      case(HAL_CAN_STATE_BUSY_TX_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	223d      	movs	r2, #61	; 0x3d
 8000b3c:	2172      	movs	r1, #114	; 0x72
 8000b3e:	5499      	strb	r1, [r3, r2]
        break;
 8000b40:	e024      	b.n	8000b8c <HAL_CAN_Receive_IT+0x134>
      default: /* HAL_CAN_STATE_READY */
        hcan->State = HAL_CAN_STATE_BUSY_RX0;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	223d      	movs	r2, #61	; 0x3d
 8000b46:	2122      	movs	r1, #34	; 0x22
 8000b48:	5499      	strb	r1, [r3, r2]
        break;
 8000b4a:	e01f      	b.n	8000b8c <HAL_CAN_Receive_IT+0x134>
    }
  }
  else /* FIFONumber == CAN_FIFO1 */
  {
    switch(hcan->State)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	223d      	movs	r2, #61	; 0x3d
 8000b50:	5c9b      	ldrb	r3, [r3, r2]
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	2b42      	cmp	r3, #66	; 0x42
 8000b56:	d00f      	beq.n	8000b78 <HAL_CAN_Receive_IT+0x120>
 8000b58:	dc13      	bgt.n	8000b82 <HAL_CAN_Receive_IT+0x12a>
 8000b5a:	2b12      	cmp	r3, #18
 8000b5c:	d002      	beq.n	8000b64 <HAL_CAN_Receive_IT+0x10c>
 8000b5e:	2b22      	cmp	r3, #34	; 0x22
 8000b60:	d005      	beq.n	8000b6e <HAL_CAN_Receive_IT+0x116>
 8000b62:	e00e      	b.n	8000b82 <HAL_CAN_Receive_IT+0x12a>
    {
      case(HAL_CAN_STATE_BUSY_TX):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	223d      	movs	r2, #61	; 0x3d
 8000b68:	2152      	movs	r1, #82	; 0x52
 8000b6a:	5499      	strb	r1, [r3, r2]
        break;
 8000b6c:	e00e      	b.n	8000b8c <HAL_CAN_Receive_IT+0x134>
      case(HAL_CAN_STATE_BUSY_RX0):
        hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	223d      	movs	r2, #61	; 0x3d
 8000b72:	2162      	movs	r1, #98	; 0x62
 8000b74:	5499      	strb	r1, [r3, r2]
        break;
 8000b76:	e009      	b.n	8000b8c <HAL_CAN_Receive_IT+0x134>
      case(HAL_CAN_STATE_BUSY_TX_RX0):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	223d      	movs	r2, #61	; 0x3d
 8000b7c:	2172      	movs	r1, #114	; 0x72
 8000b7e:	5499      	strb	r1, [r3, r2]
        break;
 8000b80:	e004      	b.n	8000b8c <HAL_CAN_Receive_IT+0x134>
      default: /* HAL_CAN_STATE_READY */
        hcan->State = HAL_CAN_STATE_BUSY_RX1;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	223d      	movs	r2, #61	; 0x3d
 8000b86:	2132      	movs	r1, #50	; 0x32
 8000b88:	5499      	strb	r1, [r3, r2]
        break;
 8000b8a:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Set CAN error code to none */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	641a      	str	r2, [r3, #64]	; 0x40
  /*  - Enable Error warning Interrupt */
  /*  - Enable Error passive Interrupt */
  /*  - Enable Bus-off Interrupt */
  /*  - Enable Last error code Interrupt */
  /*  - Enable Error Interrupt */
  __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	695a      	ldr	r2, [r3, #20]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	218f      	movs	r1, #143	; 0x8f
 8000b9e:	0209      	lsls	r1, r1, #8
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	615a      	str	r2, [r3, #20]
                            CAN_IT_BOF |
                            CAN_IT_LEC |
                            CAN_IT_ERR);

  /* Process unlocked */
  __HAL_UNLOCK(hcan);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	223c      	movs	r2, #60	; 0x3c
 8000ba8:	2100      	movs	r1, #0
 8000baa:	5499      	strb	r1, [r3, r2]

  if(FIFONumber == CAN_FIFO0)
 8000bac:	1cfb      	adds	r3, r7, #3
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d108      	bne.n	8000bc6 <HAL_CAN_Receive_IT+0x16e>
  {
    /* Enable FIFO 0 overrun and message pending Interrupt */
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV0 | CAN_IT_FMP0);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	695a      	ldr	r2, [r3, #20]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	210a      	movs	r1, #10
 8000bc0:	430a      	orrs	r2, r1
 8000bc2:	615a      	str	r2, [r3, #20]
 8000bc4:	e007      	b.n	8000bd6 <HAL_CAN_Receive_IT+0x17e>
  }
  else
  {
    /* Enable FIFO 1 overrun and message pending Interrupt */
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	695a      	ldr	r2, [r3, #20]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2150      	movs	r1, #80	; 0x50
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	615a      	str	r2, [r3, #20]
  }
  
  /* Return function status */
  return HAL_OK;
 8000bd6:	2300      	movs	r3, #0
}
 8000bd8:	0018      	movs	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b002      	add	sp, #8
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef* hcan)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60fb      	str	r3, [r7, #12]

  /* Check Overrun flag for FIFO0 */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV0))    &&
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	68db      	ldr	r3, [r3, #12]
 8000bf2:	2210      	movs	r2, #16
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	2b10      	cmp	r3, #16
 8000bf8:	d10f      	bne.n	8000c1a <HAL_CAN_IRQHandler+0x3a>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FOV0)))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	695b      	ldr	r3, [r3, #20]
 8000c00:	2208      	movs	r2, #8
 8000c02:	4013      	ands	r3, r2
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV0))    &&
 8000c04:	2b08      	cmp	r3, #8
 8000c06:	d108      	bne.n	8000c1a <HAL_CAN_IRQHandler+0x3a>
  {
    /* Set CAN error code to FOV0 error */
    errorcode |= HAL_CAN_ERROR_FOV0;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	2280      	movs	r2, #128	; 0x80
 8000c0c:	0092      	lsls	r2, r2, #2
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	60fb      	str	r3, [r7, #12]

    /* Clear FIFO0 Overrun Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2210      	movs	r2, #16
 8000c18:	60da      	str	r2, [r3, #12]
  }

  /* Check Overrun flag for FIFO1 */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV1))    &&
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	691b      	ldr	r3, [r3, #16]
 8000c20:	2210      	movs	r2, #16
 8000c22:	4013      	ands	r3, r2
 8000c24:	2b10      	cmp	r3, #16
 8000c26:	d10f      	bne.n	8000c48 <HAL_CAN_IRQHandler+0x68>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FOV1)))
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	2240      	movs	r2, #64	; 0x40
 8000c30:	4013      	ands	r3, r2
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV1))    &&
 8000c32:	2b40      	cmp	r3, #64	; 0x40
 8000c34:	d108      	bne.n	8000c48 <HAL_CAN_IRQHandler+0x68>
  {
    /* Set CAN error code to FOV1 error */
    errorcode |= HAL_CAN_ERROR_FOV1;
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	2280      	movs	r2, #128	; 0x80
 8000c3a:	00d2      	lsls	r2, r2, #3
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	60fb      	str	r3, [r7, #12]

    /* Clear FIFO1 Overrun Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2210      	movs	r2, #16
 8000c46:	611a      	str	r2, [r3, #16]
  }

  /* Check End of transmission flag */
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	695b      	ldr	r3, [r3, #20]
 8000c4e:	2201      	movs	r2, #1
 8000c50:	4013      	ands	r3, r2
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d144      	bne.n	8000ce0 <HAL_CAN_IRQHandler+0x100>
  {
    /* Check Transmit request completion status */
    if((__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0)) ||
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	4aab      	ldr	r2, [pc, #684]	; (8000f0c <HAL_CAN_IRQHandler+0x32c>)
 8000c5e:	4013      	ands	r3, r2
 8000c60:	4aaa      	ldr	r2, [pc, #680]	; (8000f0c <HAL_CAN_IRQHandler+0x32c>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d00f      	beq.n	8000c86 <HAL_CAN_IRQHandler+0xa6>
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1)) ||
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	4aa8      	ldr	r2, [pc, #672]	; (8000f10 <HAL_CAN_IRQHandler+0x330>)
 8000c6e:	4013      	ands	r3, r2
    if((__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0)) ||
 8000c70:	4aa7      	ldr	r2, [pc, #668]	; (8000f10 <HAL_CAN_IRQHandler+0x330>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d007      	beq.n	8000c86 <HAL_CAN_IRQHandler+0xa6>
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_2)))
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	4aa5      	ldr	r2, [pc, #660]	; (8000f14 <HAL_CAN_IRQHandler+0x334>)
 8000c7e:	4013      	ands	r3, r2
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1)) ||
 8000c80:	4aa4      	ldr	r2, [pc, #656]	; (8000f14 <HAL_CAN_IRQHandler+0x334>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d12c      	bne.n	8000ce0 <HAL_CAN_IRQHandler+0x100>
    {
      /* Check Transmit success */
      if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK0)) ||
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	2202      	movs	r2, #2
 8000c8e:	4013      	ands	r3, r2
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	d013      	beq.n	8000cbc <HAL_CAN_IRQHandler+0xdc>
         (__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK1)) ||
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	689a      	ldr	r2, [r3, #8]
 8000c9a:	2380      	movs	r3, #128	; 0x80
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	401a      	ands	r2, r3
      if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK0)) ||
 8000ca0:	2380      	movs	r3, #128	; 0x80
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d009      	beq.n	8000cbc <HAL_CAN_IRQHandler+0xdc>
         (__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK2)))
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	689a      	ldr	r2, [r3, #8]
 8000cae:	2380      	movs	r3, #128	; 0x80
 8000cb0:	029b      	lsls	r3, r3, #10
 8000cb2:	401a      	ands	r2, r3
         (__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK1)) ||
 8000cb4:	2380      	movs	r3, #128	; 0x80
 8000cb6:	029b      	lsls	r3, r3, #10
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d104      	bne.n	8000cc6 <HAL_CAN_IRQHandler+0xe6>
      {
        /* Call transmit function */
        CAN_Transmit_IT(hcan);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f000 f940 	bl	8000f44 <CAN_Transmit_IT>
 8000cc4:	e004      	b.n	8000cd0 <HAL_CAN_IRQHandler+0xf0>
      }
      else /* Transmit failure */
      {
        /* Set CAN error code to TXFAIL error */
        errorcode |= HAL_CAN_ERROR_TXFAIL;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	2280      	movs	r2, #128	; 0x80
 8000cca:	0112      	lsls	r2, r2, #4
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	60fb      	str	r3, [r7, #12]
      }

      /* Clear transmission status flags (RQCPx and TXOKx) */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_RQCP0  | CAN_TSR_RQCP1  | CAN_TSR_RQCP2 | \
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	689a      	ldr	r2, [r3, #8]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	498f      	ldr	r1, [pc, #572]	; (8000f18 <HAL_CAN_IRQHandler+0x338>)
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	609a      	str	r2, [r3, #8]
                                   CAN_FLAG_TXOK0 | CAN_FLAG_TXOK1 | CAN_FLAG_TXOK2);
    }
  }
  
  /* Check End of reception flag for FIFO0 */
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0)) &&
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	695b      	ldr	r3, [r3, #20]
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	4013      	ands	r3, r2
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d10c      	bne.n	8000d08 <HAL_CAN_IRQHandler+0x128>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO0) != 0U))
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	001a      	movs	r2, r3
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	4013      	ands	r3, r2
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0)) &&
 8000cfc:	d004      	beq.n	8000d08 <HAL_CAN_IRQHandler+0x128>
  {
    /* Call receive function */
    CAN_Receive_IT(hcan, CAN_FIFO0);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2100      	movs	r1, #0
 8000d02:	0018      	movs	r0, r3
 8000d04:	f000 f964 	bl	8000fd0 <CAN_Receive_IT>
  }
  
  /* Check End of reception flag for FIFO1 */
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1)) &&
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	695b      	ldr	r3, [r3, #20]
 8000d0e:	2210      	movs	r2, #16
 8000d10:	4013      	ands	r3, r2
 8000d12:	2b10      	cmp	r3, #16
 8000d14:	d10c      	bne.n	8000d30 <HAL_CAN_IRQHandler+0x150>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO1) != 0U))
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	691b      	ldr	r3, [r3, #16]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	001a      	movs	r2, r3
 8000d20:	2303      	movs	r3, #3
 8000d22:	4013      	ands	r3, r2
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1)) &&
 8000d24:	d004      	beq.n	8000d30 <HAL_CAN_IRQHandler+0x150>
  {
    /* Call receive function */
    CAN_Receive_IT(hcan, CAN_FIFO1);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2101      	movs	r1, #1
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f000 f950 	bl	8000fd0 <CAN_Receive_IT>
  }
  
  /* Set error code in handle */
  hcan->ErrorCode |= errorcode;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	431a      	orrs	r2, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Check Error Warning Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	2201      	movs	r2, #1
 8000d44:	4013      	ands	r3, r2
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d119      	bne.n	8000d7e <HAL_CAN_IRQHandler+0x19e>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG)) &&
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	695a      	ldr	r2, [r3, #20]
 8000d50:	2380      	movs	r3, #128	; 0x80
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	401a      	ands	r2, r3
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
 8000d56:	2380      	movs	r3, #128	; 0x80
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d10f      	bne.n	8000d7e <HAL_CAN_IRQHandler+0x19e>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	695a      	ldr	r2, [r3, #20]
 8000d64:	2380      	movs	r3, #128	; 0x80
 8000d66:	021b      	lsls	r3, r3, #8
 8000d68:	401a      	ands	r2, r3
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG)) &&
 8000d6a:	2380      	movs	r3, #128	; 0x80
 8000d6c:	021b      	lsls	r3, r3, #8
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d105      	bne.n	8000d7e <HAL_CAN_IRQHandler+0x19e>
  {
    /* Set CAN error code to EWG error */
    hcan->ErrorCode |= HAL_CAN_ERROR_EWG;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	2201      	movs	r2, #1
 8000d78:	431a      	orrs	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	641a      	str	r2, [r3, #64]	; 0x40
    /* No need for clear of Error Warning Flag as read-only */
  }
  
  /* Check Error Passive Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV))    &&
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	2202      	movs	r2, #2
 8000d86:	4013      	ands	r3, r2
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d119      	bne.n	8000dc0 <HAL_CAN_IRQHandler+0x1e0>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV)) &&
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	695a      	ldr	r2, [r3, #20]
 8000d92:	2380      	movs	r3, #128	; 0x80
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	401a      	ands	r2, r3
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV))    &&
 8000d98:	2380      	movs	r3, #128	; 0x80
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d10f      	bne.n	8000dc0 <HAL_CAN_IRQHandler+0x1e0>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	695a      	ldr	r2, [r3, #20]
 8000da6:	2380      	movs	r3, #128	; 0x80
 8000da8:	021b      	lsls	r3, r3, #8
 8000daa:	401a      	ands	r2, r3
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV)) &&
 8000dac:	2380      	movs	r3, #128	; 0x80
 8000dae:	021b      	lsls	r3, r3, #8
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d105      	bne.n	8000dc0 <HAL_CAN_IRQHandler+0x1e0>
  {
    /* Set CAN error code to EPV error */
    hcan->ErrorCode |= HAL_CAN_ERROR_EPV;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db8:	2202      	movs	r2, #2
 8000dba:	431a      	orrs	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	641a      	str	r2, [r3, #64]	; 0x40
    /* No need for clear of Error Passive Flag as read-only */ 
  }
  
  /* Check Bus-Off Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF))    &&
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	699b      	ldr	r3, [r3, #24]
 8000dc6:	2204      	movs	r2, #4
 8000dc8:	4013      	ands	r3, r2
 8000dca:	2b04      	cmp	r3, #4
 8000dcc:	d119      	bne.n	8000e02 <HAL_CAN_IRQHandler+0x222>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF)) &&
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	695a      	ldr	r2, [r3, #20]
 8000dd4:	2380      	movs	r3, #128	; 0x80
 8000dd6:	00db      	lsls	r3, r3, #3
 8000dd8:	401a      	ands	r2, r3
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF))    &&
 8000dda:	2380      	movs	r3, #128	; 0x80
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d10f      	bne.n	8000e02 <HAL_CAN_IRQHandler+0x222>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	695a      	ldr	r2, [r3, #20]
 8000de8:	2380      	movs	r3, #128	; 0x80
 8000dea:	021b      	lsls	r3, r3, #8
 8000dec:	401a      	ands	r2, r3
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF)) &&
 8000dee:	2380      	movs	r3, #128	; 0x80
 8000df0:	021b      	lsls	r3, r3, #8
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d105      	bne.n	8000e02 <HAL_CAN_IRQHandler+0x222>
  {
    /* Set CAN error code to BOF error */
    hcan->ErrorCode |= HAL_CAN_ERROR_BOF;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	2204      	movs	r2, #4
 8000dfc:	431a      	orrs	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	641a      	str	r2, [r3, #64]	; 0x40
    /* No need for clear of Bus-Off Flag as read-only */
  }
  
  /* Check Last error code Flag */
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	2270      	movs	r2, #112	; 0x70
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	d100      	bne.n	8000e10 <HAL_CAN_IRQHandler+0x230>
 8000e0e:	e05d      	b.n	8000ecc <HAL_CAN_IRQHandler+0x2ec>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	695a      	ldr	r2, [r3, #20]
 8000e16:	2380      	movs	r3, #128	; 0x80
 8000e18:	011b      	lsls	r3, r3, #4
 8000e1a:	401a      	ands	r2, r3
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	011b      	lsls	r3, r3, #4
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d153      	bne.n	8000ecc <HAL_CAN_IRQHandler+0x2ec>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	695a      	ldr	r2, [r3, #20]
 8000e2a:	2380      	movs	r3, #128	; 0x80
 8000e2c:	021b      	lsls	r3, r3, #8
 8000e2e:	401a      	ands	r2, r3
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
 8000e30:	2380      	movs	r3, #128	; 0x80
 8000e32:	021b      	lsls	r3, r3, #8
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d149      	bne.n	8000ecc <HAL_CAN_IRQHandler+0x2ec>
  {
    switch(hcan->Instance->ESR & CAN_ESR_LEC)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	2270      	movs	r2, #112	; 0x70
 8000e40:	4013      	ands	r3, r2
 8000e42:	2b60      	cmp	r3, #96	; 0x60
 8000e44:	d031      	beq.n	8000eaa <HAL_CAN_IRQHandler+0x2ca>
 8000e46:	d838      	bhi.n	8000eba <HAL_CAN_IRQHandler+0x2da>
 8000e48:	2b50      	cmp	r3, #80	; 0x50
 8000e4a:	d027      	beq.n	8000e9c <HAL_CAN_IRQHandler+0x2bc>
 8000e4c:	d835      	bhi.n	8000eba <HAL_CAN_IRQHandler+0x2da>
 8000e4e:	2b40      	cmp	r3, #64	; 0x40
 8000e50:	d01d      	beq.n	8000e8e <HAL_CAN_IRQHandler+0x2ae>
 8000e52:	d832      	bhi.n	8000eba <HAL_CAN_IRQHandler+0x2da>
 8000e54:	2b30      	cmp	r3, #48	; 0x30
 8000e56:	d013      	beq.n	8000e80 <HAL_CAN_IRQHandler+0x2a0>
 8000e58:	d82f      	bhi.n	8000eba <HAL_CAN_IRQHandler+0x2da>
 8000e5a:	2b10      	cmp	r3, #16
 8000e5c:	d002      	beq.n	8000e64 <HAL_CAN_IRQHandler+0x284>
 8000e5e:	2b20      	cmp	r3, #32
 8000e60:	d007      	beq.n	8000e72 <HAL_CAN_IRQHandler+0x292>
      case(CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
          /* Set CAN error code to CRC error */
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
          break;
      default:
          break;
 8000e62:	e02a      	b.n	8000eba <HAL_CAN_IRQHandler+0x2da>
          hcan->ErrorCode |= HAL_CAN_ERROR_STF;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e68:	2208      	movs	r2, #8
 8000e6a:	431a      	orrs	r2, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8000e70:	e024      	b.n	8000ebc <HAL_CAN_IRQHandler+0x2dc>
          hcan->ErrorCode |= HAL_CAN_ERROR_FOR;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	2210      	movs	r2, #16
 8000e78:	431a      	orrs	r2, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8000e7e:	e01d      	b.n	8000ebc <HAL_CAN_IRQHandler+0x2dc>
          hcan->ErrorCode |= HAL_CAN_ERROR_ACK;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e84:	2220      	movs	r2, #32
 8000e86:	431a      	orrs	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8000e8c:	e016      	b.n	8000ebc <HAL_CAN_IRQHandler+0x2dc>
          hcan->ErrorCode |= HAL_CAN_ERROR_BR;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	2240      	movs	r2, #64	; 0x40
 8000e94:	431a      	orrs	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8000e9a:	e00f      	b.n	8000ebc <HAL_CAN_IRQHandler+0x2dc>
          hcan->ErrorCode |= HAL_CAN_ERROR_BD;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea0:	2280      	movs	r2, #128	; 0x80
 8000ea2:	431a      	orrs	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8000ea8:	e008      	b.n	8000ebc <HAL_CAN_IRQHandler+0x2dc>
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	2280      	movs	r2, #128	; 0x80
 8000eb0:	0052      	lsls	r2, r2, #1
 8000eb2:	431a      	orrs	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8000eb8:	e000      	b.n	8000ebc <HAL_CAN_IRQHandler+0x2dc>
          break;
 8000eba:	46c0      	nop			; (mov r8, r8)
    }

    /* Clear Last error code Flag */ 
    CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	699a      	ldr	r2, [r3, #24]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2170      	movs	r1, #112	; 0x70
 8000ec8:	438a      	bics	r2, r1
 8000eca:	619a      	str	r2, [r3, #24]
  }

  /* Call the Error call Back in case of Errors */
  if(hcan->ErrorCode != HAL_CAN_ERROR_NONE)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d017      	beq.n	8000f04 <HAL_CAN_IRQHandler+0x324>
  {
    /* Clear ERRI Flag */ 
    SET_BIT(hcan->Instance->MSR, CAN_MSR_ERRI);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	685a      	ldr	r2, [r3, #4]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2104      	movs	r1, #4
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	605a      	str	r2, [r3, #4]

    /* Set the CAN state ready to be able to start again the process */
    hcan->State = HAL_CAN_STATE_READY;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	223d      	movs	r2, #61	; 0x3d
 8000ee8:	2101      	movs	r1, #1
 8000eea:	5499      	strb	r1, [r3, r2]
    /*  - Disable FIFO 0 message pending Interrupt */
    /*  - Disable FIFO 0 Overrun Interrupt */
    /*  - Disable FIFO 1 message pending Interrupt */
    /*  - Disable FIFO 1 Overrun Interrupt */
    /*  - Disable Transmit mailbox empty Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	695a      	ldr	r2, [r3, #20]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4909      	ldr	r1, [pc, #36]	; (8000f1c <HAL_CAN_IRQHandler+0x33c>)
 8000ef8:	400a      	ands	r2, r1
 8000efa:	615a      	str	r2, [r3, #20]
                               CAN_IT_FMP1|
                               CAN_IT_FOV1|
                               CAN_IT_TME  );

    /* Call Error callback function */
    HAL_CAN_ErrorCallback(hcan);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	0018      	movs	r0, r3
 8000f00:	f005 fc96 	bl	8006830 <HAL_CAN_ErrorCallback>
  }  
}
 8000f04:	46c0      	nop			; (mov r8, r8)
 8000f06:	46bd      	mov	sp, r7
 8000f08:	b004      	add	sp, #16
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	04000001 	.word	0x04000001
 8000f10:	08000100 	.word	0x08000100
 8000f14:	10010000 	.word	0x10010000
 8000f18:	00010519 	.word	0x00010519
 8000f1c:	ffff70a4 	.word	0xffff70a4

08000f20 <HAL_CAN_TxCpltCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxCpltCallback(CAN_HandleTypeDef* hcan)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxCpltCallback could be implemented in the user file
   */
}
 8000f28:	46c0      	nop			; (mov r8, r8)
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	b002      	add	sp, #8
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  return hcan->ErrorCode;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	b002      	add	sp, #8
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <CAN_Transmit_IT>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval HAL status
  */
static HAL_StatusTypeDef CAN_Transmit_IT(CAN_HandleTypeDef* hcan)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Disable Transmit mailbox empty Interrupt */
  __HAL_CAN_DISABLE_IT(hcan, CAN_IT_TME);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	695a      	ldr	r2, [r3, #20]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2101      	movs	r1, #1
 8000f58:	438a      	bics	r2, r1
 8000f5a:	615a      	str	r2, [r3, #20]
  
  if(hcan->State == HAL_CAN_STATE_BUSY_TX)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	223d      	movs	r2, #61	; 0x3d
 8000f60:	5c9b      	ldrb	r3, [r3, r2]
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	2b12      	cmp	r3, #18
 8000f66:	d107      	bne.n	8000f78 <CAN_Transmit_IT+0x34>
    /*  - Disable Error warning Interrupt */
    /*  - Disable Error passive Interrupt */
    /*  - Disable Bus-off Interrupt */
    /*  - Disable Last error code Interrupt */
    /*  - Disable Error Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	695a      	ldr	r2, [r3, #20]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4916      	ldr	r1, [pc, #88]	; (8000fcc <CAN_Transmit_IT+0x88>)
 8000f74:	400a      	ands	r2, r1
 8000f76:	615a      	str	r2, [r3, #20]
                               CAN_IT_LEC |
                               CAN_IT_ERR );
  }

  /* Change CAN state */
  switch(hcan->State)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	223d      	movs	r2, #61	; 0x3d
 8000f7c:	5c9b      	ldrb	r3, [r3, r2]
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b72      	cmp	r3, #114	; 0x72
 8000f82:	d00f      	beq.n	8000fa4 <CAN_Transmit_IT+0x60>
 8000f84:	dc13      	bgt.n	8000fae <CAN_Transmit_IT+0x6a>
 8000f86:	2b42      	cmp	r3, #66	; 0x42
 8000f88:	d002      	beq.n	8000f90 <CAN_Transmit_IT+0x4c>
 8000f8a:	2b52      	cmp	r3, #82	; 0x52
 8000f8c:	d005      	beq.n	8000f9a <CAN_Transmit_IT+0x56>
 8000f8e:	e00e      	b.n	8000fae <CAN_Transmit_IT+0x6a>
  {
    case(HAL_CAN_STATE_BUSY_TX_RX0):
      hcan->State = HAL_CAN_STATE_BUSY_RX0;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	223d      	movs	r2, #61	; 0x3d
 8000f94:	2122      	movs	r1, #34	; 0x22
 8000f96:	5499      	strb	r1, [r3, r2]
      break;
 8000f98:	e00e      	b.n	8000fb8 <CAN_Transmit_IT+0x74>
    case(HAL_CAN_STATE_BUSY_TX_RX1):
      hcan->State = HAL_CAN_STATE_BUSY_RX1;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	223d      	movs	r2, #61	; 0x3d
 8000f9e:	2132      	movs	r1, #50	; 0x32
 8000fa0:	5499      	strb	r1, [r3, r2]
      break;
 8000fa2:	e009      	b.n	8000fb8 <CAN_Transmit_IT+0x74>
    case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
      hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	223d      	movs	r2, #61	; 0x3d
 8000fa8:	2162      	movs	r1, #98	; 0x62
 8000faa:	5499      	strb	r1, [r3, r2]
      break;
 8000fac:	e004      	b.n	8000fb8 <CAN_Transmit_IT+0x74>
    default: /* HAL_CAN_STATE_BUSY_TX */
      hcan->State = HAL_CAN_STATE_READY;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	223d      	movs	r2, #61	; 0x3d
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	5499      	strb	r1, [r3, r2]
      break;
 8000fb6:	46c0      	nop			; (mov r8, r8)
  }

  /* Transmission complete callback */ 
  HAL_CAN_TxCpltCallback(hcan);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f7ff ffb0 	bl	8000f20 <HAL_CAN_TxCpltCallback>
  
  return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	b002      	add	sp, #8
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	ffff70ff 	.word	0xffff70ff

08000fd0 <CAN_Receive_IT>:
  * @param  FIFONumber Specify the FIFO number    
  * @retval HAL status
  * @retval None
  */
static HAL_StatusTypeDef CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	000a      	movs	r2, r1
 8000fda:	1cfb      	adds	r3, r7, #3
 8000fdc:	701a      	strb	r2, [r3, #0]
  CanRxMsgTypeDef* pRxMsg = NULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]

  /* Set RxMsg pointer */
  if(FIFONumber == CAN_FIFO0)
 8000fe2:	1cfb      	adds	r3, r7, #3
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d103      	bne.n	8000ff2 <CAN_Receive_IT+0x22>
  {
    pRxMsg = hcan->pRxMsg;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	e002      	b.n	8000ff8 <CAN_Receive_IT+0x28>
  }
  else /* FIFONumber == CAN_FIFO1 */
  {
    pRxMsg = hcan->pRx1Msg;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ff6:	60fb      	str	r3, [r7, #12]
  }

  /* Get the Id */
  pRxMsg->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	1cfa      	adds	r2, r7, #3
 8000ffe:	7812      	ldrb	r2, [r2, #0]
 8001000:	321b      	adds	r2, #27
 8001002:	0112      	lsls	r2, r2, #4
 8001004:	58d3      	ldr	r3, [r2, r3]
 8001006:	2204      	movs	r2, #4
 8001008:	401a      	ands	r2, r3
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	609a      	str	r2, [r3, #8]
  if (pRxMsg->IDE == CAN_ID_STD)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d10c      	bne.n	8001030 <CAN_Receive_IT+0x60>
  {
    pRxMsg->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_TI0R_STID_Pos;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	1cfa      	adds	r2, r7, #3
 800101c:	7812      	ldrb	r2, [r2, #0]
 800101e:	321b      	adds	r2, #27
 8001020:	0112      	lsls	r2, r2, #4
 8001022:	58d3      	ldr	r3, [r2, r3]
 8001024:	0d5b      	lsrs	r3, r3, #21
 8001026:	055b      	lsls	r3, r3, #21
 8001028:	0d5a      	lsrs	r2, r3, #21
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	e00b      	b.n	8001048 <CAN_Receive_IT+0x78>
  }
  else
  {
    pRxMsg->ExtId = (0xFFFFFFF8U & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_RI0R_EXID_Pos;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	1cfa      	adds	r2, r7, #3
 8001036:	7812      	ldrb	r2, [r2, #0]
 8001038:	321b      	adds	r2, #27
 800103a:	0112      	lsls	r2, r2, #4
 800103c:	58d3      	ldr	r3, [r2, r3]
 800103e:	08db      	lsrs	r3, r3, #3
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	08da      	lsrs	r2, r3, #3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	605a      	str	r2, [r3, #4]
  }
  pRxMsg->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_RI0R_RTR_Pos;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	1cfa      	adds	r2, r7, #3
 800104e:	7812      	ldrb	r2, [r2, #0]
 8001050:	321b      	adds	r2, #27
 8001052:	0112      	lsls	r2, r2, #4
 8001054:	58d3      	ldr	r3, [r2, r3]
 8001056:	085b      	lsrs	r3, r3, #1
 8001058:	2201      	movs	r2, #1
 800105a:	401a      	ands	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	60da      	str	r2, [r3, #12]
  /* Get the DLC */
  pRxMsg->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	1cfb      	adds	r3, r7, #3
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	331b      	adds	r3, #27
 800106a:	011b      	lsls	r3, r3, #4
 800106c:	18d3      	adds	r3, r2, r3
 800106e:	3304      	adds	r3, #4
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	220f      	movs	r2, #15
 8001074:	401a      	ands	r2, r3
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	611a      	str	r2, [r3, #16]
  /* Get the FMI */
  pRxMsg->FMI = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_FMI_Pos;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	1cfb      	adds	r3, r7, #3
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	331b      	adds	r3, #27
 8001084:	011b      	lsls	r3, r3, #4
 8001086:	18d3      	adds	r3, r2, r3
 8001088:	3304      	adds	r3, #4
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	0a1b      	lsrs	r3, r3, #8
 800108e:	22ff      	movs	r2, #255	; 0xff
 8001090:	401a      	ands	r2, r3
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	61da      	str	r2, [r3, #28]
  /* Get the FIFONumber */
  pRxMsg->FIFONumber = FIFONumber;
 8001096:	1cfb      	adds	r3, r7, #3
 8001098:	781a      	ldrb	r2, [r3, #0]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	621a      	str	r2, [r3, #32]
  /* Get the data field */
  pRxMsg->Data[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA0_Pos;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6819      	ldr	r1, [r3, #0]
 80010a2:	1cfb      	adds	r3, r7, #3
 80010a4:	781a      	ldrb	r2, [r3, #0]
 80010a6:	23dc      	movs	r3, #220	; 0xdc
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	0112      	lsls	r2, r2, #4
 80010ac:	188a      	adds	r2, r1, r2
 80010ae:	18d3      	adds	r3, r2, r3
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	751a      	strb	r2, [r3, #20]
  pRxMsg->Data[1] = (CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA1_Pos;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6819      	ldr	r1, [r3, #0]
 80010bc:	1cfb      	adds	r3, r7, #3
 80010be:	781a      	ldrb	r2, [r3, #0]
 80010c0:	23dc      	movs	r3, #220	; 0xdc
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	0112      	lsls	r2, r2, #4
 80010c6:	188a      	adds	r2, r1, r2
 80010c8:	18d3      	adds	r3, r2, r3
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	0a1b      	lsrs	r3, r3, #8
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	755a      	strb	r2, [r3, #21]
  pRxMsg->Data[2] = (CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA2_Pos;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6819      	ldr	r1, [r3, #0]
 80010d8:	1cfb      	adds	r3, r7, #3
 80010da:	781a      	ldrb	r2, [r3, #0]
 80010dc:	23dc      	movs	r3, #220	; 0xdc
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	0112      	lsls	r2, r2, #4
 80010e2:	188a      	adds	r2, r1, r2
 80010e4:	18d3      	adds	r3, r2, r3
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	0c1b      	lsrs	r3, r3, #16
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	759a      	strb	r2, [r3, #22]
  pRxMsg->Data[3] = (CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA3_Pos;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6819      	ldr	r1, [r3, #0]
 80010f4:	1cfb      	adds	r3, r7, #3
 80010f6:	781a      	ldrb	r2, [r3, #0]
 80010f8:	23dc      	movs	r3, #220	; 0xdc
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	0112      	lsls	r2, r2, #4
 80010fe:	188a      	adds	r2, r1, r2
 8001100:	18d3      	adds	r3, r2, r3
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	0e1b      	lsrs	r3, r3, #24
 8001106:	b2da      	uxtb	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	75da      	strb	r2, [r3, #23]
  pRxMsg->Data[4] = (CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA4_Pos;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6819      	ldr	r1, [r3, #0]
 8001110:	1cfb      	adds	r3, r7, #3
 8001112:	781a      	ldrb	r2, [r3, #0]
 8001114:	23de      	movs	r3, #222	; 0xde
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	0112      	lsls	r2, r2, #4
 800111a:	188a      	adds	r2, r1, r2
 800111c:	18d3      	adds	r3, r2, r3
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	b2da      	uxtb	r2, r3
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	761a      	strb	r2, [r3, #24]
  pRxMsg->Data[5] = (CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA5_Pos;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6819      	ldr	r1, [r3, #0]
 800112a:	1cfb      	adds	r3, r7, #3
 800112c:	781a      	ldrb	r2, [r3, #0]
 800112e:	23de      	movs	r3, #222	; 0xde
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	0112      	lsls	r2, r2, #4
 8001134:	188a      	adds	r2, r1, r2
 8001136:	18d3      	adds	r3, r2, r3
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	0a1b      	lsrs	r3, r3, #8
 800113c:	b2da      	uxtb	r2, r3
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	765a      	strb	r2, [r3, #25]
  pRxMsg->Data[6] = (CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA6_Pos;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6819      	ldr	r1, [r3, #0]
 8001146:	1cfb      	adds	r3, r7, #3
 8001148:	781a      	ldrb	r2, [r3, #0]
 800114a:	23de      	movs	r3, #222	; 0xde
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	0112      	lsls	r2, r2, #4
 8001150:	188a      	adds	r2, r1, r2
 8001152:	18d3      	adds	r3, r2, r3
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	0c1b      	lsrs	r3, r3, #16
 8001158:	b2da      	uxtb	r2, r3
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	769a      	strb	r2, [r3, #26]
  pRxMsg->Data[7] = (CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA7_Pos;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6819      	ldr	r1, [r3, #0]
 8001162:	1cfb      	adds	r3, r7, #3
 8001164:	781a      	ldrb	r2, [r3, #0]
 8001166:	23de      	movs	r3, #222	; 0xde
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	0112      	lsls	r2, r2, #4
 800116c:	188a      	adds	r2, r1, r2
 800116e:	18d3      	adds	r3, r2, r3
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	0e1b      	lsrs	r3, r3, #24
 8001174:	b2da      	uxtb	r2, r3
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	76da      	strb	r2, [r3, #27]

  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 800117a:	1cfb      	adds	r3, r7, #3
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d110      	bne.n	80011a4 <CAN_Receive_IT+0x1d4>
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO0);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	68da      	ldr	r2, [r3, #12]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2120      	movs	r1, #32
 800118e:	430a      	orrs	r2, r1
 8001190:	60da      	str	r2, [r3, #12]
    
    /* Disable FIFO 0 overrun and message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV0 | CAN_IT_FMP0);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	695a      	ldr	r2, [r3, #20]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	210a      	movs	r1, #10
 800119e:	438a      	bics	r2, r1
 80011a0:	615a      	str	r2, [r3, #20]
 80011a2:	e00f      	b.n	80011c4 <CAN_Receive_IT+0x1f4>
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	691a      	ldr	r2, [r3, #16]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2120      	movs	r1, #32
 80011b0:	430a      	orrs	r2, r1
 80011b2:	611a      	str	r2, [r3, #16]
    
    /* Disable FIFO 1 overrun and message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	695a      	ldr	r2, [r3, #20]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2150      	movs	r1, #80	; 0x50
 80011c0:	438a      	bics	r2, r1
 80011c2:	615a      	str	r2, [r3, #20]
  }
  
  if((hcan->State == HAL_CAN_STATE_BUSY_RX0) || (hcan->State == HAL_CAN_STATE_BUSY_RX1))
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	223d      	movs	r2, #61	; 0x3d
 80011c8:	5c9b      	ldrb	r3, [r3, r2]
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	2b22      	cmp	r3, #34	; 0x22
 80011ce:	d005      	beq.n	80011dc <CAN_Receive_IT+0x20c>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	223d      	movs	r2, #61	; 0x3d
 80011d4:	5c9b      	ldrb	r3, [r3, r2]
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	2b32      	cmp	r3, #50	; 0x32
 80011da:	d107      	bne.n	80011ec <CAN_Receive_IT+0x21c>
    /*  - Disable Error warning Interrupt */
    /*  - Disable Error passive Interrupt */
    /*  - Disable Bus-off Interrupt */
    /*  - Disable Last error code Interrupt */
    /*  - Disable Error Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	695a      	ldr	r2, [r3, #20]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4928      	ldr	r1, [pc, #160]	; (8001288 <CAN_Receive_IT+0x2b8>)
 80011e8:	400a      	ands	r2, r1
 80011ea:	615a      	str	r2, [r3, #20]
                               CAN_IT_LEC |
                               CAN_IT_ERR );
  }

  /* Change CAN state */
  if (FIFONumber == CAN_FIFO0)
 80011ec:	1cfb      	adds	r3, r7, #3
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d11f      	bne.n	8001234 <CAN_Receive_IT+0x264>
  {
    switch(hcan->State)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	223d      	movs	r2, #61	; 0x3d
 80011f8:	5c9b      	ldrb	r3, [r3, r2]
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	2b72      	cmp	r3, #114	; 0x72
 80011fe:	d00f      	beq.n	8001220 <CAN_Receive_IT+0x250>
 8001200:	dc13      	bgt.n	800122a <CAN_Receive_IT+0x25a>
 8001202:	2b42      	cmp	r3, #66	; 0x42
 8001204:	d002      	beq.n	800120c <CAN_Receive_IT+0x23c>
 8001206:	2b62      	cmp	r3, #98	; 0x62
 8001208:	d005      	beq.n	8001216 <CAN_Receive_IT+0x246>
 800120a:	e00e      	b.n	800122a <CAN_Receive_IT+0x25a>
    {
      case(HAL_CAN_STATE_BUSY_TX_RX0):
        hcan->State = HAL_CAN_STATE_BUSY_TX;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	223d      	movs	r2, #61	; 0x3d
 8001210:	2112      	movs	r1, #18
 8001212:	5499      	strb	r1, [r3, r2]
        break;
 8001214:	e02e      	b.n	8001274 <CAN_Receive_IT+0x2a4>
      case(HAL_CAN_STATE_BUSY_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_RX1;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	223d      	movs	r2, #61	; 0x3d
 800121a:	2132      	movs	r1, #50	; 0x32
 800121c:	5499      	strb	r1, [r3, r2]
        break;
 800121e:	e029      	b.n	8001274 <CAN_Receive_IT+0x2a4>
      case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	223d      	movs	r2, #61	; 0x3d
 8001224:	2152      	movs	r1, #82	; 0x52
 8001226:	5499      	strb	r1, [r3, r2]
        break;
 8001228:	e024      	b.n	8001274 <CAN_Receive_IT+0x2a4>
      default: /* HAL_CAN_STATE_BUSY_RX0 */
        hcan->State = HAL_CAN_STATE_READY;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	223d      	movs	r2, #61	; 0x3d
 800122e:	2101      	movs	r1, #1
 8001230:	5499      	strb	r1, [r3, r2]
        break;
 8001232:	e01f      	b.n	8001274 <CAN_Receive_IT+0x2a4>
    }
  }
  else /* FIFONumber == CAN_FIFO1 */
  {
    switch(hcan->State)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	223d      	movs	r2, #61	; 0x3d
 8001238:	5c9b      	ldrb	r3, [r3, r2]
 800123a:	b2db      	uxtb	r3, r3
 800123c:	2b72      	cmp	r3, #114	; 0x72
 800123e:	d00f      	beq.n	8001260 <CAN_Receive_IT+0x290>
 8001240:	dc13      	bgt.n	800126a <CAN_Receive_IT+0x29a>
 8001242:	2b52      	cmp	r3, #82	; 0x52
 8001244:	d002      	beq.n	800124c <CAN_Receive_IT+0x27c>
 8001246:	2b62      	cmp	r3, #98	; 0x62
 8001248:	d005      	beq.n	8001256 <CAN_Receive_IT+0x286>
 800124a:	e00e      	b.n	800126a <CAN_Receive_IT+0x29a>
    {
      case(HAL_CAN_STATE_BUSY_TX_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	223d      	movs	r2, #61	; 0x3d
 8001250:	2112      	movs	r1, #18
 8001252:	5499      	strb	r1, [r3, r2]
        break;
 8001254:	e00e      	b.n	8001274 <CAN_Receive_IT+0x2a4>
      case(HAL_CAN_STATE_BUSY_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_RX0;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	223d      	movs	r2, #61	; 0x3d
 800125a:	2122      	movs	r1, #34	; 0x22
 800125c:	5499      	strb	r1, [r3, r2]
        break;
 800125e:	e009      	b.n	8001274 <CAN_Receive_IT+0x2a4>
      case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	223d      	movs	r2, #61	; 0x3d
 8001264:	2142      	movs	r1, #66	; 0x42
 8001266:	5499      	strb	r1, [r3, r2]
        break;
 8001268:	e004      	b.n	8001274 <CAN_Receive_IT+0x2a4>
      default: /* HAL_CAN_STATE_BUSY_RX1 */
        hcan->State = HAL_CAN_STATE_READY;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	223d      	movs	r2, #61	; 0x3d
 800126e:	2101      	movs	r1, #1
 8001270:	5499      	strb	r1, [r3, r2]
        break;
 8001272:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Receive complete callback */ 
  HAL_CAN_RxCpltCallback(hcan);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	0018      	movs	r0, r3
 8001278:	f005 fbf8 	bl	8006a6c <HAL_CAN_RxCpltCallback>

  /* Return function status */
  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	0018      	movs	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	b004      	add	sp, #16
 8001284:	bd80      	pop	{r7, pc}
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	ffff70ff 	.word	0xffff70ff

0800128c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	0002      	movs	r2, r0
 8001294:	1dfb      	adds	r3, r7, #7
 8001296:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001298:	1dfb      	adds	r3, r7, #7
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	001a      	movs	r2, r3
 800129e:	231f      	movs	r3, #31
 80012a0:	401a      	ands	r2, r3
 80012a2:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <NVIC_EnableIRQ+0x28>)
 80012a4:	2101      	movs	r1, #1
 80012a6:	4091      	lsls	r1, r2
 80012a8:	000a      	movs	r2, r1
 80012aa:	601a      	str	r2, [r3, #0]
}
 80012ac:	46c0      	nop			; (mov r8, r8)
 80012ae:	46bd      	mov	sp, r7
 80012b0:	b002      	add	sp, #8
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	e000e100 	.word	0xe000e100

080012b8 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	0002      	movs	r2, r0
 80012c0:	1dfb      	adds	r3, r7, #7
 80012c2:	701a      	strb	r2, [r3, #0]
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80012c4:	1dfb      	adds	r3, r7, #7
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	001a      	movs	r2, r3
 80012ca:	231f      	movs	r3, #31
 80012cc:	4013      	ands	r3, r2
 80012ce:	4905      	ldr	r1, [pc, #20]	; (80012e4 <NVIC_DisableIRQ+0x2c>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	409a      	lsls	r2, r3
 80012d4:	0013      	movs	r3, r2
 80012d6:	2280      	movs	r2, #128	; 0x80
 80012d8:	508b      	str	r3, [r1, r2]
}
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	46bd      	mov	sp, r7
 80012de:	b002      	add	sp, #8
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	46c0      	nop			; (mov r8, r8)
 80012e4:	e000e100 	.word	0xe000e100

080012e8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	0002      	movs	r2, r0
 80012f0:	6039      	str	r1, [r7, #0]
 80012f2:	1dfb      	adds	r3, r7, #7
 80012f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80012f6:	1dfb      	adds	r3, r7, #7
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b7f      	cmp	r3, #127	; 0x7f
 80012fc:	d932      	bls.n	8001364 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012fe:	4a2f      	ldr	r2, [pc, #188]	; (80013bc <NVIC_SetPriority+0xd4>)
 8001300:	1dfb      	adds	r3, r7, #7
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	0019      	movs	r1, r3
 8001306:	230f      	movs	r3, #15
 8001308:	400b      	ands	r3, r1
 800130a:	3b08      	subs	r3, #8
 800130c:	089b      	lsrs	r3, r3, #2
 800130e:	3306      	adds	r3, #6
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	18d3      	adds	r3, r2, r3
 8001314:	3304      	adds	r3, #4
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	1dfa      	adds	r2, r7, #7
 800131a:	7812      	ldrb	r2, [r2, #0]
 800131c:	0011      	movs	r1, r2
 800131e:	2203      	movs	r2, #3
 8001320:	400a      	ands	r2, r1
 8001322:	00d2      	lsls	r2, r2, #3
 8001324:	21ff      	movs	r1, #255	; 0xff
 8001326:	4091      	lsls	r1, r2
 8001328:	000a      	movs	r2, r1
 800132a:	43d2      	mvns	r2, r2
 800132c:	401a      	ands	r2, r3
 800132e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	019b      	lsls	r3, r3, #6
 8001334:	22ff      	movs	r2, #255	; 0xff
 8001336:	401a      	ands	r2, r3
 8001338:	1dfb      	adds	r3, r7, #7
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	0018      	movs	r0, r3
 800133e:	2303      	movs	r3, #3
 8001340:	4003      	ands	r3, r0
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001346:	481d      	ldr	r0, [pc, #116]	; (80013bc <NVIC_SetPriority+0xd4>)
 8001348:	1dfb      	adds	r3, r7, #7
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	001c      	movs	r4, r3
 800134e:	230f      	movs	r3, #15
 8001350:	4023      	ands	r3, r4
 8001352:	3b08      	subs	r3, #8
 8001354:	089b      	lsrs	r3, r3, #2
 8001356:	430a      	orrs	r2, r1
 8001358:	3306      	adds	r3, #6
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	18c3      	adds	r3, r0, r3
 800135e:	3304      	adds	r3, #4
 8001360:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001362:	e027      	b.n	80013b4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001364:	4a16      	ldr	r2, [pc, #88]	; (80013c0 <NVIC_SetPriority+0xd8>)
 8001366:	1dfb      	adds	r3, r7, #7
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	b25b      	sxtb	r3, r3
 800136c:	089b      	lsrs	r3, r3, #2
 800136e:	33c0      	adds	r3, #192	; 0xc0
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	589b      	ldr	r3, [r3, r2]
 8001374:	1dfa      	adds	r2, r7, #7
 8001376:	7812      	ldrb	r2, [r2, #0]
 8001378:	0011      	movs	r1, r2
 800137a:	2203      	movs	r2, #3
 800137c:	400a      	ands	r2, r1
 800137e:	00d2      	lsls	r2, r2, #3
 8001380:	21ff      	movs	r1, #255	; 0xff
 8001382:	4091      	lsls	r1, r2
 8001384:	000a      	movs	r2, r1
 8001386:	43d2      	mvns	r2, r2
 8001388:	401a      	ands	r2, r3
 800138a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	019b      	lsls	r3, r3, #6
 8001390:	22ff      	movs	r2, #255	; 0xff
 8001392:	401a      	ands	r2, r3
 8001394:	1dfb      	adds	r3, r7, #7
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	0018      	movs	r0, r3
 800139a:	2303      	movs	r3, #3
 800139c:	4003      	ands	r3, r0
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013a2:	4807      	ldr	r0, [pc, #28]	; (80013c0 <NVIC_SetPriority+0xd8>)
 80013a4:	1dfb      	adds	r3, r7, #7
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	b25b      	sxtb	r3, r3
 80013aa:	089b      	lsrs	r3, r3, #2
 80013ac:	430a      	orrs	r2, r1
 80013ae:	33c0      	adds	r3, #192	; 0xc0
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	501a      	str	r2, [r3, r0]
}
 80013b4:	46c0      	nop			; (mov r8, r8)
 80013b6:	46bd      	mov	sp, r7
 80013b8:	b003      	add	sp, #12
 80013ba:	bd90      	pop	{r4, r7, pc}
 80013bc:	e000ed00 	.word	0xe000ed00
 80013c0:	e000e100 	.word	0xe000e100

080013c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	1e5a      	subs	r2, r3, #1
 80013d0:	2380      	movs	r3, #128	; 0x80
 80013d2:	045b      	lsls	r3, r3, #17
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d301      	bcc.n	80013dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d8:	2301      	movs	r3, #1
 80013da:	e010      	b.n	80013fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013dc:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <SysTick_Config+0x44>)
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	3a01      	subs	r2, #1
 80013e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013e4:	2301      	movs	r3, #1
 80013e6:	425b      	negs	r3, r3
 80013e8:	2103      	movs	r1, #3
 80013ea:	0018      	movs	r0, r3
 80013ec:	f7ff ff7c 	bl	80012e8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <SysTick_Config+0x44>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f6:	4b04      	ldr	r3, [pc, #16]	; (8001408 <SysTick_Config+0x44>)
 80013f8:	2207      	movs	r2, #7
 80013fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	0018      	movs	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	b002      	add	sp, #8
 8001404:	bd80      	pop	{r7, pc}
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	e000e010 	.word	0xe000e010

0800140c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	60b9      	str	r1, [r7, #8]
 8001414:	607a      	str	r2, [r7, #4]
 8001416:	210f      	movs	r1, #15
 8001418:	187b      	adds	r3, r7, r1
 800141a:	1c02      	adds	r2, r0, #0
 800141c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	187b      	adds	r3, r7, r1
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	b25b      	sxtb	r3, r3
 8001426:	0011      	movs	r1, r2
 8001428:	0018      	movs	r0, r3
 800142a:	f7ff ff5d 	bl	80012e8 <NVIC_SetPriority>
}
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	46bd      	mov	sp, r7
 8001432:	b004      	add	sp, #16
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	0002      	movs	r2, r0
 800143e:	1dfb      	adds	r3, r7, #7
 8001440:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001442:	1dfb      	adds	r3, r7, #7
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	b25b      	sxtb	r3, r3
 8001448:	0018      	movs	r0, r3
 800144a:	f7ff ff1f 	bl	800128c <NVIC_EnableIRQ>
}
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	46bd      	mov	sp, r7
 8001452:	b002      	add	sp, #8
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	0002      	movs	r2, r0
 800145e:	1dfb      	adds	r3, r7, #7
 8001460:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001462:	1dfb      	adds	r3, r7, #7
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	b25b      	sxtb	r3, r3
 8001468:	0018      	movs	r0, r3
 800146a:	f7ff ff25 	bl	80012b8 <NVIC_DisableIRQ>
}
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	46bd      	mov	sp, r7
 8001472:	b002      	add	sp, #8
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	0018      	movs	r0, r3
 8001482:	f7ff ff9f 	bl	80013c4 <SysTick_Config>
 8001486:	0003      	movs	r3, r0
}
 8001488:	0018      	movs	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	b002      	add	sp, #8
 800148e:	bd80      	pop	{r7, pc}

08001490 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b04      	cmp	r3, #4
 800149c:	d106      	bne.n	80014ac <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800149e:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 80014a4:	2104      	movs	r1, #4
 80014a6:	430a      	orrs	r2, r1
 80014a8:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80014aa:	e005      	b.n	80014b8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80014ac:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b03      	ldr	r3, [pc, #12]	; (80014c0 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 80014b2:	2104      	movs	r1, #4
 80014b4:	438a      	bics	r2, r1
 80014b6:	601a      	str	r2, [r3, #0]
}
 80014b8:	46c0      	nop			; (mov r8, r8)
 80014ba:	46bd      	mov	sp, r7
 80014bc:	b002      	add	sp, #8
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	e000e010 	.word	0xe000e010

080014c4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80014c8:	f000 f803 	bl	80014d2 <HAL_SYSTICK_Callback>
}
 80014cc:	46c0      	nop			; (mov r8, r8)
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <HAL_FLASH_Unlock+0x28>)
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	2280      	movs	r2, #128	; 0x80
 80014e6:	4013      	ands	r3, r2
 80014e8:	d007      	beq.n	80014fa <HAL_FLASH_Unlock+0x1e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_FLASH_Unlock+0x28>)
 80014ec:	4a06      	ldr	r2, [pc, #24]	; (8001508 <HAL_FLASH_Unlock+0x2c>)
 80014ee:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80014f0:	4b04      	ldr	r3, [pc, #16]	; (8001504 <HAL_FLASH_Unlock+0x28>)
 80014f2:	4a06      	ldr	r2, [pc, #24]	; (800150c <HAL_FLASH_Unlock+0x30>)
 80014f4:	605a      	str	r2, [r3, #4]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK; 
 80014f6:	2300      	movs	r3, #0
 80014f8:	e000      	b.n	80014fc <HAL_FLASH_Unlock+0x20>
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
}
 80014fc:	0018      	movs	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	46c0      	nop			; (mov r8, r8)
 8001504:	40022000 	.word	0x40022000
 8001508:	45670123 	.word	0x45670123
 800150c:	cdef89ab 	.word	0xcdef89ab

08001510 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001514:	4b04      	ldr	r3, [pc, #16]	; (8001528 <HAL_FLASH_Lock+0x18>)
 8001516:	691a      	ldr	r2, [r3, #16]
 8001518:	4b03      	ldr	r3, [pc, #12]	; (8001528 <HAL_FLASH_Lock+0x18>)
 800151a:	2180      	movs	r1, #128	; 0x80
 800151c:	430a      	orrs	r2, r1
 800151e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8001520:	2300      	movs	r3, #0
}
 8001522:	0018      	movs	r0, r3
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40022000 	.word	0x40022000

0800152c <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <HAL_FLASH_OB_Unlock+0x28>)
 8001532:	691a      	ldr	r2, [r3, #16]
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4013      	ands	r3, r2
 800153a:	d107      	bne.n	800154c <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <HAL_FLASH_OB_Unlock+0x28>)
 800153e:	4a06      	ldr	r2, [pc, #24]	; (8001558 <HAL_FLASH_OB_Unlock+0x2c>)
 8001540:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8001542:	4b04      	ldr	r3, [pc, #16]	; (8001554 <HAL_FLASH_OB_Unlock+0x28>)
 8001544:	4a05      	ldr	r2, [pc, #20]	; (800155c <HAL_FLASH_OB_Unlock+0x30>)
 8001546:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8001548:	2300      	movs	r3, #0
 800154a:	e000      	b.n	800154e <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
}
 800154e:	0018      	movs	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40022000 	.word	0x40022000
 8001558:	45670123 	.word	0x45670123
 800155c:	cdef89ab 	.word	0xcdef89ab

08001560 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 8001564:	4b04      	ldr	r3, [pc, #16]	; (8001578 <HAL_FLASH_OB_Lock+0x18>)
 8001566:	691a      	ldr	r2, [r3, #16]
 8001568:	4b03      	ldr	r3, [pc, #12]	; (8001578 <HAL_FLASH_OB_Lock+0x18>)
 800156a:	4904      	ldr	r1, [pc, #16]	; (800157c <HAL_FLASH_OB_Lock+0x1c>)
 800156c:	400a      	ands	r2, r1
 800156e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8001570:	2300      	movs	r3, #0
}
 8001572:	0018      	movs	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40022000 	.word	0x40022000
 800157c:	fffffdff 	.word	0xfffffdff

08001580 <HAL_FLASH_OB_Launch>:
  * @brief  Launch the option byte loading.
  * @note   This function will reset automatically the MCU.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* Set the OBL_Launch bit to launch the option byte loading */
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 8001584:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <HAL_FLASH_OB_Launch+0x24>)
 8001586:	691a      	ldr	r2, [r3, #16]
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_FLASH_OB_Launch+0x24>)
 800158a:	2180      	movs	r1, #128	; 0x80
 800158c:	0189      	lsls	r1, r1, #6
 800158e:	430a      	orrs	r2, r1
 8001590:	611a      	str	r2, [r3, #16]
  
  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE));
 8001592:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <HAL_FLASH_OB_Launch+0x28>)
 8001594:	0018      	movs	r0, r3
 8001596:	f000 f809 	bl	80015ac <FLASH_WaitForLastOperation>
 800159a:	0003      	movs	r3, r0
}
 800159c:	0018      	movs	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	40022000 	.word	0x40022000
 80015a8:	0000c350 	.word	0x0000c350

080015ac <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80015b4:	f7fe fe70 	bl	8000298 <HAL_GetTick>
 80015b8:	0003      	movs	r3, r0
 80015ba:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80015bc:	e00f      	b.n	80015de <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3301      	adds	r3, #1
 80015c2:	d00c      	beq.n	80015de <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d007      	beq.n	80015da <FLASH_WaitForLastOperation+0x2e>
 80015ca:	f7fe fe65 	bl	8000298 <HAL_GetTick>
 80015ce:	0002      	movs	r2, r0
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d201      	bcs.n	80015de <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e01f      	b.n	800161e <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80015de:	4b12      	ldr	r3, [pc, #72]	; (8001628 <FLASH_WaitForLastOperation+0x7c>)
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	2201      	movs	r2, #1
 80015e4:	4013      	ands	r3, r2
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d0e9      	beq.n	80015be <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80015ea:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <FLASH_WaitForLastOperation+0x7c>)
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	2220      	movs	r2, #32
 80015f0:	4013      	ands	r3, r2
 80015f2:	2b20      	cmp	r3, #32
 80015f4:	d102      	bne.n	80015fc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80015f6:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <FLASH_WaitForLastOperation+0x7c>)
 80015f8:	2220      	movs	r2, #32
 80015fa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80015fc:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <FLASH_WaitForLastOperation+0x7c>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	2210      	movs	r2, #16
 8001602:	4013      	ands	r3, r2
 8001604:	2b10      	cmp	r3, #16
 8001606:	d005      	beq.n	8001614 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001608:	4b07      	ldr	r3, [pc, #28]	; (8001628 <FLASH_WaitForLastOperation+0x7c>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	2204      	movs	r2, #4
 800160e:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001610:	2b04      	cmp	r3, #4
 8001612:	d103      	bne.n	800161c <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001614:	f000 f80a 	bl	800162c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e000      	b.n	800161e <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	0018      	movs	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	b004      	add	sp, #16
 8001624:	bd80      	pop	{r7, pc}
 8001626:	46c0      	nop			; (mov r8, r8)
 8001628:	40022000 	.word	0x40022000

0800162c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001632:	2300      	movs	r3, #0
 8001634:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001636:	4b13      	ldr	r3, [pc, #76]	; (8001684 <FLASH_SetErrorCode+0x58>)
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	2210      	movs	r2, #16
 800163c:	4013      	ands	r3, r2
 800163e:	2b10      	cmp	r3, #16
 8001640:	d109      	bne.n	8001656 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001642:	4b11      	ldr	r3, [pc, #68]	; (8001688 <FLASH_SetErrorCode+0x5c>)
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	2202      	movs	r2, #2
 8001648:	431a      	orrs	r2, r3
 800164a:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <FLASH_SetErrorCode+0x5c>)
 800164c:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2210      	movs	r2, #16
 8001652:	4313      	orrs	r3, r2
 8001654:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <FLASH_SetErrorCode+0x58>)
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	2204      	movs	r2, #4
 800165c:	4013      	ands	r3, r2
 800165e:	2b04      	cmp	r3, #4
 8001660:	d109      	bne.n	8001676 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <FLASH_SetErrorCode+0x5c>)
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	2201      	movs	r2, #1
 8001668:	431a      	orrs	r2, r3
 800166a:	4b07      	ldr	r3, [pc, #28]	; (8001688 <FLASH_SetErrorCode+0x5c>)
 800166c:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2204      	movs	r2, #4
 8001672:	4313      	orrs	r3, r2
 8001674:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001676:	4b03      	ldr	r3, [pc, #12]	; (8001684 <FLASH_SetErrorCode+0x58>)
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	60da      	str	r2, [r3, #12]
}  
 800167c:	46c0      	nop			; (mov r8, r8)
 800167e:	46bd      	mov	sp, r7
 8001680:	b002      	add	sp, #8
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40022000 	.word	0x40022000
 8001688:	20000180 	.word	0x20000180

0800168c <HAL_FLASHEx_OBErase>:
  *         (system reset will occur)
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_FLASHEx_OBErase(void)
{
 800168c:	b590      	push	{r4, r7, lr}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
  uint8_t rdptmp = OB_RDP_LEVEL_0;
 8001692:	1dbb      	adds	r3, r7, #6
 8001694:	22aa      	movs	r2, #170	; 0xaa
 8001696:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001698:	1dfb      	adds	r3, r7, #7
 800169a:	2201      	movs	r2, #1
 800169c:	701a      	strb	r2, [r3, #0]

  /* Get the actual read protection Option Byte value */
  rdptmp = FLASH_OB_GetRDP();
 800169e:	f000 fa9f 	bl	8001be0 <FLASH_OB_GetRDP>
 80016a2:	0002      	movs	r2, r0
 80016a4:	1dbb      	adds	r3, r7, #6
 80016a6:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016a8:	1dfc      	adds	r4, r7, #7
 80016aa:	4b1c      	ldr	r3, [pc, #112]	; (800171c <HAL_FLASHEx_OBErase+0x90>)
 80016ac:	0018      	movs	r0, r3
 80016ae:	f7ff ff7d 	bl	80015ac <FLASH_WaitForLastOperation>
 80016b2:	0003      	movs	r3, r0
 80016b4:	7023      	strb	r3, [r4, #0]

  if(status == HAL_OK)
 80016b6:	1dfb      	adds	r3, r7, #7
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d127      	bne.n	800170e <HAL_FLASHEx_OBErase+0x82>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80016be:	4b18      	ldr	r3, [pc, #96]	; (8001720 <HAL_FLASHEx_OBErase+0x94>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	61da      	str	r2, [r3, #28]

    /* If the previous operation is completed, proceed to erase the option bytes */
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 80016c4:	4b17      	ldr	r3, [pc, #92]	; (8001724 <HAL_FLASHEx_OBErase+0x98>)
 80016c6:	691a      	ldr	r2, [r3, #16]
 80016c8:	4b16      	ldr	r3, [pc, #88]	; (8001724 <HAL_FLASHEx_OBErase+0x98>)
 80016ca:	2120      	movs	r1, #32
 80016cc:	430a      	orrs	r2, r1
 80016ce:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80016d0:	4b14      	ldr	r3, [pc, #80]	; (8001724 <HAL_FLASHEx_OBErase+0x98>)
 80016d2:	691a      	ldr	r2, [r3, #16]
 80016d4:	4b13      	ldr	r3, [pc, #76]	; (8001724 <HAL_FLASHEx_OBErase+0x98>)
 80016d6:	2140      	movs	r1, #64	; 0x40
 80016d8:	430a      	orrs	r2, r1
 80016da:	611a      	str	r2, [r3, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016dc:	1dfc      	adds	r4, r7, #7
 80016de:	4b0f      	ldr	r3, [pc, #60]	; (800171c <HAL_FLASHEx_OBErase+0x90>)
 80016e0:	0018      	movs	r0, r3
 80016e2:	f7ff ff63 	bl	80015ac <FLASH_WaitForLastOperation>
 80016e6:	0003      	movs	r3, r0
 80016e8:	7023      	strb	r3, [r4, #0]

    /* If the erase operation is completed, disable the OPTER Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <HAL_FLASHEx_OBErase+0x98>)
 80016ec:	691a      	ldr	r2, [r3, #16]
 80016ee:	4b0d      	ldr	r3, [pc, #52]	; (8001724 <HAL_FLASHEx_OBErase+0x98>)
 80016f0:	2120      	movs	r1, #32
 80016f2:	438a      	bics	r2, r1
 80016f4:	611a      	str	r2, [r3, #16]

    if(status == HAL_OK)
 80016f6:	1dfb      	adds	r3, r7, #7
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d107      	bne.n	800170e <HAL_FLASHEx_OBErase+0x82>
    {
      /* Restore the last read protection Option Byte value */
      status = FLASH_OB_RDP_LevelConfig(rdptmp);
 80016fe:	1dfc      	adds	r4, r7, #7
 8001700:	1dbb      	adds	r3, r7, #6
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	0018      	movs	r0, r3
 8001706:	f000 f981 	bl	8001a0c <FLASH_OB_RDP_LevelConfig>
 800170a:	0003      	movs	r3, r0
 800170c:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Return the erase status */
  return status;
 800170e:	1dfb      	adds	r3, r7, #7
 8001710:	781b      	ldrb	r3, [r3, #0]
}
 8001712:	0018      	movs	r0, r3
 8001714:	46bd      	mov	sp, r7
 8001716:	b003      	add	sp, #12
 8001718:	bd90      	pop	{r4, r7, pc}
 800171a:	46c0      	nop			; (mov r8, r8)
 800171c:	0000c350 	.word	0x0000c350
 8001720:	20000180 	.word	0x20000180
 8001724:	40022000 	.word	0x40022000

08001728 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001728:	b5b0      	push	{r4, r5, r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001730:	230f      	movs	r3, #15
 8001732:	18fb      	adds	r3, r7, r3
 8001734:	2201      	movs	r2, #1
 8001736:	701a      	strb	r2, [r3, #0]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001738:	4b43      	ldr	r3, [pc, #268]	; (8001848 <HAL_FLASHEx_OBProgram+0x120>)
 800173a:	7e1b      	ldrb	r3, [r3, #24]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d101      	bne.n	8001744 <HAL_FLASHEx_OBProgram+0x1c>
 8001740:	2302      	movs	r3, #2
 8001742:	e07d      	b.n	8001840 <HAL_FLASHEx_OBProgram+0x118>
 8001744:	4b40      	ldr	r3, [pc, #256]	; (8001848 <HAL_FLASHEx_OBProgram+0x120>)
 8001746:	2201      	movs	r2, #1
 8001748:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Write protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2201      	movs	r2, #1
 8001750:	4013      	ands	r3, r2
 8001752:	d021      	beq.n	8001798 <HAL_FLASHEx_OBProgram+0x70>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d109      	bne.n	8001770 <HAL_FLASHEx_OBProgram+0x48>
    {
      /* Enable of Write protection on the selected page */
      status = FLASH_OB_EnableWRP(pOBInit->WRPPage);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	220f      	movs	r2, #15
 8001762:	18bc      	adds	r4, r7, r2
 8001764:	0018      	movs	r0, r3
 8001766:	f000 f88d 	bl	8001884 <FLASH_OB_EnableWRP>
 800176a:	0003      	movs	r3, r0
 800176c:	7023      	strb	r3, [r4, #0]
 800176e:	e008      	b.n	8001782 <HAL_FLASHEx_OBProgram+0x5a>
    }
    else
    {
      /* Disable of Write protection on the selected page */
      status = FLASH_OB_DisableWRP(pOBInit->WRPPage);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	220f      	movs	r2, #15
 8001776:	18bc      	adds	r4, r7, r2
 8001778:	0018      	movs	r0, r3
 800177a:	f000 f8e5 	bl	8001948 <FLASH_OB_DisableWRP>
 800177e:	0003      	movs	r3, r0
 8001780:	7023      	strb	r3, [r4, #0]
    }
    if (status != HAL_OK)
 8001782:	210f      	movs	r1, #15
 8001784:	187b      	adds	r3, r7, r1
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d005      	beq.n	8001798 <HAL_FLASHEx_OBProgram+0x70>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 800178c:	4b2e      	ldr	r3, [pc, #184]	; (8001848 <HAL_FLASHEx_OBProgram+0x120>)
 800178e:	2200      	movs	r2, #0
 8001790:	761a      	strb	r2, [r3, #24]
      return status;
 8001792:	187b      	adds	r3, r7, r1
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	e053      	b.n	8001840 <HAL_FLASHEx_OBProgram+0x118>
    }
  }

  /* Read protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2202      	movs	r2, #2
 800179e:	4013      	ands	r3, r2
 80017a0:	d013      	beq.n	80017ca <HAL_FLASHEx_OBProgram+0xa2>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	7b1b      	ldrb	r3, [r3, #12]
 80017a6:	250f      	movs	r5, #15
 80017a8:	197c      	adds	r4, r7, r5
 80017aa:	0018      	movs	r0, r3
 80017ac:	f000 f92e 	bl	8001a0c <FLASH_OB_RDP_LevelConfig>
 80017b0:	0003      	movs	r3, r0
 80017b2:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK)
 80017b4:	0029      	movs	r1, r5
 80017b6:	187b      	adds	r3, r7, r1
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d005      	beq.n	80017ca <HAL_FLASHEx_OBProgram+0xa2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 80017be:	4b22      	ldr	r3, [pc, #136]	; (8001848 <HAL_FLASHEx_OBProgram+0x120>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	761a      	strb	r2, [r3, #24]
      return status;
 80017c4:	187b      	adds	r3, r7, r1
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	e03a      	b.n	8001840 <HAL_FLASHEx_OBProgram+0x118>
    }
  }

  /* USER configuration */
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2204      	movs	r2, #4
 80017d0:	4013      	ands	r3, r2
 80017d2:	d013      	beq.n	80017fc <HAL_FLASHEx_OBProgram+0xd4>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	7b5b      	ldrb	r3, [r3, #13]
 80017d8:	250f      	movs	r5, #15
 80017da:	197c      	adds	r4, r7, r5
 80017dc:	0018      	movs	r0, r3
 80017de:	f000 f975 	bl	8001acc <FLASH_OB_UserConfig>
 80017e2:	0003      	movs	r3, r0
 80017e4:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK)
 80017e6:	0029      	movs	r1, r5
 80017e8:	187b      	adds	r3, r7, r1
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d005      	beq.n	80017fc <HAL_FLASHEx_OBProgram+0xd4>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 80017f0:	4b15      	ldr	r3, [pc, #84]	; (8001848 <HAL_FLASHEx_OBProgram+0x120>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	761a      	strb	r2, [r3, #24]
      return status;
 80017f6:	187b      	adds	r3, r7, r1
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	e021      	b.n	8001840 <HAL_FLASHEx_OBProgram+0x118>
    }
  }

  /* DATA configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_DATA) == OPTIONBYTE_DATA)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2208      	movs	r2, #8
 8001802:	4013      	ands	r3, r2
 8001804:	d016      	beq.n	8001834 <HAL_FLASHEx_OBProgram+0x10c>
  {
    status = FLASH_OB_ProgramData(pOBInit->DATAAddress, pOBInit->DATAData);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	691a      	ldr	r2, [r3, #16]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	7d1b      	ldrb	r3, [r3, #20]
 800180e:	250f      	movs	r5, #15
 8001810:	197c      	adds	r4, r7, r5
 8001812:	0019      	movs	r1, r3
 8001814:	0010      	movs	r0, r2
 8001816:	f000 f999 	bl	8001b4c <FLASH_OB_ProgramData>
 800181a:	0003      	movs	r3, r0
 800181c:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK)
 800181e:	0029      	movs	r1, r5
 8001820:	187b      	adds	r3, r7, r1
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d005      	beq.n	8001834 <HAL_FLASHEx_OBProgram+0x10c>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8001828:	4b07      	ldr	r3, [pc, #28]	; (8001848 <HAL_FLASHEx_OBProgram+0x120>)
 800182a:	2200      	movs	r2, #0
 800182c:	761a      	strb	r2, [r3, #24]
      return status;
 800182e:	187b      	adds	r3, r7, r1
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	e005      	b.n	8001840 <HAL_FLASHEx_OBProgram+0x118>
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001834:	4b04      	ldr	r3, [pc, #16]	; (8001848 <HAL_FLASHEx_OBProgram+0x120>)
 8001836:	2200      	movs	r2, #0
 8001838:	761a      	strb	r2, [r3, #24]

  return status;
 800183a:	230f      	movs	r3, #15
 800183c:	18fb      	adds	r3, r7, r3
 800183e:	781b      	ldrb	r3, [r3, #0]
}
 8001840:	0018      	movs	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	b004      	add	sp, #16
 8001846:	bdb0      	pop	{r4, r5, r7, pc}
 8001848:	20000180 	.word	0x20000180

0800184c <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2207      	movs	r2, #7
 8001858:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPPage = FLASH_OB_GetWRP();
 800185a:	f000 f9b7 	bl	8001bcc <FLASH_OB_GetWRP>
 800185e:	0002      	movs	r2, r0
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8001864:	f000 f9bc 	bl	8001be0 <FLASH_OB_GetRDP>
 8001868:	0003      	movs	r3, r0
 800186a:	b2da      	uxtb	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	731a      	strb	r2, [r3, #12]

  /*Get USER*/
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8001870:	f000 f9d2 	bl	8001c18 <FLASH_OB_GetUser>
 8001874:	0003      	movs	r3, r0
 8001876:	001a      	movs	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	735a      	strb	r2, [r3, #13]
}
 800187c:	46c0      	nop			; (mov r8, r8)
 800187e:	46bd      	mov	sp, r7
 8001880:	b002      	add	sp, #8
 8001882:	bd80      	pop	{r7, pc}

08001884 <FLASH_OB_EnableWRP>:
  * @param  WriteProtectPage specifies the page(s) to be write protected.
  *         The value of this parameter depend on device used within the same series 
  * @retval HAL status 
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WriteProtectPage)
{
 8001884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800188c:	240f      	movs	r4, #15
 800188e:	193b      	adds	r3, r7, r4
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]
  uint16_t WRP0_Data = 0xFFFFU;
 8001894:	260c      	movs	r6, #12
 8001896:	19bb      	adds	r3, r7, r6
 8001898:	2201      	movs	r2, #1
 800189a:	4252      	negs	r2, r2
 800189c:	801a      	strh	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(WriteProtectPage));
    
  /* Get current write protected pages and the new pages to be protected ******/
  WriteProtectPage = (uint32_t)(~((~FLASH_OB_GetWRP()) | WriteProtectPage));
 800189e:	f000 f995 	bl	8001bcc <FLASH_OB_GetWRP>
 80018a2:	0002      	movs	r2, r0
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	43db      	mvns	r3, r3
 80018a8:	4013      	ands	r3, r2
 80018aa:	607b      	str	r3, [r7, #4]
  
#if defined(OB_WRP_PAGES0TO15MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
#elif defined(OB_WRP_PAGES0TO31MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	19bb      	adds	r3, r7, r6
 80018b2:	21ff      	movs	r1, #255	; 0xff
 80018b4:	400a      	ands	r2, r1
 80018b6:	801a      	strh	r2, [r3, #0]
#elif defined(OB_WRP_PAGES48TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
#endif /* OB_WRP_PAGES48TO63MASK */
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80018b8:	0025      	movs	r5, r4
 80018ba:	193c      	adds	r4, r7, r4
 80018bc:	4b1e      	ldr	r3, [pc, #120]	; (8001938 <FLASH_OB_EnableWRP+0xb4>)
 80018be:	0018      	movs	r0, r3
 80018c0:	f7ff fe74 	bl	80015ac <FLASH_WaitForLastOperation>
 80018c4:	0003      	movs	r3, r0
 80018c6:	7023      	strb	r3, [r4, #0]

  if(status == HAL_OK)
 80018c8:	197b      	adds	r3, r7, r5
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d12c      	bne.n	800192a <FLASH_OB_EnableWRP+0xa6>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80018d0:	4b1a      	ldr	r3, [pc, #104]	; (800193c <FLASH_OB_EnableWRP+0xb8>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	61da      	str	r2, [r3, #28]

    /* To be able to write again option byte, need to perform a option byte erase */
    status = HAL_FLASHEx_OBErase();
 80018d6:	197c      	adds	r4, r7, r5
 80018d8:	f7ff fed8 	bl	800168c <HAL_FLASHEx_OBErase>
 80018dc:	0003      	movs	r3, r0
 80018de:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)  
 80018e0:	0028      	movs	r0, r5
 80018e2:	197b      	adds	r3, r7, r5
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d11f      	bne.n	800192a <FLASH_OB_EnableWRP+0xa6>
    {
      /* Enable write protection */
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <FLASH_OB_EnableWRP+0xbc>)
 80018ec:	691a      	ldr	r2, [r3, #16]
 80018ee:	4b14      	ldr	r3, [pc, #80]	; (8001940 <FLASH_OB_EnableWRP+0xbc>)
 80018f0:	2110      	movs	r1, #16
 80018f2:	430a      	orrs	r2, r1
 80018f4:	611a      	str	r2, [r3, #16]

#if defined(OB_WRP0_WRP0)
      if(WRP0_Data != 0xFFU)
 80018f6:	19bb      	adds	r3, r7, r6
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	2bff      	cmp	r3, #255	; 0xff
 80018fc:	d00f      	beq.n	800191e <FLASH_OB_EnableWRP+0x9a>
      {
        OB->WRP0 &= WRP0_Data;
 80018fe:	4b11      	ldr	r3, [pc, #68]	; (8001944 <FLASH_OB_EnableWRP+0xc0>)
 8001900:	891b      	ldrh	r3, [r3, #8]
 8001902:	b29b      	uxth	r3, r3
 8001904:	490f      	ldr	r1, [pc, #60]	; (8001944 <FLASH_OB_EnableWRP+0xc0>)
 8001906:	19ba      	adds	r2, r7, r6
 8001908:	8812      	ldrh	r2, [r2, #0]
 800190a:	4013      	ands	r3, r2
 800190c:	b29b      	uxth	r3, r3
 800190e:	810b      	strh	r3, [r1, #8]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001910:	183c      	adds	r4, r7, r0
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <FLASH_OB_EnableWRP+0xb4>)
 8001914:	0018      	movs	r0, r3
 8001916:	f7ff fe49 	bl	80015ac <FLASH_WaitForLastOperation>
 800191a:	0003      	movs	r3, r0
 800191c:	7023      	strb	r3, [r4, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
      }
#endif /* OB_WRP3_WRP3 */

      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 800191e:	4b08      	ldr	r3, [pc, #32]	; (8001940 <FLASH_OB_EnableWRP+0xbc>)
 8001920:	691a      	ldr	r2, [r3, #16]
 8001922:	4b07      	ldr	r3, [pc, #28]	; (8001940 <FLASH_OB_EnableWRP+0xbc>)
 8001924:	2110      	movs	r1, #16
 8001926:	438a      	bics	r2, r1
 8001928:	611a      	str	r2, [r3, #16]
    }
  }
  
  return status;
 800192a:	230f      	movs	r3, #15
 800192c:	18fb      	adds	r3, r7, r3
 800192e:	781b      	ldrb	r3, [r3, #0]
}
 8001930:	0018      	movs	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	b005      	add	sp, #20
 8001936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001938:	0000c350 	.word	0x0000c350
 800193c:	20000180 	.word	0x20000180
 8001940:	40022000 	.word	0x40022000
 8001944:	1ffff800 	.word	0x1ffff800

08001948 <FLASH_OB_DisableWRP>:
  * @param  WriteProtectPage specifies the page(s) to be write unprotected.
  *         The value of this parameter depend on device used within the same series 
  * @retval HAL status 
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WriteProtectPage)
{
 8001948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001950:	240f      	movs	r4, #15
 8001952:	193b      	adds	r3, r7, r4
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]
  uint16_t WRP0_Data = 0xFFFFU;
 8001958:	260c      	movs	r6, #12
 800195a:	19bb      	adds	r3, r7, r6
 800195c:	2201      	movs	r2, #1
 800195e:	4252      	negs	r2, r2
 8001960:	801a      	strh	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(WriteProtectPage));

  /* Get current write protected pages and the new pages to be unprotected ******/
  WriteProtectPage = (FLASH_OB_GetWRP() | WriteProtectPage);
 8001962:	f000 f933 	bl	8001bcc <FLASH_OB_GetWRP>
 8001966:	0002      	movs	r2, r0
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4313      	orrs	r3, r2
 800196c:	607b      	str	r3, [r7, #4]

#if defined(OB_WRP_PAGES0TO15MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
#elif defined(OB_WRP_PAGES0TO31MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	b29a      	uxth	r2, r3
 8001972:	19bb      	adds	r3, r7, r6
 8001974:	21ff      	movs	r1, #255	; 0xff
 8001976:	400a      	ands	r2, r1
 8001978:	801a      	strh	r2, [r3, #0]
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
#endif /* OB_WRP_PAGES48TO63MASK */

    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800197a:	0025      	movs	r5, r4
 800197c:	193c      	adds	r4, r7, r4
 800197e:	4b1f      	ldr	r3, [pc, #124]	; (80019fc <FLASH_OB_DisableWRP+0xb4>)
 8001980:	0018      	movs	r0, r3
 8001982:	f7ff fe13 	bl	80015ac <FLASH_WaitForLastOperation>
 8001986:	0003      	movs	r3, r0
 8001988:	7023      	strb	r3, [r4, #0]

  if(status == HAL_OK)
 800198a:	197b      	adds	r3, r7, r5
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d12c      	bne.n	80019ec <FLASH_OB_DisableWRP+0xa4>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001992:	4b1b      	ldr	r3, [pc, #108]	; (8001a00 <FLASH_OB_DisableWRP+0xb8>)
 8001994:	2200      	movs	r2, #0
 8001996:	61da      	str	r2, [r3, #28]

    /* To be able to write again option byte, need to perform a option byte erase */
    status = HAL_FLASHEx_OBErase();
 8001998:	197c      	adds	r4, r7, r5
 800199a:	f7ff fe77 	bl	800168c <HAL_FLASHEx_OBErase>
 800199e:	0003      	movs	r3, r0
 80019a0:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)  
 80019a2:	0028      	movs	r0, r5
 80019a4:	197b      	adds	r3, r7, r5
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d11f      	bne.n	80019ec <FLASH_OB_DisableWRP+0xa4>
    {
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80019ac:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <FLASH_OB_DisableWRP+0xbc>)
 80019ae:	691a      	ldr	r2, [r3, #16]
 80019b0:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <FLASH_OB_DisableWRP+0xbc>)
 80019b2:	2110      	movs	r1, #16
 80019b4:	430a      	orrs	r2, r1
 80019b6:	611a      	str	r2, [r3, #16]

#if defined(OB_WRP0_WRP0)
      if(WRP0_Data != 0xFFU)
 80019b8:	19bb      	adds	r3, r7, r6
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	2bff      	cmp	r3, #255	; 0xff
 80019be:	d00f      	beq.n	80019e0 <FLASH_OB_DisableWRP+0x98>
      {
        OB->WRP0 |= WRP0_Data;
 80019c0:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <FLASH_OB_DisableWRP+0xc0>)
 80019c2:	891b      	ldrh	r3, [r3, #8]
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	4910      	ldr	r1, [pc, #64]	; (8001a08 <FLASH_OB_DisableWRP+0xc0>)
 80019c8:	19bb      	adds	r3, r7, r6
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	810b      	strh	r3, [r1, #8]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80019d2:	183c      	adds	r4, r7, r0
 80019d4:	4b09      	ldr	r3, [pc, #36]	; (80019fc <FLASH_OB_DisableWRP+0xb4>)
 80019d6:	0018      	movs	r0, r3
 80019d8:	f7ff fde8 	bl	80015ac <FLASH_WaitForLastOperation>
 80019dc:	0003      	movs	r3, r0
 80019de:	7023      	strb	r3, [r4, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
      }
#endif /* OB_WRP3_WRP3 */

      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80019e0:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <FLASH_OB_DisableWRP+0xbc>)
 80019e2:	691a      	ldr	r2, [r3, #16]
 80019e4:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <FLASH_OB_DisableWRP+0xbc>)
 80019e6:	2110      	movs	r1, #16
 80019e8:	438a      	bics	r2, r1
 80019ea:	611a      	str	r2, [r3, #16]
    }
  }
  return status;
 80019ec:	230f      	movs	r3, #15
 80019ee:	18fb      	adds	r3, r7, r3
 80019f0:	781b      	ldrb	r3, [r3, #0]
}
 80019f2:	0018      	movs	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	b005      	add	sp, #20
 80019f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	0000c350 	.word	0x0000c350
 8001a00:	20000180 	.word	0x20000180
 8001a04:	40022000 	.word	0x40022000
 8001a08:	1ffff800 	.word	0x1ffff800

08001a0c <FLASH_OB_RDP_LevelConfig>:
  *            @arg @ref OB_RDP_LEVEL_2 Full chip protection
  * @note   Warning: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t ReadProtectLevel)
{
 8001a0c:	b5b0      	push	{r4, r5, r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	0002      	movs	r2, r0
 8001a14:	1dfb      	adds	r3, r7, #7
 8001a16:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a18:	250f      	movs	r5, #15
 8001a1a:	197b      	adds	r3, r7, r5
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(ReadProtectLevel));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a20:	197c      	adds	r4, r7, r5
 8001a22:	4b26      	ldr	r3, [pc, #152]	; (8001abc <FLASH_OB_RDP_LevelConfig+0xb0>)
 8001a24:	0018      	movs	r0, r3
 8001a26:	f7ff fdc1 	bl	80015ac <FLASH_WaitForLastOperation>
 8001a2a:	0003      	movs	r3, r0
 8001a2c:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8001a2e:	0028      	movs	r0, r5
 8001a30:	183b      	adds	r3, r7, r0
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d139      	bne.n	8001aac <FLASH_OB_RDP_LevelConfig+0xa0>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a38:	4b21      	ldr	r3, [pc, #132]	; (8001ac0 <FLASH_OB_RDP_LevelConfig+0xb4>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	61da      	str	r2, [r3, #28]
    
    /* If the previous operation is completed, proceed to erase the option bytes */
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 8001a3e:	4b21      	ldr	r3, [pc, #132]	; (8001ac4 <FLASH_OB_RDP_LevelConfig+0xb8>)
 8001a40:	691a      	ldr	r2, [r3, #16]
 8001a42:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <FLASH_OB_RDP_LevelConfig+0xb8>)
 8001a44:	2120      	movs	r1, #32
 8001a46:	430a      	orrs	r2, r1
 8001a48:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001a4a:	4b1e      	ldr	r3, [pc, #120]	; (8001ac4 <FLASH_OB_RDP_LevelConfig+0xb8>)
 8001a4c:	691a      	ldr	r2, [r3, #16]
 8001a4e:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <FLASH_OB_RDP_LevelConfig+0xb8>)
 8001a50:	2140      	movs	r1, #64	; 0x40
 8001a52:	430a      	orrs	r2, r1
 8001a54:	611a      	str	r2, [r3, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a56:	0005      	movs	r5, r0
 8001a58:	183c      	adds	r4, r7, r0
 8001a5a:	4b18      	ldr	r3, [pc, #96]	; (8001abc <FLASH_OB_RDP_LevelConfig+0xb0>)
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f7ff fda5 	bl	80015ac <FLASH_WaitForLastOperation>
 8001a62:	0003      	movs	r3, r0
 8001a64:	7023      	strb	r3, [r4, #0]

    /* If the erase operation is completed, disable the OPTER Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 8001a66:	4b17      	ldr	r3, [pc, #92]	; (8001ac4 <FLASH_OB_RDP_LevelConfig+0xb8>)
 8001a68:	691a      	ldr	r2, [r3, #16]
 8001a6a:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <FLASH_OB_RDP_LevelConfig+0xb8>)
 8001a6c:	2120      	movs	r1, #32
 8001a6e:	438a      	bics	r2, r1
 8001a70:	611a      	str	r2, [r3, #16]

    if(status == HAL_OK)
 8001a72:	0028      	movs	r0, r5
 8001a74:	183b      	adds	r3, r7, r0
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d117      	bne.n	8001aac <FLASH_OB_RDP_LevelConfig+0xa0>
    {
      /* Enable the Option Bytes Programming operation */
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001a7c:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <FLASH_OB_RDP_LevelConfig+0xb8>)
 8001a7e:	691a      	ldr	r2, [r3, #16]
 8001a80:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <FLASH_OB_RDP_LevelConfig+0xb8>)
 8001a82:	2110      	movs	r1, #16
 8001a84:	430a      	orrs	r2, r1
 8001a86:	611a      	str	r2, [r3, #16]
      
      WRITE_REG(OB->RDP, ReadProtectLevel);
 8001a88:	4a0f      	ldr	r2, [pc, #60]	; (8001ac8 <FLASH_OB_RDP_LevelConfig+0xbc>)
 8001a8a:	1dfb      	adds	r3, r7, #7
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	8013      	strh	r3, [r2, #0]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE); 
 8001a92:	183c      	adds	r4, r7, r0
 8001a94:	4b09      	ldr	r3, [pc, #36]	; (8001abc <FLASH_OB_RDP_LevelConfig+0xb0>)
 8001a96:	0018      	movs	r0, r3
 8001a98:	f7ff fd88 	bl	80015ac <FLASH_WaitForLastOperation>
 8001a9c:	0003      	movs	r3, r0
 8001a9e:	7023      	strb	r3, [r4, #0]
      
      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001aa0:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <FLASH_OB_RDP_LevelConfig+0xb8>)
 8001aa2:	691a      	ldr	r2, [r3, #16]
 8001aa4:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <FLASH_OB_RDP_LevelConfig+0xb8>)
 8001aa6:	2110      	movs	r1, #16
 8001aa8:	438a      	bics	r2, r1
 8001aaa:	611a      	str	r2, [r3, #16]
    }
  }
  
  return status;
 8001aac:	230f      	movs	r3, #15
 8001aae:	18fb      	adds	r3, r7, r3
 8001ab0:	781b      	ldrb	r3, [r3, #0]
}
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	b004      	add	sp, #16
 8001ab8:	bdb0      	pop	{r4, r5, r7, pc}
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	0000c350 	.word	0x0000c350
 8001ac0:	20000180 	.word	0x20000180
 8001ac4:	40022000 	.word	0x40022000
 8001ac8:	1ffff800 	.word	0x1ffff800

08001acc <FLASH_OB_UserConfig>:
  *         VDDA_Analog_Monitoring(Bit5) and SRAM_Parity_Enable(Bit6). 
  *         For few devices, following option bytes are available: nBOOT0(Bit3) & BOOT_SEL(Bit7).
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t UserConfig)
{
 8001acc:	b5b0      	push	{r4, r5, r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	0002      	movs	r2, r0
 8001ad4:	1dfb      	adds	r3, r7, #7
 8001ad6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ad8:	250f      	movs	r5, #15
 8001ada:	197b      	adds	r3, r7, r5
 8001adc:	2200      	movs	r2, #0
 8001ade:	701a      	strb	r2, [r3, #0]
  assert_param(IS_OB_BOOT_SEL((UserConfig&OB_BOOT_SEL_SET)));
  assert_param(IS_OB_BOOT0((UserConfig&OB_BOOT0_SET)));
#endif /* FLASH_OBR_BOOT_SEL */

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ae0:	197c      	adds	r4, r7, r5
 8001ae2:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <FLASH_OB_UserConfig+0x70>)
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f7ff fd61 	bl	80015ac <FLASH_WaitForLastOperation>
 8001aea:	0003      	movs	r3, r0
 8001aec:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8001aee:	0028      	movs	r0, r5
 8001af0:	183b      	adds	r3, r7, r0
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d11a      	bne.n	8001b2e <FLASH_OB_UserConfig+0x62>
  {     
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001af8:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <FLASH_OB_UserConfig+0x74>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	61da      	str	r2, [r3, #28]

    /* Enable the Option Bytes Programming operation */
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 8001afe:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <FLASH_OB_UserConfig+0x78>)
 8001b00:	691a      	ldr	r2, [r3, #16]
 8001b02:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <FLASH_OB_UserConfig+0x78>)
 8001b04:	2110      	movs	r1, #16
 8001b06:	430a      	orrs	r2, r1
 8001b08:	611a      	str	r2, [r3, #16]
 
#if defined(FLASH_OBR_BOOT_SEL)
    OB->USER = UserConfig;
 8001b0a:	4a0f      	ldr	r2, [pc, #60]	; (8001b48 <FLASH_OB_UserConfig+0x7c>)
 8001b0c:	1dfb      	adds	r3, r7, #7
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	8053      	strh	r3, [r2, #2]
#else
    OB->USER = (UserConfig | 0x88U);
#endif

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b14:	183c      	adds	r4, r7, r0
 8001b16:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <FLASH_OB_UserConfig+0x70>)
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f7ff fd47 	bl	80015ac <FLASH_WaitForLastOperation>
 8001b1e:	0003      	movs	r3, r0
 8001b20:	7023      	strb	r3, [r4, #0]

    /* if the program operation is completed, disable the OPTPG Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001b22:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <FLASH_OB_UserConfig+0x78>)
 8001b24:	691a      	ldr	r2, [r3, #16]
 8001b26:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <FLASH_OB_UserConfig+0x78>)
 8001b28:	2110      	movs	r1, #16
 8001b2a:	438a      	bics	r2, r1
 8001b2c:	611a      	str	r2, [r3, #16]
  }
  
  return status; 
 8001b2e:	230f      	movs	r3, #15
 8001b30:	18fb      	adds	r3, r7, r3
 8001b32:	781b      	ldrb	r3, [r3, #0]
}
 8001b34:	0018      	movs	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	b004      	add	sp, #16
 8001b3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b3c:	0000c350 	.word	0x0000c350
 8001b40:	20000180 	.word	0x20000180
 8001b44:	40022000 	.word	0x40022000
 8001b48:	1ffff800 	.word	0x1ffff800

08001b4c <FLASH_OB_ProgramData>:
  *         This parameter can be 0x1FFFF804 or 0x1FFFF806. 
  * @param  Data specifies the data to be programmed.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_ProgramData(uint32_t Address, uint8_t Data)
{
 8001b4c:	b5b0      	push	{r4, r5, r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	000a      	movs	r2, r1
 8001b56:	1cfb      	adds	r3, r7, #3
 8001b58:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001b5a:	250f      	movs	r5, #15
 8001b5c:	197b      	adds	r3, r7, r5
 8001b5e:	2201      	movs	r2, #1
 8001b60:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b62:	197c      	adds	r4, r7, r5
 8001b64:	4b16      	ldr	r3, [pc, #88]	; (8001bc0 <FLASH_OB_ProgramData+0x74>)
 8001b66:	0018      	movs	r0, r3
 8001b68:	f7ff fd20 	bl	80015ac <FLASH_WaitForLastOperation>
 8001b6c:	0003      	movs	r3, r0
 8001b6e:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8001b70:	0028      	movs	r0, r5
 8001b72:	183b      	adds	r3, r7, r0
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d11a      	bne.n	8001bb0 <FLASH_OB_ProgramData+0x64>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b7a:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <FLASH_OB_ProgramData+0x78>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	61da      	str	r2, [r3, #28]

    /* Enables the Option Bytes Programming operation */
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 8001b80:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <FLASH_OB_ProgramData+0x7c>)
 8001b82:	691a      	ldr	r2, [r3, #16]
 8001b84:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <FLASH_OB_ProgramData+0x7c>)
 8001b86:	2110      	movs	r1, #16
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	611a      	str	r2, [r3, #16]
    *(__IO uint16_t*)Address = Data;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	1cfa      	adds	r2, r7, #3
 8001b90:	7812      	ldrb	r2, [r2, #0]
 8001b92:	b292      	uxth	r2, r2
 8001b94:	801a      	strh	r2, [r3, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b96:	183c      	adds	r4, r7, r0
 8001b98:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <FLASH_OB_ProgramData+0x74>)
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	f7ff fd06 	bl	80015ac <FLASH_WaitForLastOperation>
 8001ba0:	0003      	movs	r3, r0
 8001ba2:	7023      	strb	r3, [r4, #0]
    
    /* If the program operation is completed, disable the OPTPG Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001ba4:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <FLASH_OB_ProgramData+0x7c>)
 8001ba6:	691a      	ldr	r2, [r3, #16]
 8001ba8:	4b07      	ldr	r3, [pc, #28]	; (8001bc8 <FLASH_OB_ProgramData+0x7c>)
 8001baa:	2110      	movs	r1, #16
 8001bac:	438a      	bics	r2, r1
 8001bae:	611a      	str	r2, [r3, #16]
  }
  /* Return the Option Byte Data Program Status */
  return status;
 8001bb0:	230f      	movs	r3, #15
 8001bb2:	18fb      	adds	r3, r7, r3
 8001bb4:	781b      	ldrb	r3, [r3, #0]
}
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	b004      	add	sp, #16
 8001bbc:	bdb0      	pop	{r4, r5, r7, pc}
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	0000c350 	.word	0x0000c350
 8001bc4:	20000180 	.word	0x20000180
 8001bc8:	40022000 	.word	0x40022000

08001bcc <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval The FLASH Write Protection Option Bytes value
  */
static uint32_t FLASH_OB_GetWRP(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (uint32_t)(READ_REG(FLASH->WRPR));
 8001bd0:	4b02      	ldr	r3, [pc, #8]	; (8001bdc <FLASH_OB_GetWRP+0x10>)
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
}
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	40022000 	.word	0x40022000

08001be0 <FLASH_OB_GetRDP>:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  *            @arg @ref OB_RDP_LEVEL_2 Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
  uint32_t tmp_reg = 0U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	607b      	str	r3, [r7, #4]
  
  /* Read RDP level bits */
  tmp_reg = READ_BIT(FLASH->OBR, (FLASH_OBR_RDPRT1 | FLASH_OBR_RDPRT2));
 8001bea:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <FLASH_OB_GetRDP+0x34>)
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	2206      	movs	r2, #6
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	607b      	str	r3, [r7, #4]

  if (tmp_reg == FLASH_OBR_RDPRT1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d101      	bne.n	8001bfe <FLASH_OB_GetRDP+0x1e>
  {
    return OB_RDP_LEVEL_1;
 8001bfa:	23bb      	movs	r3, #187	; 0xbb
 8001bfc:	e005      	b.n	8001c0a <FLASH_OB_GetRDP+0x2a>
  }
  else if (tmp_reg == FLASH_OBR_RDPRT2)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b04      	cmp	r3, #4
 8001c02:	d101      	bne.n	8001c08 <FLASH_OB_GetRDP+0x28>
  {
    return OB_RDP_LEVEL_2;
 8001c04:	23cc      	movs	r3, #204	; 0xcc
 8001c06:	e000      	b.n	8001c0a <FLASH_OB_GetRDP+0x2a>
  }
  else 
  {
    return OB_RDP_LEVEL_0;
 8001c08:	23aa      	movs	r3, #170	; 0xaa
  }
}
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	b002      	add	sp, #8
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	40022000 	.word	0x40022000

08001c18 <FLASH_OB_GetUser>:
  * @retval  The FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1), RST_STDBY(Bit2), nBOOT1(Bit4),
  *         VDDA_Analog_Monitoring(Bit5) and SRAM_Parity_Enable(Bit6). 
  *         For few devices, following option bytes are available: nBOOT0(Bit3) & BOOT_SEL(Bit7).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return (uint8_t)((READ_REG(FLASH->OBR) & FLASH_OBR_USER) >> FLASH_POSITION_IWDGSW_BIT);
 8001c1c:	4b03      	ldr	r3, [pc, #12]	; (8001c2c <FLASH_OB_GetUser+0x14>)
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	0a1b      	lsrs	r3, r3, #8
 8001c22:	b2db      	uxtb	r3, r3
}
 8001c24:	0018      	movs	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	40022000 	.word	0x40022000

08001c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001c46:	e149      	b.n	8001edc <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	4091      	lsls	r1, r2
 8001c52:	000a      	movs	r2, r1
 8001c54:	4013      	ands	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d100      	bne.n	8001c60 <HAL_GPIO_Init+0x30>
 8001c5e:	e13a      	b.n	8001ed6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d003      	beq.n	8001c70 <HAL_GPIO_Init+0x40>
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b12      	cmp	r3, #18
 8001c6e:	d123      	bne.n	8001cb8 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	08da      	lsrs	r2, r3, #3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3208      	adds	r2, #8
 8001c78:	0092      	lsls	r2, r2, #2
 8001c7a:	58d3      	ldr	r3, [r2, r3]
 8001c7c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	2207      	movs	r2, #7
 8001c82:	4013      	ands	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	220f      	movs	r2, #15
 8001c88:	409a      	lsls	r2, r3
 8001c8a:	0013      	movs	r3, r2
 8001c8c:	43da      	mvns	r2, r3
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	4013      	ands	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	691a      	ldr	r2, [r3, #16]
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	2107      	movs	r1, #7
 8001c9c:	400b      	ands	r3, r1
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	409a      	lsls	r2, r3
 8001ca2:	0013      	movs	r3, r2
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	08da      	lsrs	r2, r3, #3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3208      	adds	r2, #8
 8001cb2:	0092      	lsls	r2, r2, #2
 8001cb4:	6939      	ldr	r1, [r7, #16]
 8001cb6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	0013      	movs	r3, r2
 8001cc8:	43da      	mvns	r2, r3
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	401a      	ands	r2, r3
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	409a      	lsls	r2, r3
 8001cde:	0013      	movs	r3, r2
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d00b      	beq.n	8001d0c <HAL_GPIO_Init+0xdc>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d007      	beq.n	8001d0c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d00:	2b11      	cmp	r3, #17
 8001d02:	d003      	beq.n	8001d0c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b12      	cmp	r3, #18
 8001d0a:	d130      	bne.n	8001d6e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	2203      	movs	r2, #3
 8001d18:	409a      	lsls	r2, r3
 8001d1a:	0013      	movs	r3, r2
 8001d1c:	43da      	mvns	r2, r3
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	4013      	ands	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	68da      	ldr	r2, [r3, #12]
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	409a      	lsls	r2, r3
 8001d2e:	0013      	movs	r3, r2
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001d42:	2201      	movs	r2, #1
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	409a      	lsls	r2, r3
 8001d48:	0013      	movs	r3, r2
 8001d4a:	43da      	mvns	r2, r3
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	091b      	lsrs	r3, r3, #4
 8001d58:	2201      	movs	r2, #1
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	409a      	lsls	r2, r3
 8001d60:	0013      	movs	r3, r2
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	2203      	movs	r2, #3
 8001d7a:	409a      	lsls	r2, r3
 8001d7c:	0013      	movs	r3, r2
 8001d7e:	43da      	mvns	r2, r3
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	4013      	ands	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	0013      	movs	r3, r2
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	2380      	movs	r3, #128	; 0x80
 8001da4:	055b      	lsls	r3, r3, #21
 8001da6:	4013      	ands	r3, r2
 8001da8:	d100      	bne.n	8001dac <HAL_GPIO_Init+0x17c>
 8001daa:	e094      	b.n	8001ed6 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dac:	4b51      	ldr	r3, [pc, #324]	; (8001ef4 <HAL_GPIO_Init+0x2c4>)
 8001dae:	699a      	ldr	r2, [r3, #24]
 8001db0:	4b50      	ldr	r3, [pc, #320]	; (8001ef4 <HAL_GPIO_Init+0x2c4>)
 8001db2:	2101      	movs	r1, #1
 8001db4:	430a      	orrs	r2, r1
 8001db6:	619a      	str	r2, [r3, #24]
 8001db8:	4b4e      	ldr	r3, [pc, #312]	; (8001ef4 <HAL_GPIO_Init+0x2c4>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8001dc4:	4a4c      	ldr	r2, [pc, #304]	; (8001ef8 <HAL_GPIO_Init+0x2c8>)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	089b      	lsrs	r3, r3, #2
 8001dca:	3302      	adds	r3, #2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	589b      	ldr	r3, [r3, r2]
 8001dd0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	2203      	movs	r2, #3
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	220f      	movs	r2, #15
 8001ddc:	409a      	lsls	r2, r3
 8001dde:	0013      	movs	r3, r2
 8001de0:	43da      	mvns	r2, r3
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	4013      	ands	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	2390      	movs	r3, #144	; 0x90
 8001dec:	05db      	lsls	r3, r3, #23
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d00d      	beq.n	8001e0e <HAL_GPIO_Init+0x1de>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a41      	ldr	r2, [pc, #260]	; (8001efc <HAL_GPIO_Init+0x2cc>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d007      	beq.n	8001e0a <HAL_GPIO_Init+0x1da>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a40      	ldr	r2, [pc, #256]	; (8001f00 <HAL_GPIO_Init+0x2d0>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d101      	bne.n	8001e06 <HAL_GPIO_Init+0x1d6>
 8001e02:	2302      	movs	r3, #2
 8001e04:	e004      	b.n	8001e10 <HAL_GPIO_Init+0x1e0>
 8001e06:	2305      	movs	r3, #5
 8001e08:	e002      	b.n	8001e10 <HAL_GPIO_Init+0x1e0>
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e000      	b.n	8001e10 <HAL_GPIO_Init+0x1e0>
 8001e0e:	2300      	movs	r3, #0
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	2103      	movs	r1, #3
 8001e14:	400a      	ands	r2, r1
 8001e16:	0092      	lsls	r2, r2, #2
 8001e18:	4093      	lsls	r3, r2
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e20:	4935      	ldr	r1, [pc, #212]	; (8001ef8 <HAL_GPIO_Init+0x2c8>)
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	089b      	lsrs	r3, r3, #2
 8001e26:	3302      	adds	r3, #2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e2e:	4b35      	ldr	r3, [pc, #212]	; (8001f04 <HAL_GPIO_Init+0x2d4>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	43da      	mvns	r2, r3
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	2380      	movs	r3, #128	; 0x80
 8001e44:	025b      	lsls	r3, r3, #9
 8001e46:	4013      	ands	r3, r2
 8001e48:	d003      	beq.n	8001e52 <HAL_GPIO_Init+0x222>
        {
          SET_BIT(temp, iocurrent); 
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e52:	4b2c      	ldr	r3, [pc, #176]	; (8001f04 <HAL_GPIO_Init+0x2d4>)
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001e58:	4b2a      	ldr	r3, [pc, #168]	; (8001f04 <HAL_GPIO_Init+0x2d4>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	43da      	mvns	r2, r3
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	4013      	ands	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	2380      	movs	r3, #128	; 0x80
 8001e6e:	029b      	lsls	r3, r3, #10
 8001e70:	4013      	ands	r3, r2
 8001e72:	d003      	beq.n	8001e7c <HAL_GPIO_Init+0x24c>
        { 
          SET_BIT(temp, iocurrent); 
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e7c:	4b21      	ldr	r3, [pc, #132]	; (8001f04 <HAL_GPIO_Init+0x2d4>)
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e82:	4b20      	ldr	r3, [pc, #128]	; (8001f04 <HAL_GPIO_Init+0x2d4>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	43da      	mvns	r2, r3
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	2380      	movs	r3, #128	; 0x80
 8001e98:	035b      	lsls	r3, r3, #13
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d003      	beq.n	8001ea6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(temp, iocurrent); 
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ea6:	4b17      	ldr	r3, [pc, #92]	; (8001f04 <HAL_GPIO_Init+0x2d4>)
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001eac:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <HAL_GPIO_Init+0x2d4>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	43da      	mvns	r2, r3
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	2380      	movs	r3, #128	; 0x80
 8001ec2:	039b      	lsls	r3, r3, #14
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d003      	beq.n	8001ed0 <HAL_GPIO_Init+0x2a0>
        {
          SET_BIT(temp, iocurrent); 
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <HAL_GPIO_Init+0x2d4>)
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	40da      	lsrs	r2, r3
 8001ee4:	1e13      	subs	r3, r2, #0
 8001ee6:	d000      	beq.n	8001eea <HAL_GPIO_Init+0x2ba>
 8001ee8:	e6ae      	b.n	8001c48 <HAL_GPIO_Init+0x18>
  } 
}
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	46c0      	nop			; (mov r8, r8)
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	b006      	add	sp, #24
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	40010000 	.word	0x40010000
 8001efc:	48000400 	.word	0x48000400
 8001f00:	48000800 	.word	0x48000800
 8001f04:	40010400 	.word	0x40010400

08001f08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	0008      	movs	r0, r1
 8001f12:	0011      	movs	r1, r2
 8001f14:	1cbb      	adds	r3, r7, #2
 8001f16:	1c02      	adds	r2, r0, #0
 8001f18:	801a      	strh	r2, [r3, #0]
 8001f1a:	1c7b      	adds	r3, r7, #1
 8001f1c:	1c0a      	adds	r2, r1, #0
 8001f1e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f20:	1c7b      	adds	r3, r7, #1
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d004      	beq.n	8001f32 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f28:	1cbb      	adds	r3, r7, #2
 8001f2a:	881a      	ldrh	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f30:	e003      	b.n	8001f3a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f32:	1cbb      	adds	r3, r7, #2
 8001f34:	881a      	ldrh	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	b002      	add	sp, #8
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e036      	b.n	8001fc4 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a1c      	ldr	r2, [pc, #112]	; (8001fcc <HAL_IWDG_Init+0x88>)
 8001f5c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a1b      	ldr	r2, [pc, #108]	; (8001fd0 <HAL_IWDG_Init+0x8c>)
 8001f64:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6852      	ldr	r2, [r2, #4]
 8001f6e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	6892      	ldr	r2, [r2, #8]
 8001f78:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001f7a:	f7fe f98d 	bl	8000298 <HAL_GetTick>
 8001f7e:	0003      	movs	r3, r0
 8001f80:	60fb      	str	r3, [r7, #12]

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_IWDG_Init+0x52>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001f84:	f7fe f988 	bl	8000298 <HAL_GetTick>
 8001f88:	0002      	movs	r2, r0
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b27      	cmp	r3, #39	; 0x27
 8001f90:	d901      	bls.n	8001f96 <HAL_IWDG_Init+0x52>
    {
      return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e016      	b.n	8001fc4 <HAL_IWDG_Init+0x80>
  while(hiwdg->Instance->SR != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1f1      	bne.n	8001f84 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window 
  register */
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	691a      	ldr	r2, [r3, #16]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d005      	beq.n	8001fba <HAL_IWDG_Init+0x76>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing 
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	68d2      	ldr	r2, [r2, #12]
 8001fb6:	611a      	str	r2, [r3, #16]
 8001fb8:	e003      	b.n	8001fc2 <HAL_IWDG_Init+0x7e>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a05      	ldr	r2, [pc, #20]	; (8001fd4 <HAL_IWDG_Init+0x90>)
 8001fc0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	b004      	add	sp, #16
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	0000cccc 	.word	0x0000cccc
 8001fd0:	00005555 	.word	0x00005555
 8001fd4:	0000aaaa 	.word	0x0000aaaa

08001fd8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a03      	ldr	r2, [pc, #12]	; (8001ff4 <HAL_IWDG_Refresh+0x1c>)
 8001fe6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	0018      	movs	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	b002      	add	sp, #8
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	46c0      	nop			; (mov r8, r8)
 8001ff4:	0000aaaa 	.word	0x0000aaaa

08001ff8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8001ff8:	b590      	push	{r4, r7, lr}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8002000:	2300      	movs	r3, #0
 8002002:	60fb      	str	r3, [r7, #12]

  uint32_t wInterrupt_Mask = 0U;
 8002004:	2300      	movs	r3, #0
 8002006:	60bb      	str	r3, [r7, #8]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_PCD_Init+0x1a>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e0de      	b.n	80021d0 <HAL_PCD_Init+0x1d8>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	23ea      	movs	r3, #234	; 0xea
 8002016:	33ff      	adds	r3, #255	; 0xff
 8002018:	5cd3      	ldrb	r3, [r2, r3]
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b00      	cmp	r3, #0
 800201e:	d108      	bne.n	8002032 <HAL_PCD_Init+0x3a>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	23f4      	movs	r3, #244	; 0xf4
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	2100      	movs	r1, #0
 8002028:	54d1      	strb	r1, [r2, r3]
  
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	0018      	movs	r0, r3
 800202e:	f004 fe85 	bl	8006d3c <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	23ea      	movs	r3, #234	; 0xea
 8002036:	33ff      	adds	r3, #255	; 0xff
 8002038:	2103      	movs	r1, #3
 800203a:	54d1      	strb	r1, [r2, r3]
 
 /* Init endpoints structures */
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 800203c:	2300      	movs	r3, #0
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	e043      	b.n	80020ca <HAL_PCD_Init+0xd2>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	2029      	movs	r0, #41	; 0x29
 8002048:	0013      	movs	r3, r2
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	1a9b      	subs	r3, r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	18cb      	adds	r3, r1, r3
 8002052:	181b      	adds	r3, r3, r0
 8002054:	2201      	movs	r2, #1
 8002056:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].num = i;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	b2dc      	uxtb	r4, r3
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	2028      	movs	r0, #40	; 0x28
 8002062:	0013      	movs	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	1a9b      	subs	r3, r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	18cb      	adds	r3, r1, r3
 800206c:	181b      	adds	r3, r3, r0
 800206e:	1c22      	adds	r2, r4, #0
 8002070:	701a      	strb	r2, [r3, #0]
   /* Control until ep is actvated */
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	202b      	movs	r0, #43	; 0x2b
 8002078:	0013      	movs	r3, r2
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	1a9b      	subs	r3, r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	18cb      	adds	r3, r1, r3
 8002082:	181b      	adds	r3, r3, r0
 8002084:	2200      	movs	r2, #0
 8002086:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket =  0U;
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	0013      	movs	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	1a9b      	subs	r3, r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	18cb      	adds	r3, r1, r3
 8002096:	3334      	adds	r3, #52	; 0x34
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_buff = 0U;
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	0013      	movs	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	1a9b      	subs	r3, r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	18cb      	adds	r3, r1, r3
 80020aa:	3338      	adds	r3, #56	; 0x38
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_len = 0U;
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	0013      	movs	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	1a9b      	subs	r3, r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	18cb      	adds	r3, r1, r3
 80020be:	333c      	adds	r3, #60	; 0x3c
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	3301      	adds	r3, #1
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d3b6      	bcc.n	8002042 <HAL_PCD_Init+0x4a>
 }
 
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	e04e      	b.n	8002178 <HAL_PCD_Init+0x180>
 {
   hpcd->OUT_ep[i].is_in = 0U;
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	230a      	movs	r3, #10
 80020e0:	33ff      	adds	r3, #255	; 0xff
 80020e2:	0019      	movs	r1, r3
 80020e4:	0013      	movs	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	1a9b      	subs	r3, r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	18c3      	adds	r3, r0, r3
 80020ee:	185b      	adds	r3, r3, r1
 80020f0:	2200      	movs	r2, #0
 80020f2:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].num = i;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	b2dc      	uxtb	r4, r3
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	2384      	movs	r3, #132	; 0x84
 80020fe:	0059      	lsls	r1, r3, #1
 8002100:	0013      	movs	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	1a9b      	subs	r3, r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	18c3      	adds	r3, r0, r3
 800210a:	185b      	adds	r3, r3, r1
 800210c:	1c22      	adds	r2, r4, #0
 800210e:	701a      	strb	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	230c      	movs	r3, #12
 8002116:	33ff      	adds	r3, #255	; 0xff
 8002118:	0019      	movs	r1, r3
 800211a:	0013      	movs	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	1a9b      	subs	r3, r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	18c3      	adds	r3, r0, r3
 8002124:	185b      	adds	r3, r3, r1
 8002126:	2200      	movs	r2, #0
 8002128:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].maxpacket = 0U;
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	238a      	movs	r3, #138	; 0x8a
 8002130:	0059      	lsls	r1, r3, #1
 8002132:	0013      	movs	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	1a9b      	subs	r3, r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	18c3      	adds	r3, r0, r3
 800213c:	185b      	adds	r3, r3, r1
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_buff = 0U;
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	238c      	movs	r3, #140	; 0x8c
 8002148:	0059      	lsls	r1, r3, #1
 800214a:	0013      	movs	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	1a9b      	subs	r3, r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	18c3      	adds	r3, r0, r3
 8002154:	185b      	adds	r3, r3, r1
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_len = 0U;
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	238e      	movs	r3, #142	; 0x8e
 8002160:	0059      	lsls	r1, r3, #1
 8002162:	0013      	movs	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	1a9b      	subs	r3, r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	18c3      	adds	r3, r0, r3
 800216c:	185b      	adds	r3, r3, r1
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	3301      	adds	r3, #1
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	429a      	cmp	r2, r3
 8002180:	d3ab      	bcc.n	80020da <HAL_PCD_Init+0xe2>
 }
  
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2240      	movs	r2, #64	; 0x40
 8002188:	2101      	movs	r1, #1
 800218a:	5299      	strh	r1, [r3, r2]
 
 /*CNTR_FRES = 0*/
 hpcd->Instance->CNTR = 0;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2240      	movs	r2, #64	; 0x40
 8002192:	2100      	movs	r1, #0
 8002194:	5299      	strh	r1, [r3, r2]
 
 /*Clear pending interrupts*/
 hpcd->Instance->ISTR = 0;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2244      	movs	r2, #68	; 0x44
 800219c:	2100      	movs	r1, #0
 800219e:	5299      	strh	r1, [r3, r2]
 
  /*Set Btable Adress*/
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2250      	movs	r2, #80	; 0x50
 80021a6:	2100      	movs	r1, #0
 80021a8:	5299      	strh	r1, [r3, r2]
  
  /*set wInterrupt_Mask global variable*/
 wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 80021aa:	23bf      	movs	r3, #191	; 0xbf
 80021ac:	021b      	lsls	r3, r3, #8
 80021ae:	60bb      	str	r3, [r7, #8]
   | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68ba      	ldr	r2, [r7, #8]
 80021b6:	b291      	uxth	r1, r2
 80021b8:	2240      	movs	r2, #64	; 0x40
 80021ba:	5299      	strh	r1, [r3, r2]
  
  hpcd->USB_Address = 0U;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2224      	movs	r2, #36	; 0x24
 80021c0:	2100      	movs	r1, #0
 80021c2:	5499      	strb	r1, [r3, r2]
  hpcd->State= HAL_PCD_STATE_READY;
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	23ea      	movs	r3, #234	; 0xea
 80021c8:	33ff      	adds	r3, #255	; 0xff
 80021ca:	2101      	movs	r1, #1
 80021cc:	54d1      	strb	r1, [r2, r3]

 return HAL_OK;
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	0018      	movs	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	b005      	add	sp, #20
 80021d6:	bd90      	pop	{r4, r7, pc}

080021d8 <HAL_PCD_Start>:
  * @brief  Start the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-Down bit to Connect internal pull-up on USB DP line */
  hpcd->Instance->BCDR |= USB_BCDR_DPPU;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2258      	movs	r2, #88	; 0x58
 80021e6:	5a9b      	ldrh	r3, [r3, r2]
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4905      	ldr	r1, [pc, #20]	; (8002204 <HAL_PCD_Start+0x2c>)
 80021f0:	430a      	orrs	r2, r1
 80021f2:	b291      	uxth	r1, r2
 80021f4:	2258      	movs	r2, #88	; 0x58
 80021f6:	5299      	strh	r1, [r3, r2]
  
  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	0018      	movs	r0, r3
 80021fc:	46bd      	mov	sp, r7
 80021fe:	b002      	add	sp, #8
 8002200:	bd80      	pop	{r7, pc}
 8002202:	46c0      	nop			; (mov r8, r8)
 8002204:	ffff8000 	.word	0xffff8000

08002208 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t wInterrupt_Mask = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	60fb      	str	r3, [r7, #12]
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2244      	movs	r2, #68	; 0x44
 800221a:	5a9b      	ldrh	r3, [r3, r2]
 800221c:	b29b      	uxth	r3, r3
 800221e:	001a      	movs	r2, r3
 8002220:	2380      	movs	r3, #128	; 0x80
 8002222:	021b      	lsls	r3, r3, #8
 8002224:	401a      	ands	r2, r3
 8002226:	2380      	movs	r3, #128	; 0x80
 8002228:	021b      	lsls	r3, r3, #8
 800222a:	429a      	cmp	r2, r3
 800222c:	d103      	bne.n	8002236 <HAL_PCD_IRQHandler+0x2e>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	0018      	movs	r0, r3
 8002232:	f001 fc03 	bl	8003a3c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2244      	movs	r2, #68	; 0x44
 800223c:	5a9b      	ldrh	r3, [r3, r2]
 800223e:	b29b      	uxth	r3, r3
 8002240:	001a      	movs	r2, r3
 8002242:	2380      	movs	r3, #128	; 0x80
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	401a      	ands	r2, r3
 8002248:	2380      	movs	r3, #128	; 0x80
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	429a      	cmp	r2, r3
 800224e:	d114      	bne.n	800227a <HAL_PCD_IRQHandler+0x72>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2244      	movs	r2, #68	; 0x44
 8002256:	5a9b      	ldrh	r3, [r3, r2]
 8002258:	b29a      	uxth	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4977      	ldr	r1, [pc, #476]	; (800243c <HAL_PCD_IRQHandler+0x234>)
 8002260:	400a      	ands	r2, r1
 8002262:	b291      	uxth	r1, r2
 8002264:	2244      	movs	r2, #68	; 0x44
 8002266:	5299      	strh	r1, [r3, r2]
    HAL_PCD_ResetCallback(hpcd);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	0018      	movs	r0, r3
 800226c:	f004 fdb1 	bl	8006dd2 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2100      	movs	r1, #0
 8002274:	0018      	movs	r0, r3
 8002276:	f000 f8ef 	bl	8002458 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2244      	movs	r2, #68	; 0x44
 8002280:	5a9b      	ldrh	r3, [r3, r2]
 8002282:	b29b      	uxth	r3, r3
 8002284:	001a      	movs	r2, r3
 8002286:	2380      	movs	r3, #128	; 0x80
 8002288:	01db      	lsls	r3, r3, #7
 800228a:	401a      	ands	r2, r3
 800228c:	2380      	movs	r3, #128	; 0x80
 800228e:	01db      	lsls	r3, r3, #7
 8002290:	429a      	cmp	r2, r3
 8002292:	d10b      	bne.n	80022ac <HAL_PCD_IRQHandler+0xa4>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2244      	movs	r2, #68	; 0x44
 800229a:	5a9b      	ldrh	r3, [r3, r2]
 800229c:	b29a      	uxth	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4967      	ldr	r1, [pc, #412]	; (8002440 <HAL_PCD_IRQHandler+0x238>)
 80022a4:	400a      	ands	r2, r1
 80022a6:	b291      	uxth	r1, r2
 80022a8:	2244      	movs	r2, #68	; 0x44
 80022aa:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2244      	movs	r2, #68	; 0x44
 80022b2:	5a9b      	ldrh	r3, [r3, r2]
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	001a      	movs	r2, r3
 80022b8:	2380      	movs	r3, #128	; 0x80
 80022ba:	019b      	lsls	r3, r3, #6
 80022bc:	401a      	ands	r2, r3
 80022be:	2380      	movs	r3, #128	; 0x80
 80022c0:	019b      	lsls	r3, r3, #6
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d10b      	bne.n	80022de <HAL_PCD_IRQHandler+0xd6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2244      	movs	r2, #68	; 0x44
 80022cc:	5a9b      	ldrh	r3, [r3, r2]
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	495b      	ldr	r1, [pc, #364]	; (8002444 <HAL_PCD_IRQHandler+0x23c>)
 80022d6:	400a      	ands	r2, r1
 80022d8:	b291      	uxth	r1, r2
 80022da:	2244      	movs	r2, #68	; 0x44
 80022dc:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2244      	movs	r2, #68	; 0x44
 80022e4:	5a9b      	ldrh	r3, [r3, r2]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	001a      	movs	r2, r3
 80022ea:	2380      	movs	r3, #128	; 0x80
 80022ec:	015b      	lsls	r3, r3, #5
 80022ee:	401a      	ands	r2, r3
 80022f0:	2380      	movs	r3, #128	; 0x80
 80022f2:	015b      	lsls	r3, r3, #5
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d124      	bne.n	8002342 <HAL_PCD_IRQHandler+0x13a>
  {
    
    hpcd->Instance->CNTR &= (uint16_t)(~(USB_CNTR_LPMODE));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2240      	movs	r2, #64	; 0x40
 80022fe:	5a9b      	ldrh	r3, [r3, r2]
 8002300:	b29a      	uxth	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2104      	movs	r1, #4
 8002308:	438a      	bics	r2, r1
 800230a:	b291      	uxth	r1, r2
 800230c:	2240      	movs	r2, #64	; 0x40
 800230e:	5299      	strh	r1, [r3, r2]

    /*set wInterrupt_Mask global variable*/
    wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8002310:	23bd      	movs	r3, #189	; 0xbd
 8002312:	021b      	lsls	r3, r3, #8
 8002314:	60fb      	str	r3, [r7, #12]
      | USB_CNTR_ESOFM | USB_CNTR_RESETM;
    
    /*Set interrupt mask*/
    hpcd->Instance->CNTR = wInterrupt_Mask;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	b291      	uxth	r1, r2
 800231e:	2240      	movs	r2, #64	; 0x40
 8002320:	5299      	strh	r1, [r3, r2]
    
    HAL_PCD_ResumeCallback(hpcd);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	0018      	movs	r0, r3
 8002326:	f004 fd73 	bl	8006e10 <HAL_PCD_ResumeCallback>
    
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2244      	movs	r2, #68	; 0x44
 8002330:	5a9b      	ldrh	r3, [r3, r2]
 8002332:	b29a      	uxth	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4943      	ldr	r1, [pc, #268]	; (8002448 <HAL_PCD_IRQHandler+0x240>)
 800233a:	400a      	ands	r2, r1
 800233c:	b291      	uxth	r1, r2
 800233e:	2244      	movs	r2, #68	; 0x44
 8002340:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2244      	movs	r2, #68	; 0x44
 8002348:	5a9b      	ldrh	r3, [r3, r2]
 800234a:	b29b      	uxth	r3, r3
 800234c:	001a      	movs	r2, r3
 800234e:	2380      	movs	r3, #128	; 0x80
 8002350:	011b      	lsls	r3, r3, #4
 8002352:	401a      	ands	r2, r3
 8002354:	2380      	movs	r3, #128	; 0x80
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	429a      	cmp	r2, r3
 800235a:	d134      	bne.n	80023c6 <HAL_PCD_IRQHandler+0x1be>
  {    
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2244      	movs	r2, #68	; 0x44
 8002362:	5a9b      	ldrh	r3, [r3, r2]
 8002364:	b29a      	uxth	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4938      	ldr	r1, [pc, #224]	; (800244c <HAL_PCD_IRQHandler+0x244>)
 800236c:	400a      	ands	r2, r1
 800236e:	b291      	uxth	r1, r2
 8002370:	2244      	movs	r2, #68	; 0x44
 8002372:	5299      	strh	r1, [r3, r2]
    
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2240      	movs	r2, #64	; 0x40
 800237a:	5a9b      	ldrh	r3, [r3, r2]
 800237c:	b29a      	uxth	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2108      	movs	r1, #8
 8002384:	430a      	orrs	r2, r1
 8002386:	b291      	uxth	r1, r2
 8002388:	2240      	movs	r2, #64	; 0x40
 800238a:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2240      	movs	r2, #64	; 0x40
 8002392:	5a9b      	ldrh	r3, [r3, r2]
 8002394:	b29a      	uxth	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2104      	movs	r1, #4
 800239c:	430a      	orrs	r2, r1
 800239e:	b291      	uxth	r1, r2
 80023a0:	2240      	movs	r2, #64	; 0x40
 80023a2:	5299      	strh	r1, [r3, r2]

    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2244      	movs	r2, #68	; 0x44
 80023aa:	5a9b      	ldrh	r3, [r3, r2]
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	001a      	movs	r2, r3
 80023b0:	2380      	movs	r3, #128	; 0x80
 80023b2:	015b      	lsls	r3, r3, #5
 80023b4:	401a      	ands	r2, r3
 80023b6:	2380      	movs	r3, #128	; 0x80
 80023b8:	015b      	lsls	r3, r3, #5
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d003      	beq.n	80023c6 <HAL_PCD_IRQHandler+0x1be>
    {
      HAL_PCD_SuspendCallback(hpcd);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	0018      	movs	r0, r3
 80023c2:	f004 fd13 	bl	8006dec <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2244      	movs	r2, #68	; 0x44
 80023cc:	5a9b      	ldrh	r3, [r3, r2]
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	001a      	movs	r2, r3
 80023d2:	2380      	movs	r3, #128	; 0x80
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	401a      	ands	r2, r3
 80023d8:	2380      	movs	r3, #128	; 0x80
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	429a      	cmp	r2, r3
 80023de:	d10f      	bne.n	8002400 <HAL_PCD_IRQHandler+0x1f8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2244      	movs	r2, #68	; 0x44
 80023e6:	5a9b      	ldrh	r3, [r3, r2]
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4918      	ldr	r1, [pc, #96]	; (8002450 <HAL_PCD_IRQHandler+0x248>)
 80023f0:	400a      	ands	r2, r1
 80023f2:	b291      	uxth	r1, r2
 80023f4:	2244      	movs	r2, #68	; 0x44
 80023f6:	5299      	strh	r1, [r3, r2]
    HAL_PCD_SOFCallback(hpcd);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	0018      	movs	r0, r3
 80023fc:	f004 fce2 	bl	8006dc4 <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2244      	movs	r2, #68	; 0x44
 8002406:	5a9b      	ldrh	r3, [r3, r2]
 8002408:	b29b      	uxth	r3, r3
 800240a:	001a      	movs	r2, r3
 800240c:	2380      	movs	r3, #128	; 0x80
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	401a      	ands	r2, r3
 8002412:	2380      	movs	r3, #128	; 0x80
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	429a      	cmp	r2, r3
 8002418:	d10b      	bne.n	8002432 <HAL_PCD_IRQHandler+0x22a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2244      	movs	r2, #68	; 0x44
 8002420:	5a9b      	ldrh	r3, [r3, r2]
 8002422:	b29a      	uxth	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	490a      	ldr	r1, [pc, #40]	; (8002454 <HAL_PCD_IRQHandler+0x24c>)
 800242a:	400a      	ands	r2, r1
 800242c:	b291      	uxth	r1, r2
 800242e:	2244      	movs	r2, #68	; 0x44
 8002430:	5299      	strh	r1, [r3, r2]
  }
}
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	46bd      	mov	sp, r7
 8002436:	b004      	add	sp, #16
 8002438:	bd80      	pop	{r7, pc}
 800243a:	46c0      	nop			; (mov r8, r8)
 800243c:	fffffbff 	.word	0xfffffbff
 8002440:	ffffbfff 	.word	0xffffbfff
 8002444:	ffffdfff 	.word	0xffffdfff
 8002448:	ffffefff 	.word	0xffffefff
 800244c:	fffff7ff 	.word	0xfffff7ff
 8002450:	fffffdff 	.word	0xfffffdff
 8002454:	fffffeff 	.word	0xfffffeff

08002458 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	000a      	movs	r2, r1
 8002462:	1cfb      	adds	r3, r7, #3
 8002464:	701a      	strb	r2, [r3, #0]
   __HAL_LOCK(hpcd); 
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	23f4      	movs	r3, #244	; 0xf4
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	5cd3      	ldrb	r3, [r2, r3]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d101      	bne.n	8002476 <HAL_PCD_SetAddress+0x1e>
 8002472:	2302      	movs	r3, #2
 8002474:	e019      	b.n	80024aa <HAL_PCD_SetAddress+0x52>
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	23f4      	movs	r3, #244	; 0xf4
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	2101      	movs	r1, #1
 800247e:	54d1      	strb	r1, [r2, r3]

   if(address == 0U) 
 8002480:	1cfb      	adds	r3, r7, #3
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d105      	bne.n	8002494 <HAL_PCD_SetAddress+0x3c>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	224c      	movs	r2, #76	; 0x4c
 800248e:	2180      	movs	r1, #128	; 0x80
 8002490:	5299      	strh	r1, [r3, r2]
 8002492:	e004      	b.n	800249e <HAL_PCD_SetAddress+0x46>
   }
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	1cfa      	adds	r2, r7, #3
 8002498:	2124      	movs	r1, #36	; 0x24
 800249a:	7812      	ldrb	r2, [r2, #0]
 800249c:	545a      	strb	r2, [r3, r1]
   }

  __HAL_UNLOCK(hpcd);   
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	23f4      	movs	r3, #244	; 0xf4
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	2100      	movs	r1, #0
 80024a6:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	0018      	movs	r0, r3
 80024ac:	46bd      	mov	sp, r7
 80024ae:	b002      	add	sp, #8
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packert size
  * @param  ep_type endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80024b4:	b590      	push	{r4, r7, lr}
 80024b6:	b087      	sub	sp, #28
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	000c      	movs	r4, r1
 80024be:	0010      	movs	r0, r2
 80024c0:	0019      	movs	r1, r3
 80024c2:	1cfb      	adds	r3, r7, #3
 80024c4:	1c22      	adds	r2, r4, #0
 80024c6:	701a      	strb	r2, [r3, #0]
 80024c8:	003b      	movs	r3, r7
 80024ca:	1c02      	adds	r2, r0, #0
 80024cc:	801a      	strh	r2, [r3, #0]
 80024ce:	1cbb      	adds	r3, r7, #2
 80024d0:	1c0a      	adds	r2, r1, #0
 80024d2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 80024d4:	2311      	movs	r3, #17
 80024d6:	18fb      	adds	r3, r7, r3
 80024d8:	2200      	movs	r2, #0
 80024da:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 80024dc:	1cfb      	adds	r3, r7, #3
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	b25b      	sxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	da0c      	bge.n	8002500 <HAL_PCD_EP_Open+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80024e6:	1cfb      	adds	r3, r7, #3
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	227f      	movs	r2, #127	; 0x7f
 80024ec:	401a      	ands	r2, r3
 80024ee:	0013      	movs	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	1a9b      	subs	r3, r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	3328      	adds	r3, #40	; 0x28
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	18d3      	adds	r3, r2, r3
 80024fc:	617b      	str	r3, [r7, #20]
 80024fe:	e00c      	b.n	800251a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8002500:	1cfb      	adds	r3, r7, #3
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	227f      	movs	r2, #127	; 0x7f
 8002506:	401a      	ands	r2, r3
 8002508:	0013      	movs	r3, r2
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	1a9b      	subs	r3, r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	3309      	adds	r3, #9
 8002512:	33ff      	adds	r3, #255	; 0xff
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	18d3      	adds	r3, r2, r3
 8002518:	617b      	str	r3, [r7, #20]
  }
  ep->num   = ep_addr & 0x7FU;
 800251a:	1cfb      	adds	r3, r7, #3
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	227f      	movs	r2, #127	; 0x7f
 8002520:	4013      	ands	r3, r2
 8002522:	b2da      	uxtb	r2, r3
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8002528:	1cfb      	adds	r3, r7, #3
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	b25b      	sxtb	r3, r3
 800252e:	b2db      	uxtb	r3, r3
 8002530:	09db      	lsrs	r3, r3, #7
 8002532:	b2db      	uxtb	r3, r3
 8002534:	001a      	movs	r2, r3
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 800253a:	003b      	movs	r3, r7
 800253c:	881a      	ldrh	r2, [r3, #0]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	1cba      	adds	r2, r7, #2
 8002546:	7812      	ldrb	r2, [r2, #0]
 8002548:	70da      	strb	r2, [r3, #3]
  
  __HAL_LOCK(hpcd); 
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	23f4      	movs	r3, #244	; 0xf4
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	5cd3      	ldrb	r3, [r2, r3]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d101      	bne.n	800255a <HAL_PCD_EP_Open+0xa6>
 8002556:	2302      	movs	r3, #2
 8002558:	e311      	b.n	8002b7e <HAL_PCD_EP_Open+0x6ca>
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	23f4      	movs	r3, #244	; 0xf4
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	2101      	movs	r1, #1
 8002562:	54d1      	strb	r1, [r2, r3]

  /* initialize Endpoint */
  switch (ep->type)
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	78db      	ldrb	r3, [r3, #3]
 8002568:	2b03      	cmp	r3, #3
 800256a:	d034      	beq.n	80025d6 <HAL_PCD_EP_Open+0x122>
 800256c:	dc63      	bgt.n	8002636 <HAL_PCD_EP_Open+0x182>
 800256e:	2b02      	cmp	r3, #2
 8002570:	d01d      	beq.n	80025ae <HAL_PCD_EP_Open+0xfa>
 8002572:	dc60      	bgt.n	8002636 <HAL_PCD_EP_Open+0x182>
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <HAL_PCD_EP_Open+0xca>
 8002578:	2b01      	cmp	r3, #1
 800257a:	d044      	beq.n	8002606 <HAL_PCD_EP_Open+0x152>
    break;
  case PCD_EP_TYPE_ISOC:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
    break;
  default:
    break;
 800257c:	e05b      	b.n	8002636 <HAL_PCD_EP_Open+0x182>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	001a      	movs	r2, r3
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	18d3      	adds	r3, r2, r3
 800258c:	881b      	ldrh	r3, [r3, #0]
 800258e:	4aba      	ldr	r2, [pc, #744]	; (8002878 <HAL_PCD_EP_Open+0x3c4>)
 8002590:	4013      	ands	r3, r2
 8002592:	b29a      	uxth	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	0019      	movs	r1, r3
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	18cb      	adds	r3, r1, r3
 80025a2:	2180      	movs	r1, #128	; 0x80
 80025a4:	0089      	lsls	r1, r1, #2
 80025a6:	430a      	orrs	r2, r1
 80025a8:	b292      	uxth	r2, r2
 80025aa:	801a      	strh	r2, [r3, #0]
    break;
 80025ac:	e044      	b.n	8002638 <HAL_PCD_EP_Open+0x184>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	001a      	movs	r2, r3
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	18d3      	adds	r3, r2, r3
 80025bc:	881a      	ldrh	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	0019      	movs	r1, r3
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	18cb      	adds	r3, r1, r3
 80025cc:	49aa      	ldr	r1, [pc, #680]	; (8002878 <HAL_PCD_EP_Open+0x3c4>)
 80025ce:	400a      	ands	r2, r1
 80025d0:	b292      	uxth	r2, r2
 80025d2:	801a      	strh	r2, [r3, #0]
    break;
 80025d4:	e030      	b.n	8002638 <HAL_PCD_EP_Open+0x184>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	001a      	movs	r2, r3
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	18d3      	adds	r3, r2, r3
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	4aa4      	ldr	r2, [pc, #656]	; (8002878 <HAL_PCD_EP_Open+0x3c4>)
 80025e8:	4013      	ands	r3, r2
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	0019      	movs	r1, r3
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	18cb      	adds	r3, r1, r3
 80025fa:	21c0      	movs	r1, #192	; 0xc0
 80025fc:	00c9      	lsls	r1, r1, #3
 80025fe:	430a      	orrs	r2, r1
 8002600:	b292      	uxth	r2, r2
 8002602:	801a      	strh	r2, [r3, #0]
    break;
 8002604:	e018      	b.n	8002638 <HAL_PCD_EP_Open+0x184>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	001a      	movs	r2, r3
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	18d3      	adds	r3, r2, r3
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	4a98      	ldr	r2, [pc, #608]	; (8002878 <HAL_PCD_EP_Open+0x3c4>)
 8002618:	4013      	ands	r3, r2
 800261a:	b29a      	uxth	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	0019      	movs	r1, r3
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	18cb      	adds	r3, r1, r3
 800262a:	2180      	movs	r1, #128	; 0x80
 800262c:	00c9      	lsls	r1, r1, #3
 800262e:	430a      	orrs	r2, r1
 8002630:	b292      	uxth	r2, r2
 8002632:	801a      	strh	r2, [r3, #0]
    break;
 8002634:	e000      	b.n	8002638 <HAL_PCD_EP_Open+0x184>
    break;
 8002636:	46c0      	nop			; (mov r8, r8)
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	001a      	movs	r2, r3
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	18d3      	adds	r3, r2, r3
 8002646:	881b      	ldrh	r3, [r3, #0]
 8002648:	4a8c      	ldr	r2, [pc, #560]	; (800287c <HAL_PCD_EP_Open+0x3c8>)
 800264a:	4013      	ands	r3, r2
 800264c:	b29a      	uxth	r2, r3
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	b29b      	uxth	r3, r3
 8002654:	4313      	orrs	r3, r2
 8002656:	b29a      	uxth	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	0019      	movs	r1, r3
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	18cb      	adds	r3, r1, r3
 8002666:	4986      	ldr	r1, [pc, #536]	; (8002880 <HAL_PCD_EP_Open+0x3cc>)
 8002668:	430a      	orrs	r2, r1
 800266a:	b292      	uxth	r2, r2
 800266c:	801a      	strh	r2, [r3, #0]
  
  if (ep->doublebuffer == 0U) 
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	7a9b      	ldrb	r3, [r3, #10]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d000      	beq.n	8002678 <HAL_PCD_EP_Open+0x1c4>
 8002676:	e113      	b.n	80028a0 <HAL_PCD_EP_Open+0x3ec>
  {
    if (ep->is_in)
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	785b      	ldrb	r3, [r3, #1]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d056      	beq.n	800272e <HAL_PCD_EP_Open+0x27a>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	889b      	ldrh	r3, [r3, #4]
 8002684:	085b      	lsrs	r3, r3, #1
 8002686:	b299      	uxth	r1, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2250      	movs	r2, #80	; 0x50
 800268e:	5a9b      	ldrh	r3, [r3, r2]
 8002690:	b29b      	uxth	r3, r3
 8002692:	001a      	movs	r2, r3
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	18d3      	adds	r3, r2, r3
 800269c:	001a      	movs	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	18d3      	adds	r3, r2, r3
 80026a4:	2280      	movs	r2, #128	; 0x80
 80026a6:	00d2      	lsls	r2, r2, #3
 80026a8:	4694      	mov	ip, r2
 80026aa:	4463      	add	r3, ip
 80026ac:	001a      	movs	r2, r3
 80026ae:	1c0b      	adds	r3, r1, #0
 80026b0:	18db      	adds	r3, r3, r3
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	001a      	movs	r2, r3
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	18d3      	adds	r3, r2, r3
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	001a      	movs	r2, r3
 80026c8:	2340      	movs	r3, #64	; 0x40
 80026ca:	4013      	ands	r3, r2
 80026cc:	d015      	beq.n	80026fa <HAL_PCD_EP_Open+0x246>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	001a      	movs	r2, r3
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	18d3      	adds	r3, r2, r3
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	4a67      	ldr	r2, [pc, #412]	; (800287c <HAL_PCD_EP_Open+0x3c8>)
 80026e0:	4013      	ands	r3, r2
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	0019      	movs	r1, r3
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	18cb      	adds	r3, r1, r3
 80026f2:	4964      	ldr	r1, [pc, #400]	; (8002884 <HAL_PCD_EP_Open+0x3d0>)
 80026f4:	430a      	orrs	r2, r1
 80026f6:	b292      	uxth	r2, r2
 80026f8:	801a      	strh	r2, [r3, #0]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK) 
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	001a      	movs	r2, r3
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	18d3      	adds	r3, r2, r3
 8002708:	881b      	ldrh	r3, [r3, #0]
 800270a:	4a5f      	ldr	r2, [pc, #380]	; (8002888 <HAL_PCD_EP_Open+0x3d4>)
 800270c:	4013      	ands	r3, r2
 800270e:	b29c      	uxth	r4, r3
 8002710:	2320      	movs	r3, #32
 8002712:	4063      	eors	r3, r4
 8002714:	b29c      	uxth	r4, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	001a      	movs	r2, r3
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	18d3      	adds	r3, r2, r3
 8002724:	4a56      	ldr	r2, [pc, #344]	; (8002880 <HAL_PCD_EP_Open+0x3cc>)
 8002726:	4322      	orrs	r2, r4
 8002728:	b292      	uxth	r2, r2
 800272a:	801a      	strh	r2, [r3, #0]
 800272c:	e21f      	b.n	8002b6e <HAL_PCD_EP_Open+0x6ba>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	889b      	ldrh	r3, [r3, #4]
 8002732:	085b      	lsrs	r3, r3, #1
 8002734:	b299      	uxth	r1, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2250      	movs	r2, #80	; 0x50
 800273c:	5a9b      	ldrh	r3, [r3, r2]
 800273e:	b29b      	uxth	r3, r3
 8002740:	001a      	movs	r2, r3
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	18d3      	adds	r3, r2, r3
 800274a:	001a      	movs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	18d3      	adds	r3, r2, r3
 8002752:	4a4e      	ldr	r2, [pc, #312]	; (800288c <HAL_PCD_EP_Open+0x3d8>)
 8002754:	4694      	mov	ip, r2
 8002756:	4463      	add	r3, ip
 8002758:	001a      	movs	r2, r3
 800275a:	1c0b      	adds	r3, r1, #0
 800275c:	18db      	adds	r3, r3, r3
 800275e:	b29b      	uxth	r3, r3
 8002760:	8013      	strh	r3, [r2, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2250      	movs	r2, #80	; 0x50
 8002768:	5a9b      	ldrh	r3, [r3, r2]
 800276a:	b29b      	uxth	r3, r3
 800276c:	001a      	movs	r2, r3
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	18d3      	adds	r3, r2, r3
 8002776:	001a      	movs	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	18d3      	adds	r3, r2, r3
 800277e:	4a44      	ldr	r2, [pc, #272]	; (8002890 <HAL_PCD_EP_Open+0x3dc>)
 8002780:	4694      	mov	ip, r2
 8002782:	4463      	add	r3, ip
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	2b3e      	cmp	r3, #62	; 0x3e
 800278c:	d91a      	bls.n	80027c4 <HAL_PCD_EP_Open+0x310>
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	095a      	lsrs	r2, r3, #5
 8002794:	2112      	movs	r1, #18
 8002796:	187b      	adds	r3, r7, r1
 8002798:	801a      	strh	r2, [r3, #0]
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	221f      	movs	r2, #31
 80027a0:	4013      	ands	r3, r2
 80027a2:	d104      	bne.n	80027ae <HAL_PCD_EP_Open+0x2fa>
 80027a4:	187b      	adds	r3, r7, r1
 80027a6:	881a      	ldrh	r2, [r3, #0]
 80027a8:	187b      	adds	r3, r7, r1
 80027aa:	3a01      	subs	r2, #1
 80027ac:	801a      	strh	r2, [r3, #0]
 80027ae:	2312      	movs	r3, #18
 80027b0:	18fb      	adds	r3, r7, r3
 80027b2:	881b      	ldrh	r3, [r3, #0]
 80027b4:	029b      	lsls	r3, r3, #10
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	4a36      	ldr	r2, [pc, #216]	; (8002894 <HAL_PCD_EP_Open+0x3e0>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	b29a      	uxth	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	801a      	strh	r2, [r3, #0]
 80027c2:	e016      	b.n	80027f2 <HAL_PCD_EP_Open+0x33e>
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	085a      	lsrs	r2, r3, #1
 80027ca:	2112      	movs	r1, #18
 80027cc:	187b      	adds	r3, r7, r1
 80027ce:	801a      	strh	r2, [r3, #0]
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	2201      	movs	r2, #1
 80027d6:	4013      	ands	r3, r2
 80027d8:	d004      	beq.n	80027e4 <HAL_PCD_EP_Open+0x330>
 80027da:	187b      	adds	r3, r7, r1
 80027dc:	881a      	ldrh	r2, [r3, #0]
 80027de:	187b      	adds	r3, r7, r1
 80027e0:	3201      	adds	r2, #1
 80027e2:	801a      	strh	r2, [r3, #0]
 80027e4:	2312      	movs	r3, #18
 80027e6:	18fb      	adds	r3, r7, r3
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	029b      	lsls	r3, r3, #10
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	001a      	movs	r2, r3
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	18d3      	adds	r3, r2, r3
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	001a      	movs	r2, r3
 8002804:	2380      	movs	r3, #128	; 0x80
 8002806:	01db      	lsls	r3, r3, #7
 8002808:	4013      	ands	r3, r2
 800280a:	d015      	beq.n	8002838 <HAL_PCD_EP_Open+0x384>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	001a      	movs	r2, r3
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	18d3      	adds	r3, r2, r3
 800281a:	881b      	ldrh	r3, [r3, #0]
 800281c:	4a17      	ldr	r2, [pc, #92]	; (800287c <HAL_PCD_EP_Open+0x3c8>)
 800281e:	4013      	ands	r3, r2
 8002820:	b29a      	uxth	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	0019      	movs	r1, r3
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	18cb      	adds	r3, r1, r3
 8002830:	4919      	ldr	r1, [pc, #100]	; (8002898 <HAL_PCD_EP_Open+0x3e4>)
 8002832:	430a      	orrs	r2, r1
 8002834:	b292      	uxth	r2, r2
 8002836:	801a      	strh	r2, [r3, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	001a      	movs	r2, r3
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	18d3      	adds	r3, r2, r3
 8002846:	881b      	ldrh	r3, [r3, #0]
 8002848:	4a14      	ldr	r2, [pc, #80]	; (800289c <HAL_PCD_EP_Open+0x3e8>)
 800284a:	4013      	ands	r3, r2
 800284c:	b29c      	uxth	r4, r3
 800284e:	2380      	movs	r3, #128	; 0x80
 8002850:	015b      	lsls	r3, r3, #5
 8002852:	4063      	eors	r3, r4
 8002854:	b29c      	uxth	r4, r3
 8002856:	2380      	movs	r3, #128	; 0x80
 8002858:	019b      	lsls	r3, r3, #6
 800285a:	4063      	eors	r3, r4
 800285c:	b29c      	uxth	r4, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	001a      	movs	r2, r3
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	18d3      	adds	r3, r2, r3
 800286c:	4a04      	ldr	r2, [pc, #16]	; (8002880 <HAL_PCD_EP_Open+0x3cc>)
 800286e:	4322      	orrs	r2, r4
 8002870:	b292      	uxth	r2, r2
 8002872:	801a      	strh	r2, [r3, #0]
 8002874:	e17b      	b.n	8002b6e <HAL_PCD_EP_Open+0x6ba>
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	ffff898f 	.word	0xffff898f
 800287c:	00000f0f 	.word	0x00000f0f
 8002880:	ffff8080 	.word	0xffff8080
 8002884:	ffff80c0 	.word	0xffff80c0
 8002888:	ffff8fbf 	.word	0xffff8fbf
 800288c:	00000404 	.word	0x00000404
 8002890:	00000406 	.word	0x00000406
 8002894:	ffff8000 	.word	0xffff8000
 8002898:	ffffc080 	.word	0xffffc080
 800289c:	ffffbf8f 	.word	0xffffbf8f
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	001a      	movs	r2, r3
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	18d3      	adds	r3, r2, r3
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	4ab5      	ldr	r2, [pc, #724]	; (8002b88 <HAL_PCD_EP_Open+0x6d4>)
 80028b2:	4013      	ands	r3, r2
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	0019      	movs	r1, r3
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	18cb      	adds	r3, r1, r3
 80028c4:	49b1      	ldr	r1, [pc, #708]	; (8002b8c <HAL_PCD_EP_Open+0x6d8>)
 80028c6:	430a      	orrs	r2, r1
 80028c8:	b292      	uxth	r2, r2
 80028ca:	801a      	strh	r2, [r3, #0]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1)
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	88db      	ldrh	r3, [r3, #6]
 80028d0:	085b      	lsrs	r3, r3, #1
 80028d2:	b299      	uxth	r1, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2250      	movs	r2, #80	; 0x50
 80028da:	5a9b      	ldrh	r3, [r3, r2]
 80028dc:	b29b      	uxth	r3, r3
 80028de:	001a      	movs	r2, r3
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	18d3      	adds	r3, r2, r3
 80028e8:	001a      	movs	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	18d3      	adds	r3, r2, r3
 80028f0:	2280      	movs	r2, #128	; 0x80
 80028f2:	00d2      	lsls	r2, r2, #3
 80028f4:	4694      	mov	ip, r2
 80028f6:	4463      	add	r3, ip
 80028f8:	001a      	movs	r2, r3
 80028fa:	1c0b      	adds	r3, r1, #0
 80028fc:	18db      	adds	r3, r3, r3
 80028fe:	b29b      	uxth	r3, r3
 8002900:	8013      	strh	r3, [r2, #0]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	891b      	ldrh	r3, [r3, #8]
 8002906:	085b      	lsrs	r3, r3, #1
 8002908:	b299      	uxth	r1, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2250      	movs	r2, #80	; 0x50
 8002910:	5a9b      	ldrh	r3, [r3, r2]
 8002912:	b29b      	uxth	r3, r3
 8002914:	001a      	movs	r2, r3
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	18d3      	adds	r3, r2, r3
 800291e:	001a      	movs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	18d3      	adds	r3, r2, r3
 8002926:	4a9a      	ldr	r2, [pc, #616]	; (8002b90 <HAL_PCD_EP_Open+0x6dc>)
 8002928:	4694      	mov	ip, r2
 800292a:	4463      	add	r3, ip
 800292c:	001a      	movs	r2, r3
 800292e:	1c0b      	adds	r3, r1, #0
 8002930:	18db      	adds	r3, r3, r3
 8002932:	b29b      	uxth	r3, r3
 8002934:	8013      	strh	r3, [r2, #0]
    
    if (ep->is_in==0U)
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	785b      	ldrb	r3, [r3, #1]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d000      	beq.n	8002940 <HAL_PCD_EP_Open+0x48c>
 800293e:	e08f      	b.n	8002a60 <HAL_PCD_EP_Open+0x5ac>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	001a      	movs	r2, r3
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	18d3      	adds	r3, r2, r3
 800294e:	881b      	ldrh	r3, [r3, #0]
 8002950:	001a      	movs	r2, r3
 8002952:	2380      	movs	r3, #128	; 0x80
 8002954:	01db      	lsls	r3, r3, #7
 8002956:	4013      	ands	r3, r2
 8002958:	d015      	beq.n	8002986 <HAL_PCD_EP_Open+0x4d2>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	001a      	movs	r2, r3
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	18d3      	adds	r3, r2, r3
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	4a8a      	ldr	r2, [pc, #552]	; (8002b94 <HAL_PCD_EP_Open+0x6e0>)
 800296c:	4013      	ands	r3, r2
 800296e:	b29a      	uxth	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	0019      	movs	r1, r3
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	18cb      	adds	r3, r1, r3
 800297e:	4986      	ldr	r1, [pc, #536]	; (8002b98 <HAL_PCD_EP_Open+0x6e4>)
 8002980:	430a      	orrs	r2, r1
 8002982:	b292      	uxth	r2, r2
 8002984:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	001a      	movs	r2, r3
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	18d3      	adds	r3, r2, r3
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	001a      	movs	r2, r3
 8002998:	2340      	movs	r3, #64	; 0x40
 800299a:	4013      	ands	r3, r2
 800299c:	d015      	beq.n	80029ca <HAL_PCD_EP_Open+0x516>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	001a      	movs	r2, r3
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	18d3      	adds	r3, r2, r3
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	4a79      	ldr	r2, [pc, #484]	; (8002b94 <HAL_PCD_EP_Open+0x6e0>)
 80029b0:	4013      	ands	r3, r2
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	0019      	movs	r1, r3
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	18cb      	adds	r3, r1, r3
 80029c2:	4976      	ldr	r1, [pc, #472]	; (8002b9c <HAL_PCD_EP_Open+0x6e8>)
 80029c4:	430a      	orrs	r2, r1
 80029c6:	b292      	uxth	r2, r2
 80029c8:	801a      	strh	r2, [r3, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	001a      	movs	r2, r3
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	18d3      	adds	r3, r2, r3
 80029d8:	881b      	ldrh	r3, [r3, #0]
 80029da:	4a6e      	ldr	r2, [pc, #440]	; (8002b94 <HAL_PCD_EP_Open+0x6e0>)
 80029dc:	4013      	ands	r3, r2
 80029de:	b29a      	uxth	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	0019      	movs	r1, r3
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	18cb      	adds	r3, r1, r3
 80029ee:	496b      	ldr	r1, [pc, #428]	; (8002b9c <HAL_PCD_EP_Open+0x6e8>)
 80029f0:	430a      	orrs	r2, r1
 80029f2:	b292      	uxth	r2, r2
 80029f4:	801a      	strh	r2, [r3, #0]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	001a      	movs	r2, r3
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	18d3      	adds	r3, r2, r3
 8002a04:	881b      	ldrh	r3, [r3, #0]
 8002a06:	4a66      	ldr	r2, [pc, #408]	; (8002ba0 <HAL_PCD_EP_Open+0x6ec>)
 8002a08:	4013      	ands	r3, r2
 8002a0a:	b29c      	uxth	r4, r3
 8002a0c:	2380      	movs	r3, #128	; 0x80
 8002a0e:	015b      	lsls	r3, r3, #5
 8002a10:	4063      	eors	r3, r4
 8002a12:	b29c      	uxth	r4, r3
 8002a14:	2380      	movs	r3, #128	; 0x80
 8002a16:	019b      	lsls	r3, r3, #6
 8002a18:	4063      	eors	r3, r4
 8002a1a:	b29c      	uxth	r4, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	001a      	movs	r2, r3
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	18d3      	adds	r3, r2, r3
 8002a2a:	4a5e      	ldr	r2, [pc, #376]	; (8002ba4 <HAL_PCD_EP_Open+0x6f0>)
 8002a2c:	4322      	orrs	r2, r4
 8002a2e:	b292      	uxth	r2, r2
 8002a30:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	001a      	movs	r2, r3
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	18d3      	adds	r3, r2, r3
 8002a40:	881b      	ldrh	r3, [r3, #0]
 8002a42:	4a59      	ldr	r2, [pc, #356]	; (8002ba8 <HAL_PCD_EP_Open+0x6f4>)
 8002a44:	4013      	ands	r3, r2
 8002a46:	b29c      	uxth	r4, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	001a      	movs	r2, r3
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	18d3      	adds	r3, r2, r3
 8002a56:	4a53      	ldr	r2, [pc, #332]	; (8002ba4 <HAL_PCD_EP_Open+0x6f0>)
 8002a58:	4322      	orrs	r2, r4
 8002a5a:	b292      	uxth	r2, r2
 8002a5c:	801a      	strh	r2, [r3, #0]
 8002a5e:	e086      	b.n	8002b6e <HAL_PCD_EP_Open+0x6ba>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	001a      	movs	r2, r3
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	18d3      	adds	r3, r2, r3
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	001a      	movs	r2, r3
 8002a72:	2380      	movs	r3, #128	; 0x80
 8002a74:	01db      	lsls	r3, r3, #7
 8002a76:	4013      	ands	r3, r2
 8002a78:	d015      	beq.n	8002aa6 <HAL_PCD_EP_Open+0x5f2>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	001a      	movs	r2, r3
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	18d3      	adds	r3, r2, r3
 8002a88:	881b      	ldrh	r3, [r3, #0]
 8002a8a:	4a42      	ldr	r2, [pc, #264]	; (8002b94 <HAL_PCD_EP_Open+0x6e0>)
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	0019      	movs	r1, r3
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	18cb      	adds	r3, r1, r3
 8002a9e:	493e      	ldr	r1, [pc, #248]	; (8002b98 <HAL_PCD_EP_Open+0x6e4>)
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	b292      	uxth	r2, r2
 8002aa4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	001a      	movs	r2, r3
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	18d3      	adds	r3, r2, r3
 8002ab4:	881b      	ldrh	r3, [r3, #0]
 8002ab6:	001a      	movs	r2, r3
 8002ab8:	2340      	movs	r3, #64	; 0x40
 8002aba:	4013      	ands	r3, r2
 8002abc:	d015      	beq.n	8002aea <HAL_PCD_EP_Open+0x636>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	001a      	movs	r2, r3
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	18d3      	adds	r3, r2, r3
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	4a31      	ldr	r2, [pc, #196]	; (8002b94 <HAL_PCD_EP_Open+0x6e0>)
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	0019      	movs	r1, r3
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	18cb      	adds	r3, r1, r3
 8002ae2:	492e      	ldr	r1, [pc, #184]	; (8002b9c <HAL_PCD_EP_Open+0x6e8>)
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	b292      	uxth	r2, r2
 8002ae8:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	001a      	movs	r2, r3
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	18d3      	adds	r3, r2, r3
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	4a26      	ldr	r2, [pc, #152]	; (8002b94 <HAL_PCD_EP_Open+0x6e0>)
 8002afc:	4013      	ands	r3, r2
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	0019      	movs	r1, r3
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	18cb      	adds	r3, r1, r3
 8002b0e:	4922      	ldr	r1, [pc, #136]	; (8002b98 <HAL_PCD_EP_Open+0x6e4>)
 8002b10:	430a      	orrs	r2, r1
 8002b12:	b292      	uxth	r2, r2
 8002b14:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	001a      	movs	r2, r3
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	18d3      	adds	r3, r2, r3
 8002b24:	881b      	ldrh	r3, [r3, #0]
 8002b26:	4a20      	ldr	r2, [pc, #128]	; (8002ba8 <HAL_PCD_EP_Open+0x6f4>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	b29c      	uxth	r4, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	001a      	movs	r2, r3
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	18d3      	adds	r3, r2, r3
 8002b3a:	4a1a      	ldr	r2, [pc, #104]	; (8002ba4 <HAL_PCD_EP_Open+0x6f0>)
 8002b3c:	4322      	orrs	r2, r4
 8002b3e:	b292      	uxth	r2, r2
 8002b40:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	001a      	movs	r2, r3
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	18d3      	adds	r3, r2, r3
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	4a13      	ldr	r2, [pc, #76]	; (8002ba0 <HAL_PCD_EP_Open+0x6ec>)
 8002b54:	4013      	ands	r3, r2
 8002b56:	b29c      	uxth	r4, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	001a      	movs	r2, r3
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	18d3      	adds	r3, r2, r3
 8002b66:	4a0f      	ldr	r2, [pc, #60]	; (8002ba4 <HAL_PCD_EP_Open+0x6f0>)
 8002b68:	4322      	orrs	r2, r4
 8002b6a:	b292      	uxth	r2, r2
 8002b6c:	801a      	strh	r2, [r3, #0]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	23f4      	movs	r3, #244	; 0xf4
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	2100      	movs	r1, #0
 8002b76:	54d1      	strb	r1, [r2, r3]
  return ret;
 8002b78:	2311      	movs	r3, #17
 8002b7a:	18fb      	adds	r3, r7, r3
 8002b7c:	781b      	ldrb	r3, [r3, #0]
}
 8002b7e:	0018      	movs	r0, r3
 8002b80:	46bd      	mov	sp, r7
 8002b82:	b007      	add	sp, #28
 8002b84:	bd90      	pop	{r4, r7, pc}
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	00000e0f 	.word	0x00000e0f
 8002b8c:	ffff8180 	.word	0xffff8180
 8002b90:	00000404 	.word	0x00000404
 8002b94:	00000f0f 	.word	0x00000f0f
 8002b98:	ffffc080 	.word	0xffffc080
 8002b9c:	ffff80c0 	.word	0xffff80c0
 8002ba0:	ffffbf8f 	.word	0xffffbf8f
 8002ba4:	ffff8080 	.word	0xffff8080
 8002ba8:	ffff8fbf 	.word	0xffff8fbf

08002bac <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8002bac:	b590      	push	{r4, r7, lr}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	000a      	movs	r2, r1
 8002bb6:	1cfb      	adds	r3, r7, #3
 8002bb8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8002bba:	1cfb      	adds	r3, r7, #3
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	b25b      	sxtb	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	da0c      	bge.n	8002bde <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8002bc4:	1cfb      	adds	r3, r7, #3
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	227f      	movs	r2, #127	; 0x7f
 8002bca:	401a      	ands	r2, r3
 8002bcc:	0013      	movs	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	1a9b      	subs	r3, r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	3328      	adds	r3, #40	; 0x28
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	18d3      	adds	r3, r2, r3
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	e00c      	b.n	8002bf8 <HAL_PCD_EP_Close+0x4c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8002bde:	1cfb      	adds	r3, r7, #3
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	227f      	movs	r2, #127	; 0x7f
 8002be4:	401a      	ands	r2, r3
 8002be6:	0013      	movs	r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	1a9b      	subs	r3, r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	3309      	adds	r3, #9
 8002bf0:	33ff      	adds	r3, #255	; 0xff
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	18d3      	adds	r3, r2, r3
 8002bf6:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 8002bf8:	1cfb      	adds	r3, r7, #3
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	227f      	movs	r2, #127	; 0x7f
 8002bfe:	4013      	ands	r3, r2
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8002c06:	1cfb      	adds	r3, r7, #3
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	b25b      	sxtb	r3, r3
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	09db      	lsrs	r3, r3, #7
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	001a      	movs	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	23f4      	movs	r3, #244	; 0xf4
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	5cd3      	ldrb	r3, [r2, r3]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_PCD_EP_Close+0x7c>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e19a      	b.n	8002f5e <HAL_PCD_EP_Close+0x3b2>
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	23f4      	movs	r3, #244	; 0xf4
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	2101      	movs	r1, #1
 8002c30:	54d1      	strb	r1, [r2, r3]

  if (ep->doublebuffer == 0U) 
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	7a9b      	ldrb	r3, [r3, #10]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d000      	beq.n	8002c3c <HAL_PCD_EP_Close+0x90>
 8002c3a:	e076      	b.n	8002d2a <HAL_PCD_EP_Close+0x17e>
  {
    if (ep->is_in)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	785b      	ldrb	r3, [r3, #1]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d038      	beq.n	8002cb6 <HAL_PCD_EP_Close+0x10a>
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	001a      	movs	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	18d3      	adds	r3, r2, r3
 8002c52:	881b      	ldrh	r3, [r3, #0]
 8002c54:	001a      	movs	r2, r3
 8002c56:	2340      	movs	r3, #64	; 0x40
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d015      	beq.n	8002c88 <HAL_PCD_EP_Close+0xdc>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	001a      	movs	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	18d3      	adds	r3, r2, r3
 8002c6a:	881b      	ldrh	r3, [r3, #0]
 8002c6c:	4abe      	ldr	r2, [pc, #760]	; (8002f68 <HAL_PCD_EP_Close+0x3bc>)
 8002c6e:	4013      	ands	r3, r2
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	0019      	movs	r1, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	18cb      	adds	r3, r1, r3
 8002c80:	49ba      	ldr	r1, [pc, #744]	; (8002f6c <HAL_PCD_EP_Close+0x3c0>)
 8002c82:	430a      	orrs	r2, r1
 8002c84:	b292      	uxth	r2, r2
 8002c86:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	001a      	movs	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	18d3      	adds	r3, r2, r3
 8002c96:	881b      	ldrh	r3, [r3, #0]
 8002c98:	4ab5      	ldr	r2, [pc, #724]	; (8002f70 <HAL_PCD_EP_Close+0x3c4>)
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	b29c      	uxth	r4, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	001a      	movs	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	18d3      	adds	r3, r2, r3
 8002cac:	4ab1      	ldr	r2, [pc, #708]	; (8002f74 <HAL_PCD_EP_Close+0x3c8>)
 8002cae:	4322      	orrs	r2, r4
 8002cb0:	b292      	uxth	r2, r2
 8002cb2:	801a      	strh	r2, [r3, #0]
 8002cb4:	e14d      	b.n	8002f52 <HAL_PCD_EP_Close+0x3a6>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	001a      	movs	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	18d3      	adds	r3, r2, r3
 8002cc4:	881b      	ldrh	r3, [r3, #0]
 8002cc6:	001a      	movs	r2, r3
 8002cc8:	2380      	movs	r3, #128	; 0x80
 8002cca:	01db      	lsls	r3, r3, #7
 8002ccc:	4013      	ands	r3, r2
 8002cce:	d015      	beq.n	8002cfc <HAL_PCD_EP_Close+0x150>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	001a      	movs	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	18d3      	adds	r3, r2, r3
 8002cde:	881b      	ldrh	r3, [r3, #0]
 8002ce0:	4aa1      	ldr	r2, [pc, #644]	; (8002f68 <HAL_PCD_EP_Close+0x3bc>)
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	0019      	movs	r1, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	18cb      	adds	r3, r1, r3
 8002cf4:	49a0      	ldr	r1, [pc, #640]	; (8002f78 <HAL_PCD_EP_Close+0x3cc>)
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	b292      	uxth	r2, r2
 8002cfa:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	001a      	movs	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	18d3      	adds	r3, r2, r3
 8002d0a:	881b      	ldrh	r3, [r3, #0]
 8002d0c:	4a9b      	ldr	r2, [pc, #620]	; (8002f7c <HAL_PCD_EP_Close+0x3d0>)
 8002d0e:	4013      	ands	r3, r2
 8002d10:	b29c      	uxth	r4, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	001a      	movs	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	18d3      	adds	r3, r2, r3
 8002d20:	4a94      	ldr	r2, [pc, #592]	; (8002f74 <HAL_PCD_EP_Close+0x3c8>)
 8002d22:	4322      	orrs	r2, r4
 8002d24:	b292      	uxth	r2, r2
 8002d26:	801a      	strh	r2, [r3, #0]
 8002d28:	e113      	b.n	8002f52 <HAL_PCD_EP_Close+0x3a6>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0U)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	785b      	ldrb	r3, [r3, #1]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d000      	beq.n	8002d34 <HAL_PCD_EP_Close+0x188>
 8002d32:	e087      	b.n	8002e44 <HAL_PCD_EP_Close+0x298>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	001a      	movs	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	18d3      	adds	r3, r2, r3
 8002d42:	881b      	ldrh	r3, [r3, #0]
 8002d44:	001a      	movs	r2, r3
 8002d46:	2380      	movs	r3, #128	; 0x80
 8002d48:	01db      	lsls	r3, r3, #7
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	d015      	beq.n	8002d7a <HAL_PCD_EP_Close+0x1ce>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	001a      	movs	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	18d3      	adds	r3, r2, r3
 8002d5c:	881b      	ldrh	r3, [r3, #0]
 8002d5e:	4a82      	ldr	r2, [pc, #520]	; (8002f68 <HAL_PCD_EP_Close+0x3bc>)
 8002d60:	4013      	ands	r3, r2
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	0019      	movs	r1, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	18cb      	adds	r3, r1, r3
 8002d72:	4981      	ldr	r1, [pc, #516]	; (8002f78 <HAL_PCD_EP_Close+0x3cc>)
 8002d74:	430a      	orrs	r2, r1
 8002d76:	b292      	uxth	r2, r2
 8002d78:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	001a      	movs	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	18d3      	adds	r3, r2, r3
 8002d88:	881b      	ldrh	r3, [r3, #0]
 8002d8a:	001a      	movs	r2, r3
 8002d8c:	2340      	movs	r3, #64	; 0x40
 8002d8e:	4013      	ands	r3, r2
 8002d90:	d015      	beq.n	8002dbe <HAL_PCD_EP_Close+0x212>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	001a      	movs	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	18d3      	adds	r3, r2, r3
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	4a71      	ldr	r2, [pc, #452]	; (8002f68 <HAL_PCD_EP_Close+0x3bc>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	0019      	movs	r1, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	18cb      	adds	r3, r1, r3
 8002db6:	496d      	ldr	r1, [pc, #436]	; (8002f6c <HAL_PCD_EP_Close+0x3c0>)
 8002db8:	430a      	orrs	r2, r1
 8002dba:	b292      	uxth	r2, r2
 8002dbc:	801a      	strh	r2, [r3, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	001a      	movs	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	18d3      	adds	r3, r2, r3
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	4a66      	ldr	r2, [pc, #408]	; (8002f68 <HAL_PCD_EP_Close+0x3bc>)
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	0019      	movs	r1, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	18cb      	adds	r3, r1, r3
 8002de2:	4962      	ldr	r1, [pc, #392]	; (8002f6c <HAL_PCD_EP_Close+0x3c0>)
 8002de4:	430a      	orrs	r2, r1
 8002de6:	b292      	uxth	r2, r2
 8002de8:	801a      	strh	r2, [r3, #0]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	001a      	movs	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	18d3      	adds	r3, r2, r3
 8002df8:	881b      	ldrh	r3, [r3, #0]
 8002dfa:	4a60      	ldr	r2, [pc, #384]	; (8002f7c <HAL_PCD_EP_Close+0x3d0>)
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	b29c      	uxth	r4, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	001a      	movs	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	18d3      	adds	r3, r2, r3
 8002e0e:	4a59      	ldr	r2, [pc, #356]	; (8002f74 <HAL_PCD_EP_Close+0x3c8>)
 8002e10:	4322      	orrs	r2, r4
 8002e12:	b292      	uxth	r2, r2
 8002e14:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	001a      	movs	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	18d3      	adds	r3, r2, r3
 8002e24:	881b      	ldrh	r3, [r3, #0]
 8002e26:	4a52      	ldr	r2, [pc, #328]	; (8002f70 <HAL_PCD_EP_Close+0x3c4>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	b29c      	uxth	r4, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	001a      	movs	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	18d3      	adds	r3, r2, r3
 8002e3a:	4a4e      	ldr	r2, [pc, #312]	; (8002f74 <HAL_PCD_EP_Close+0x3c8>)
 8002e3c:	4322      	orrs	r2, r4
 8002e3e:	b292      	uxth	r2, r2
 8002e40:	801a      	strh	r2, [r3, #0]
 8002e42:	e086      	b.n	8002f52 <HAL_PCD_EP_Close+0x3a6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	001a      	movs	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	18d3      	adds	r3, r2, r3
 8002e52:	881b      	ldrh	r3, [r3, #0]
 8002e54:	001a      	movs	r2, r3
 8002e56:	2380      	movs	r3, #128	; 0x80
 8002e58:	01db      	lsls	r3, r3, #7
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d015      	beq.n	8002e8a <HAL_PCD_EP_Close+0x2de>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	001a      	movs	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	18d3      	adds	r3, r2, r3
 8002e6c:	881b      	ldrh	r3, [r3, #0]
 8002e6e:	4a3e      	ldr	r2, [pc, #248]	; (8002f68 <HAL_PCD_EP_Close+0x3bc>)
 8002e70:	4013      	ands	r3, r2
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	0019      	movs	r1, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	18cb      	adds	r3, r1, r3
 8002e82:	493d      	ldr	r1, [pc, #244]	; (8002f78 <HAL_PCD_EP_Close+0x3cc>)
 8002e84:	430a      	orrs	r2, r1
 8002e86:	b292      	uxth	r2, r2
 8002e88:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	001a      	movs	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	18d3      	adds	r3, r2, r3
 8002e98:	881b      	ldrh	r3, [r3, #0]
 8002e9a:	001a      	movs	r2, r3
 8002e9c:	2340      	movs	r3, #64	; 0x40
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	d015      	beq.n	8002ece <HAL_PCD_EP_Close+0x322>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	001a      	movs	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	18d3      	adds	r3, r2, r3
 8002eb0:	881b      	ldrh	r3, [r3, #0]
 8002eb2:	4a2d      	ldr	r2, [pc, #180]	; (8002f68 <HAL_PCD_EP_Close+0x3bc>)
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	0019      	movs	r1, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	18cb      	adds	r3, r1, r3
 8002ec6:	4929      	ldr	r1, [pc, #164]	; (8002f6c <HAL_PCD_EP_Close+0x3c0>)
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	b292      	uxth	r2, r2
 8002ecc:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	001a      	movs	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	18d3      	adds	r3, r2, r3
 8002edc:	881b      	ldrh	r3, [r3, #0]
 8002ede:	4a22      	ldr	r2, [pc, #136]	; (8002f68 <HAL_PCD_EP_Close+0x3bc>)
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	0019      	movs	r1, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	18cb      	adds	r3, r1, r3
 8002ef2:	4921      	ldr	r1, [pc, #132]	; (8002f78 <HAL_PCD_EP_Close+0x3cc>)
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	b292      	uxth	r2, r2
 8002ef8:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	001a      	movs	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	18d3      	adds	r3, r2, r3
 8002f08:	881b      	ldrh	r3, [r3, #0]
 8002f0a:	4a19      	ldr	r2, [pc, #100]	; (8002f70 <HAL_PCD_EP_Close+0x3c4>)
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	b29c      	uxth	r4, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	001a      	movs	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	18d3      	adds	r3, r2, r3
 8002f1e:	4a15      	ldr	r2, [pc, #84]	; (8002f74 <HAL_PCD_EP_Close+0x3c8>)
 8002f20:	4322      	orrs	r2, r4
 8002f22:	b292      	uxth	r2, r2
 8002f24:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	001a      	movs	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	18d3      	adds	r3, r2, r3
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	4a11      	ldr	r2, [pc, #68]	; (8002f7c <HAL_PCD_EP_Close+0x3d0>)
 8002f38:	4013      	ands	r3, r2
 8002f3a:	b29c      	uxth	r4, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	001a      	movs	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	18d3      	adds	r3, r2, r3
 8002f4a:	4a0a      	ldr	r2, [pc, #40]	; (8002f74 <HAL_PCD_EP_Close+0x3c8>)
 8002f4c:	4322      	orrs	r2, r4
 8002f4e:	b292      	uxth	r2, r2
 8002f50:	801a      	strh	r2, [r3, #0]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	23f4      	movs	r3, #244	; 0xf4
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	2100      	movs	r1, #0
 8002f5a:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	0018      	movs	r0, r3
 8002f60:	46bd      	mov	sp, r7
 8002f62:	b005      	add	sp, #20
 8002f64:	bd90      	pop	{r4, r7, pc}
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	00000f0f 	.word	0x00000f0f
 8002f6c:	ffff80c0 	.word	0xffff80c0
 8002f70:	ffff8fbf 	.word	0xffff8fbf
 8002f74:	ffff8080 	.word	0xffff8080
 8002f78:	ffffc080 	.word	0xffffc080
 8002f7c:	ffffbf8f 	.word	0xffffbf8f

08002f80 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer   
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f80:	b590      	push	{r4, r7, lr}
 8002f82:	b08b      	sub	sp, #44	; 0x2c
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	607a      	str	r2, [r7, #4]
 8002f8a:	603b      	str	r3, [r7, #0]
 8002f8c:	200b      	movs	r0, #11
 8002f8e:	183b      	adds	r3, r7, r0
 8002f90:	1c0a      	adds	r2, r1, #0
 8002f92:	701a      	strb	r2, [r3, #0]
  
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8002f94:	0001      	movs	r1, r0
 8002f96:	187b      	adds	r3, r7, r1
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	227f      	movs	r2, #127	; 0x7f
 8002f9c:	401a      	ands	r2, r3
 8002f9e:	0013      	movs	r3, r2
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	1a9b      	subs	r3, r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	3309      	adds	r3, #9
 8002fa8:	33ff      	adds	r3, #255	; 0xff
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	18d3      	adds	r3, r2, r3
 8002fae:	61fb      	str	r3, [r7, #28]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8002fc8:	187b      	adds	r3, r7, r1
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	227f      	movs	r2, #127	; 0x7f
 8002fce:	4013      	ands	r3, r2
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	701a      	strb	r2, [r3, #0]
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	695a      	ldr	r2, [r3, #20]
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d909      	bls.n	8002ff6 <HAL_PCD_EP_Receive+0x76>
  {
    len=ep->maxpacket;
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	603b      	str	r3, [r7, #0]
    ep->xfer_len-=len; 
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	695a      	ldr	r2, [r3, #20]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	1ad2      	subs	r2, r2, r3
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	615a      	str	r2, [r3, #20]
 8002ff4:	e005      	b.n	8003002 <HAL_PCD_EP_Receive+0x82>
  }
  else
  {
    len=ep->xfer_len;
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	603b      	str	r3, [r7, #0]
    ep->xfer_len =0U;
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	2200      	movs	r2, #0
 8003000:	615a      	str	r2, [r3, #20]
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	7a9b      	ldrb	r3, [r3, #10]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d143      	bne.n	8003092 <HAL_PCD_EP_Receive+0x112>
  {
    /*Set RX buffer count*/
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2250      	movs	r2, #80	; 0x50
 8003010:	5a9b      	ldrh	r3, [r3, r2]
 8003012:	b29b      	uxth	r3, r3
 8003014:	001a      	movs	r2, r3
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	18d3      	adds	r3, r2, r3
 800301e:	001a      	movs	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	18d3      	adds	r3, r2, r3
 8003026:	4a8c      	ldr	r2, [pc, #560]	; (8003258 <HAL_PCD_EP_Receive+0x2d8>)
 8003028:	4694      	mov	ip, r2
 800302a:	4463      	add	r3, ip
 800302c:	613b      	str	r3, [r7, #16]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	2b3e      	cmp	r3, #62	; 0x3e
 8003032:	d918      	bls.n	8003066 <HAL_PCD_EP_Receive+0xe6>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	095a      	lsrs	r2, r3, #5
 8003038:	2126      	movs	r1, #38	; 0x26
 800303a:	187b      	adds	r3, r7, r1
 800303c:	801a      	strh	r2, [r3, #0]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	221f      	movs	r2, #31
 8003042:	4013      	ands	r3, r2
 8003044:	d104      	bne.n	8003050 <HAL_PCD_EP_Receive+0xd0>
 8003046:	187b      	adds	r3, r7, r1
 8003048:	881a      	ldrh	r2, [r3, #0]
 800304a:	187b      	adds	r3, r7, r1
 800304c:	3a01      	subs	r2, #1
 800304e:	801a      	strh	r2, [r3, #0]
 8003050:	2326      	movs	r3, #38	; 0x26
 8003052:	18fb      	adds	r3, r7, r3
 8003054:	881b      	ldrh	r3, [r3, #0]
 8003056:	029b      	lsls	r3, r3, #10
 8003058:	b29b      	uxth	r3, r3
 800305a:	4a80      	ldr	r2, [pc, #512]	; (800325c <HAL_PCD_EP_Receive+0x2dc>)
 800305c:	4313      	orrs	r3, r2
 800305e:	b29a      	uxth	r2, r3
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	801a      	strh	r2, [r3, #0]
 8003064:	e0d5      	b.n	8003212 <HAL_PCD_EP_Receive+0x292>
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	085a      	lsrs	r2, r3, #1
 800306a:	2126      	movs	r1, #38	; 0x26
 800306c:	187b      	adds	r3, r7, r1
 800306e:	801a      	strh	r2, [r3, #0]
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	2201      	movs	r2, #1
 8003074:	4013      	ands	r3, r2
 8003076:	d004      	beq.n	8003082 <HAL_PCD_EP_Receive+0x102>
 8003078:	187b      	adds	r3, r7, r1
 800307a:	881a      	ldrh	r2, [r3, #0]
 800307c:	187b      	adds	r3, r7, r1
 800307e:	3201      	adds	r2, #1
 8003080:	801a      	strh	r2, [r3, #0]
 8003082:	2326      	movs	r3, #38	; 0x26
 8003084:	18fb      	adds	r3, r7, r3
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	029b      	lsls	r3, r3, #10
 800308a:	b29a      	uxth	r2, r3
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	801a      	strh	r2, [r3, #0]
 8003090:	e0bf      	b.n	8003212 <HAL_PCD_EP_Receive+0x292>
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	785b      	ldrb	r3, [r3, #1]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d143      	bne.n	8003122 <HAL_PCD_EP_Receive+0x1a2>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2250      	movs	r2, #80	; 0x50
 80030a0:	5a9b      	ldrh	r3, [r3, r2]
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	001a      	movs	r2, r3
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	18d3      	adds	r3, r2, r3
 80030ae:	001a      	movs	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	18d3      	adds	r3, r2, r3
 80030b6:	4a6a      	ldr	r2, [pc, #424]	; (8003260 <HAL_PCD_EP_Receive+0x2e0>)
 80030b8:	4694      	mov	ip, r2
 80030ba:	4463      	add	r3, ip
 80030bc:	61bb      	str	r3, [r7, #24]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	2b3e      	cmp	r3, #62	; 0x3e
 80030c2:	d918      	bls.n	80030f6 <HAL_PCD_EP_Receive+0x176>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	095a      	lsrs	r2, r3, #5
 80030c8:	2124      	movs	r1, #36	; 0x24
 80030ca:	187b      	adds	r3, r7, r1
 80030cc:	801a      	strh	r2, [r3, #0]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	221f      	movs	r2, #31
 80030d2:	4013      	ands	r3, r2
 80030d4:	d104      	bne.n	80030e0 <HAL_PCD_EP_Receive+0x160>
 80030d6:	187b      	adds	r3, r7, r1
 80030d8:	881a      	ldrh	r2, [r3, #0]
 80030da:	187b      	adds	r3, r7, r1
 80030dc:	3a01      	subs	r2, #1
 80030de:	801a      	strh	r2, [r3, #0]
 80030e0:	2324      	movs	r3, #36	; 0x24
 80030e2:	18fb      	adds	r3, r7, r3
 80030e4:	881b      	ldrh	r3, [r3, #0]
 80030e6:	029b      	lsls	r3, r3, #10
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	4a5c      	ldr	r2, [pc, #368]	; (800325c <HAL_PCD_EP_Receive+0x2dc>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	801a      	strh	r2, [r3, #0]
 80030f4:	e02d      	b.n	8003152 <HAL_PCD_EP_Receive+0x1d2>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	085a      	lsrs	r2, r3, #1
 80030fa:	2124      	movs	r1, #36	; 0x24
 80030fc:	187b      	adds	r3, r7, r1
 80030fe:	801a      	strh	r2, [r3, #0]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	2201      	movs	r2, #1
 8003104:	4013      	ands	r3, r2
 8003106:	d004      	beq.n	8003112 <HAL_PCD_EP_Receive+0x192>
 8003108:	187b      	adds	r3, r7, r1
 800310a:	881a      	ldrh	r2, [r3, #0]
 800310c:	187b      	adds	r3, r7, r1
 800310e:	3201      	adds	r2, #1
 8003110:	801a      	strh	r2, [r3, #0]
 8003112:	2324      	movs	r3, #36	; 0x24
 8003114:	18fb      	adds	r3, r7, r3
 8003116:	881b      	ldrh	r3, [r3, #0]
 8003118:	029b      	lsls	r3, r3, #10
 800311a:	b29a      	uxth	r2, r3
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	801a      	strh	r2, [r3, #0]
 8003120:	e017      	b.n	8003152 <HAL_PCD_EP_Receive+0x1d2>
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	785b      	ldrb	r3, [r3, #1]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d113      	bne.n	8003152 <HAL_PCD_EP_Receive+0x1d2>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2250      	movs	r2, #80	; 0x50
 8003130:	5a9b      	ldrh	r3, [r3, r2]
 8003132:	b29b      	uxth	r3, r3
 8003134:	001a      	movs	r2, r3
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	18d3      	adds	r3, r2, r3
 800313e:	001a      	movs	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	18d3      	adds	r3, r2, r3
 8003146:	4a46      	ldr	r2, [pc, #280]	; (8003260 <HAL_PCD_EP_Receive+0x2e0>)
 8003148:	4694      	mov	ip, r2
 800314a:	4463      	add	r3, ip
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	b292      	uxth	r2, r2
 8003150:	801a      	strh	r2, [r3, #0]
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	785b      	ldrb	r3, [r3, #1]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d143      	bne.n	80031e2 <HAL_PCD_EP_Receive+0x262>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2250      	movs	r2, #80	; 0x50
 8003160:	5a9b      	ldrh	r3, [r3, r2]
 8003162:	b29b      	uxth	r3, r3
 8003164:	001a      	movs	r2, r3
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	18d3      	adds	r3, r2, r3
 800316e:	001a      	movs	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	18d3      	adds	r3, r2, r3
 8003176:	4a38      	ldr	r2, [pc, #224]	; (8003258 <HAL_PCD_EP_Receive+0x2d8>)
 8003178:	4694      	mov	ip, r2
 800317a:	4463      	add	r3, ip
 800317c:	617b      	str	r3, [r7, #20]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	2b3e      	cmp	r3, #62	; 0x3e
 8003182:	d918      	bls.n	80031b6 <HAL_PCD_EP_Receive+0x236>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	095a      	lsrs	r2, r3, #5
 8003188:	2122      	movs	r1, #34	; 0x22
 800318a:	187b      	adds	r3, r7, r1
 800318c:	801a      	strh	r2, [r3, #0]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	221f      	movs	r2, #31
 8003192:	4013      	ands	r3, r2
 8003194:	d104      	bne.n	80031a0 <HAL_PCD_EP_Receive+0x220>
 8003196:	187b      	adds	r3, r7, r1
 8003198:	881a      	ldrh	r2, [r3, #0]
 800319a:	187b      	adds	r3, r7, r1
 800319c:	3a01      	subs	r2, #1
 800319e:	801a      	strh	r2, [r3, #0]
 80031a0:	2322      	movs	r3, #34	; 0x22
 80031a2:	18fb      	adds	r3, r7, r3
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	029b      	lsls	r3, r3, #10
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	4a2c      	ldr	r2, [pc, #176]	; (800325c <HAL_PCD_EP_Receive+0x2dc>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	801a      	strh	r2, [r3, #0]
 80031b4:	e02d      	b.n	8003212 <HAL_PCD_EP_Receive+0x292>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	085a      	lsrs	r2, r3, #1
 80031ba:	2122      	movs	r1, #34	; 0x22
 80031bc:	187b      	adds	r3, r7, r1
 80031be:	801a      	strh	r2, [r3, #0]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	2201      	movs	r2, #1
 80031c4:	4013      	ands	r3, r2
 80031c6:	d004      	beq.n	80031d2 <HAL_PCD_EP_Receive+0x252>
 80031c8:	187b      	adds	r3, r7, r1
 80031ca:	881a      	ldrh	r2, [r3, #0]
 80031cc:	187b      	adds	r3, r7, r1
 80031ce:	3201      	adds	r2, #1
 80031d0:	801a      	strh	r2, [r3, #0]
 80031d2:	2322      	movs	r3, #34	; 0x22
 80031d4:	18fb      	adds	r3, r7, r3
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	029b      	lsls	r3, r3, #10
 80031da:	b29a      	uxth	r2, r3
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	801a      	strh	r2, [r3, #0]
 80031e0:	e017      	b.n	8003212 <HAL_PCD_EP_Receive+0x292>
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	785b      	ldrb	r3, [r3, #1]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d113      	bne.n	8003212 <HAL_PCD_EP_Receive+0x292>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2250      	movs	r2, #80	; 0x50
 80031f0:	5a9b      	ldrh	r3, [r3, r2]
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	001a      	movs	r2, r3
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	18d3      	adds	r3, r2, r3
 80031fe:	001a      	movs	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	18d3      	adds	r3, r2, r3
 8003206:	4a14      	ldr	r2, [pc, #80]	; (8003258 <HAL_PCD_EP_Receive+0x2d8>)
 8003208:	4694      	mov	ip, r2
 800320a:	4463      	add	r3, ip
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	b292      	uxth	r2, r2
 8003210:	801a      	strh	r2, [r3, #0]
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	001a      	movs	r2, r3
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	18d3      	adds	r3, r2, r3
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	4a10      	ldr	r2, [pc, #64]	; (8003264 <HAL_PCD_EP_Receive+0x2e4>)
 8003224:	4013      	ands	r3, r2
 8003226:	b29c      	uxth	r4, r3
 8003228:	2380      	movs	r3, #128	; 0x80
 800322a:	015b      	lsls	r3, r3, #5
 800322c:	4063      	eors	r3, r4
 800322e:	b29c      	uxth	r4, r3
 8003230:	2380      	movs	r3, #128	; 0x80
 8003232:	019b      	lsls	r3, r3, #6
 8003234:	4063      	eors	r3, r4
 8003236:	b29c      	uxth	r4, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	001a      	movs	r2, r3
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	18d3      	adds	r3, r2, r3
 8003246:	4a08      	ldr	r2, [pc, #32]	; (8003268 <HAL_PCD_EP_Receive+0x2e8>)
 8003248:	4322      	orrs	r2, r4
 800324a:	b292      	uxth	r2, r2
 800324c:	801a      	strh	r2, [r3, #0]
  
  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	0018      	movs	r0, r3
 8003252:	46bd      	mov	sp, r7
 8003254:	b00b      	add	sp, #44	; 0x2c
 8003256:	bd90      	pop	{r4, r7, pc}
 8003258:	00000406 	.word	0x00000406
 800325c:	ffff8000 	.word	0xffff8000
 8003260:	00000402 	.word	0x00000402
 8003264:	ffffbf8f 	.word	0xffffbf8f
 8003268:	ffff8080 	.word	0xffff8080

0800326c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	000a      	movs	r2, r1
 8003276:	1cfb      	adds	r3, r7, #3
 8003278:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & 0x7FU].xfer_count;
 800327a:	1cfb      	adds	r3, r7, #3
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	227f      	movs	r2, #127	; 0x7f
 8003280:	401a      	ands	r2, r3
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	2390      	movs	r3, #144	; 0x90
 8003286:	0059      	lsls	r1, r3, #1
 8003288:	0013      	movs	r3, r2
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	1a9b      	subs	r3, r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	18c3      	adds	r3, r0, r3
 8003292:	185b      	adds	r3, r3, r1
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	b29b      	uxth	r3, r3
}
 8003298:	0018      	movs	r0, r3
 800329a:	46bd      	mov	sp, r7
 800329c:	b002      	add	sp, #8
 800329e:	bd80      	pop	{r7, pc}

080032a0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer   
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032a0:	b590      	push	{r4, r7, lr}
 80032a2:	b08b      	sub	sp, #44	; 0x2c
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	607a      	str	r2, [r7, #4]
 80032aa:	603b      	str	r3, [r7, #0]
 80032ac:	200b      	movs	r0, #11
 80032ae:	183b      	adds	r3, r7, r0
 80032b0:	1c0a      	adds	r2, r1, #0
 80032b2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;
  uint16_t pmabuffer = 0U;
 80032b4:	2326      	movs	r3, #38	; 0x26
 80032b6:	18fb      	adds	r3, r7, r3
 80032b8:	2200      	movs	r2, #0
 80032ba:	801a      	strh	r2, [r3, #0]
    
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80032bc:	0001      	movs	r1, r0
 80032be:	187b      	adds	r3, r7, r1
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	227f      	movs	r2, #127	; 0x7f
 80032c4:	401a      	ands	r2, r3
 80032c6:	0013      	movs	r3, r2
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	1a9b      	subs	r3, r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	3328      	adds	r3, #40	; 0x28
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	18d3      	adds	r3, r2, r3
 80032d4:	61fb      	str	r3, [r7, #28]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	2200      	movs	r2, #0
 80032e6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	2201      	movs	r2, #1
 80032ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 80032ee:	187b      	adds	r3, r7, r1
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	227f      	movs	r2, #127	; 0x7f
 80032f4:	4013      	ands	r3, r2
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	701a      	strb	r2, [r3, #0]
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	695a      	ldr	r2, [r3, #20]
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	429a      	cmp	r2, r3
 8003306:	d909      	bls.n	800331c <HAL_PCD_EP_Transmit+0x7c>
  {
    len=ep->maxpacket;
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	603b      	str	r3, [r7, #0]
    ep->xfer_len-=len; 
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	695a      	ldr	r2, [r3, #20]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	1ad2      	subs	r2, r2, r3
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	615a      	str	r2, [r3, #20]
 800331a:	e005      	b.n	8003328 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {  
    len=ep->xfer_len;
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	603b      	str	r3, [r7, #0]
    ep->xfer_len =0U;
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	2200      	movs	r2, #0
 8003326:	615a      	str	r2, [r3, #20]
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0U) 
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	7a9b      	ldrb	r3, [r3, #10]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d11e      	bne.n	800336e <HAL_PCD_EP_Transmit+0xce>
  {
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6818      	ldr	r0, [r3, #0]
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	6919      	ldr	r1, [r3, #16]
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	889a      	ldrh	r2, [r3, #4]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	b29b      	uxth	r3, r3
 8003340:	f000 faee 	bl	8003920 <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2250      	movs	r2, #80	; 0x50
 800334a:	5a9b      	ldrh	r3, [r3, r2]
 800334c:	b29b      	uxth	r3, r3
 800334e:	001a      	movs	r2, r3
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	18d3      	adds	r3, r2, r3
 8003358:	001a      	movs	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	18d3      	adds	r3, r2, r3
 8003360:	4a9f      	ldr	r2, [pc, #636]	; (80035e0 <HAL_PCD_EP_Transmit+0x340>)
 8003362:	4694      	mov	ip, r2
 8003364:	4463      	add	r3, ip
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	b292      	uxth	r2, r2
 800336a:	801a      	strh	r2, [r3, #0]
 800336c:	e117      	b.n	800359e <HAL_PCD_EP_Transmit+0x2fe>
  }
  else
  {
    /*Write the data to the USB endpoint*/
    if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	001a      	movs	r2, r3
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	18d3      	adds	r3, r2, r3
 800337c:	881b      	ldrh	r3, [r3, #0]
 800337e:	001a      	movs	r2, r3
 8003380:	2340      	movs	r3, #64	; 0x40
 8003382:	4013      	ands	r3, r2
 8003384:	d065      	beq.n	8003452 <HAL_PCD_EP_Transmit+0x1b2>
    {
      /*Set the Double buffer counter for pmabuffer1*/
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	785b      	ldrb	r3, [r3, #1]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d143      	bne.n	8003416 <HAL_PCD_EP_Transmit+0x176>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2250      	movs	r2, #80	; 0x50
 8003394:	5a9b      	ldrh	r3, [r3, r2]
 8003396:	b29b      	uxth	r3, r3
 8003398:	001a      	movs	r2, r3
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	18d3      	adds	r3, r2, r3
 80033a2:	001a      	movs	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	18d3      	adds	r3, r2, r3
 80033aa:	4a8e      	ldr	r2, [pc, #568]	; (80035e4 <HAL_PCD_EP_Transmit+0x344>)
 80033ac:	4694      	mov	ip, r2
 80033ae:	4463      	add	r3, ip
 80033b0:	617b      	str	r3, [r7, #20]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	2b3e      	cmp	r3, #62	; 0x3e
 80033b6:	d918      	bls.n	80033ea <HAL_PCD_EP_Transmit+0x14a>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	095a      	lsrs	r2, r3, #5
 80033bc:	2124      	movs	r1, #36	; 0x24
 80033be:	187b      	adds	r3, r7, r1
 80033c0:	801a      	strh	r2, [r3, #0]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	221f      	movs	r2, #31
 80033c6:	4013      	ands	r3, r2
 80033c8:	d104      	bne.n	80033d4 <HAL_PCD_EP_Transmit+0x134>
 80033ca:	187b      	adds	r3, r7, r1
 80033cc:	881a      	ldrh	r2, [r3, #0]
 80033ce:	187b      	adds	r3, r7, r1
 80033d0:	3a01      	subs	r2, #1
 80033d2:	801a      	strh	r2, [r3, #0]
 80033d4:	2324      	movs	r3, #36	; 0x24
 80033d6:	18fb      	adds	r3, r7, r3
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	029b      	lsls	r3, r3, #10
 80033dc:	b29b      	uxth	r3, r3
 80033de:	4a82      	ldr	r2, [pc, #520]	; (80035e8 <HAL_PCD_EP_Transmit+0x348>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	801a      	strh	r2, [r3, #0]
 80033e8:	e02d      	b.n	8003446 <HAL_PCD_EP_Transmit+0x1a6>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	085a      	lsrs	r2, r3, #1
 80033ee:	2124      	movs	r1, #36	; 0x24
 80033f0:	187b      	adds	r3, r7, r1
 80033f2:	801a      	strh	r2, [r3, #0]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	2201      	movs	r2, #1
 80033f8:	4013      	ands	r3, r2
 80033fa:	d004      	beq.n	8003406 <HAL_PCD_EP_Transmit+0x166>
 80033fc:	187b      	adds	r3, r7, r1
 80033fe:	881a      	ldrh	r2, [r3, #0]
 8003400:	187b      	adds	r3, r7, r1
 8003402:	3201      	adds	r2, #1
 8003404:	801a      	strh	r2, [r3, #0]
 8003406:	2324      	movs	r3, #36	; 0x24
 8003408:	18fb      	adds	r3, r7, r3
 800340a:	881b      	ldrh	r3, [r3, #0]
 800340c:	029b      	lsls	r3, r3, #10
 800340e:	b29a      	uxth	r2, r3
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	801a      	strh	r2, [r3, #0]
 8003414:	e017      	b.n	8003446 <HAL_PCD_EP_Transmit+0x1a6>
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	785b      	ldrb	r3, [r3, #1]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d113      	bne.n	8003446 <HAL_PCD_EP_Transmit+0x1a6>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2250      	movs	r2, #80	; 0x50
 8003424:	5a9b      	ldrh	r3, [r3, r2]
 8003426:	b29b      	uxth	r3, r3
 8003428:	001a      	movs	r2, r3
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	18d3      	adds	r3, r2, r3
 8003432:	001a      	movs	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	18d3      	adds	r3, r2, r3
 800343a:	4a6a      	ldr	r2, [pc, #424]	; (80035e4 <HAL_PCD_EP_Transmit+0x344>)
 800343c:	4694      	mov	ip, r2
 800343e:	4463      	add	r3, ip
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	b292      	uxth	r2, r2
 8003444:	801a      	strh	r2, [r3, #0]
      pmabuffer = ep->pmaaddr1;
 8003446:	2326      	movs	r3, #38	; 0x26
 8003448:	18fb      	adds	r3, r7, r3
 800344a:	69fa      	ldr	r2, [r7, #28]
 800344c:	8912      	ldrh	r2, [r2, #8]
 800344e:	801a      	strh	r2, [r3, #0]
 8003450:	e064      	b.n	800351c <HAL_PCD_EP_Transmit+0x27c>
    }
    else
    {
      /*Set the Double buffer counter for pmabuffer0*/
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	785b      	ldrb	r3, [r3, #1]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d143      	bne.n	80034e2 <HAL_PCD_EP_Transmit+0x242>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2250      	movs	r2, #80	; 0x50
 8003460:	5a9b      	ldrh	r3, [r3, r2]
 8003462:	b29b      	uxth	r3, r3
 8003464:	001a      	movs	r2, r3
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	18d3      	adds	r3, r2, r3
 800346e:	001a      	movs	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	18d3      	adds	r3, r2, r3
 8003476:	4a5a      	ldr	r2, [pc, #360]	; (80035e0 <HAL_PCD_EP_Transmit+0x340>)
 8003478:	4694      	mov	ip, r2
 800347a:	4463      	add	r3, ip
 800347c:	61bb      	str	r3, [r7, #24]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2b3e      	cmp	r3, #62	; 0x3e
 8003482:	d918      	bls.n	80034b6 <HAL_PCD_EP_Transmit+0x216>
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	095a      	lsrs	r2, r3, #5
 8003488:	2122      	movs	r1, #34	; 0x22
 800348a:	187b      	adds	r3, r7, r1
 800348c:	801a      	strh	r2, [r3, #0]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	221f      	movs	r2, #31
 8003492:	4013      	ands	r3, r2
 8003494:	d104      	bne.n	80034a0 <HAL_PCD_EP_Transmit+0x200>
 8003496:	187b      	adds	r3, r7, r1
 8003498:	881a      	ldrh	r2, [r3, #0]
 800349a:	187b      	adds	r3, r7, r1
 800349c:	3a01      	subs	r2, #1
 800349e:	801a      	strh	r2, [r3, #0]
 80034a0:	2322      	movs	r3, #34	; 0x22
 80034a2:	18fb      	adds	r3, r7, r3
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	029b      	lsls	r3, r3, #10
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	4a4f      	ldr	r2, [pc, #316]	; (80035e8 <HAL_PCD_EP_Transmit+0x348>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	801a      	strh	r2, [r3, #0]
 80034b4:	e02d      	b.n	8003512 <HAL_PCD_EP_Transmit+0x272>
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	085a      	lsrs	r2, r3, #1
 80034ba:	2122      	movs	r1, #34	; 0x22
 80034bc:	187b      	adds	r3, r7, r1
 80034be:	801a      	strh	r2, [r3, #0]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	2201      	movs	r2, #1
 80034c4:	4013      	ands	r3, r2
 80034c6:	d004      	beq.n	80034d2 <HAL_PCD_EP_Transmit+0x232>
 80034c8:	187b      	adds	r3, r7, r1
 80034ca:	881a      	ldrh	r2, [r3, #0]
 80034cc:	187b      	adds	r3, r7, r1
 80034ce:	3201      	adds	r2, #1
 80034d0:	801a      	strh	r2, [r3, #0]
 80034d2:	2322      	movs	r3, #34	; 0x22
 80034d4:	18fb      	adds	r3, r7, r3
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	029b      	lsls	r3, r3, #10
 80034da:	b29a      	uxth	r2, r3
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	801a      	strh	r2, [r3, #0]
 80034e0:	e017      	b.n	8003512 <HAL_PCD_EP_Transmit+0x272>
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	785b      	ldrb	r3, [r3, #1]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d113      	bne.n	8003512 <HAL_PCD_EP_Transmit+0x272>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2250      	movs	r2, #80	; 0x50
 80034f0:	5a9b      	ldrh	r3, [r3, r2]
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	001a      	movs	r2, r3
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	18d3      	adds	r3, r2, r3
 80034fe:	001a      	movs	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	18d3      	adds	r3, r2, r3
 8003506:	4a36      	ldr	r2, [pc, #216]	; (80035e0 <HAL_PCD_EP_Transmit+0x340>)
 8003508:	4694      	mov	ip, r2
 800350a:	4463      	add	r3, ip
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	b292      	uxth	r2, r2
 8003510:	801a      	strh	r2, [r3, #0]
      pmabuffer = ep->pmaaddr0;
 8003512:	2326      	movs	r3, #38	; 0x26
 8003514:	18fb      	adds	r3, r7, r3
 8003516:	69fa      	ldr	r2, [r7, #28]
 8003518:	88d2      	ldrh	r2, [r2, #6]
 800351a:	801a      	strh	r2, [r3, #0]
    }

    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6818      	ldr	r0, [r3, #0]
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	6919      	ldr	r1, [r3, #16]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	b29c      	uxth	r4, r3
 8003528:	2326      	movs	r3, #38	; 0x26
 800352a:	18fb      	adds	r3, r7, r3
 800352c:	881a      	ldrh	r2, [r3, #0]
 800352e:	0023      	movs	r3, r4
 8003530:	f000 f9f6 	bl	8003920 <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in)
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	785b      	ldrb	r3, [r3, #1]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d116      	bne.n	800356a <HAL_PCD_EP_Transmit+0x2ca>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	001a      	movs	r2, r3
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	18d3      	adds	r3, r2, r3
 800354a:	881b      	ldrh	r3, [r3, #0]
 800354c:	4a27      	ldr	r2, [pc, #156]	; (80035ec <HAL_PCD_EP_Transmit+0x34c>)
 800354e:	4013      	ands	r3, r2
 8003550:	b29a      	uxth	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	0019      	movs	r1, r3
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	18cb      	adds	r3, r1, r3
 8003560:	4923      	ldr	r1, [pc, #140]	; (80035f0 <HAL_PCD_EP_Transmit+0x350>)
 8003562:	430a      	orrs	r2, r1
 8003564:	b292      	uxth	r2, r2
 8003566:	801a      	strh	r2, [r3, #0]
 8003568:	e019      	b.n	800359e <HAL_PCD_EP_Transmit+0x2fe>
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	785b      	ldrb	r3, [r3, #1]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d115      	bne.n	800359e <HAL_PCD_EP_Transmit+0x2fe>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	001a      	movs	r2, r3
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	18d3      	adds	r3, r2, r3
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	4a1a      	ldr	r2, [pc, #104]	; (80035ec <HAL_PCD_EP_Transmit+0x34c>)
 8003584:	4013      	ands	r3, r2
 8003586:	b29a      	uxth	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	0019      	movs	r1, r3
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	18cb      	adds	r3, r1, r3
 8003596:	4917      	ldr	r1, [pc, #92]	; (80035f4 <HAL_PCD_EP_Transmit+0x354>)
 8003598:	430a      	orrs	r2, r1
 800359a:	b292      	uxth	r2, r2
 800359c:	801a      	strh	r2, [r3, #0]
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	001a      	movs	r2, r3
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	18d3      	adds	r3, r2, r3
 80035ac:	881b      	ldrh	r3, [r3, #0]
 80035ae:	4a12      	ldr	r2, [pc, #72]	; (80035f8 <HAL_PCD_EP_Transmit+0x358>)
 80035b0:	4013      	ands	r3, r2
 80035b2:	b29c      	uxth	r4, r3
 80035b4:	2310      	movs	r3, #16
 80035b6:	4063      	eors	r3, r4
 80035b8:	b29c      	uxth	r4, r3
 80035ba:	2320      	movs	r3, #32
 80035bc:	4063      	eors	r3, r4
 80035be:	b29c      	uxth	r4, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	001a      	movs	r2, r3
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	18d3      	adds	r3, r2, r3
 80035ce:	4a0b      	ldr	r2, [pc, #44]	; (80035fc <HAL_PCD_EP_Transmit+0x35c>)
 80035d0:	4322      	orrs	r2, r4
 80035d2:	b292      	uxth	r2, r2
 80035d4:	801a      	strh	r2, [r3, #0]
     
  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	0018      	movs	r0, r3
 80035da:	46bd      	mov	sp, r7
 80035dc:	b00b      	add	sp, #44	; 0x2c
 80035de:	bd90      	pop	{r4, r7, pc}
 80035e0:	00000402 	.word	0x00000402
 80035e4:	00000406 	.word	0x00000406
 80035e8:	ffff8000 	.word	0xffff8000
 80035ec:	00000f0f 	.word	0x00000f0f
 80035f0:	ffff80c0 	.word	0xffff80c0
 80035f4:	ffffc080 	.word	0xffffc080
 80035f8:	ffff8fbf 	.word	0xffff8fbf
 80035fc:	ffff8080 	.word	0xffff8080

08003600 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003600:	b590      	push	{r4, r7, lr}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	000a      	movs	r2, r1
 800360a:	1cfb      	adds	r3, r7, #3
 800360c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	23f4      	movs	r3, #244	; 0xf4
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	5cd3      	ldrb	r3, [r2, r3]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d101      	bne.n	800361e <HAL_PCD_EP_SetStall+0x1e>
 800361a:	2302      	movs	r3, #2
 800361c:	e096      	b.n	800374c <HAL_PCD_EP_SetStall+0x14c>
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	23f4      	movs	r3, #244	; 0xf4
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	2101      	movs	r1, #1
 8003626:	54d1      	strb	r1, [r2, r3]
   
  if ((0x80U & ep_addr) == 0x80U)
 8003628:	1cfb      	adds	r3, r7, #3
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	b25b      	sxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	da0c      	bge.n	800364c <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8003632:	1cfb      	adds	r3, r7, #3
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	227f      	movs	r2, #127	; 0x7f
 8003638:	401a      	ands	r2, r3
 800363a:	0013      	movs	r3, r2
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	1a9b      	subs	r3, r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	3328      	adds	r3, #40	; 0x28
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	18d3      	adds	r3, r2, r3
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	e00a      	b.n	8003662 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800364c:	1cfb      	adds	r3, r7, #3
 800364e:	781a      	ldrb	r2, [r3, #0]
 8003650:	0013      	movs	r3, r2
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	1a9b      	subs	r3, r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	3309      	adds	r3, #9
 800365a:	33ff      	adds	r3, #255	; 0xff
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	18d3      	adds	r3, r2, r3
 8003660:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2201      	movs	r2, #1
 8003666:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8003668:	1cfb      	adds	r3, r7, #3
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	227f      	movs	r2, #127	; 0x7f
 800366e:	4013      	ands	r3, r2
 8003670:	b2da      	uxtb	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8003676:	1cfb      	adds	r3, r7, #3
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	b25b      	sxtb	r3, r3
 800367c:	b2db      	uxtb	r3, r3
 800367e:	09db      	lsrs	r3, r3, #7
 8003680:	b2db      	uxtb	r3, r3
 8003682:	001a      	movs	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	705a      	strb	r2, [r3, #1]
  
  if (ep->num == 0U)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d11f      	bne.n	80036d0 <HAL_PCD_EP_SetStall+0xd0>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	001a      	movs	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	18d3      	adds	r3, r2, r3
 800369e:	881b      	ldrh	r3, [r3, #0]
 80036a0:	001a      	movs	r2, r3
 80036a2:	4b2c      	ldr	r3, [pc, #176]	; (8003754 <HAL_PCD_EP_SetStall+0x154>)
 80036a4:	401a      	ands	r2, r3
 80036a6:	0014      	movs	r4, r2
 80036a8:	2380      	movs	r3, #128	; 0x80
 80036aa:	015b      	lsls	r3, r3, #5
 80036ac:	4063      	eors	r3, r4
 80036ae:	001c      	movs	r4, r3
 80036b0:	2310      	movs	r3, #16
 80036b2:	4063      	eors	r3, r4
 80036b4:	001c      	movs	r4, r3
 80036b6:	b2a2      	uxth	r2, r4
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	0019      	movs	r1, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	18cb      	adds	r3, r1, r3
 80036c6:	4924      	ldr	r1, [pc, #144]	; (8003758 <HAL_PCD_EP_SetStall+0x158>)
 80036c8:	430a      	orrs	r2, r1
 80036ca:	b292      	uxth	r2, r2
 80036cc:	801a      	strh	r2, [r3, #0]
 80036ce:	e037      	b.n	8003740 <HAL_PCD_EP_SetStall+0x140>
  }
  else
  {
    if (ep->is_in)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	785b      	ldrb	r3, [r3, #1]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d019      	beq.n	800370c <HAL_PCD_EP_SetStall+0x10c>
    {
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	001a      	movs	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	18d3      	adds	r3, r2, r3
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	4a1c      	ldr	r2, [pc, #112]	; (800375c <HAL_PCD_EP_SetStall+0x15c>)
 80036ea:	4013      	ands	r3, r2
 80036ec:	b29c      	uxth	r4, r3
 80036ee:	2310      	movs	r3, #16
 80036f0:	4063      	eors	r3, r4
 80036f2:	b29c      	uxth	r4, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	001a      	movs	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	18d3      	adds	r3, r2, r3
 8003702:	4a15      	ldr	r2, [pc, #84]	; (8003758 <HAL_PCD_EP_SetStall+0x158>)
 8003704:	4322      	orrs	r2, r4
 8003706:	b292      	uxth	r2, r2
 8003708:	801a      	strh	r2, [r3, #0]
 800370a:	e019      	b.n	8003740 <HAL_PCD_EP_SetStall+0x140>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	001a      	movs	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	18d3      	adds	r3, r2, r3
 800371a:	881b      	ldrh	r3, [r3, #0]
 800371c:	4a10      	ldr	r2, [pc, #64]	; (8003760 <HAL_PCD_EP_SetStall+0x160>)
 800371e:	4013      	ands	r3, r2
 8003720:	b29c      	uxth	r4, r3
 8003722:	2380      	movs	r3, #128	; 0x80
 8003724:	015b      	lsls	r3, r3, #5
 8003726:	4063      	eors	r3, r4
 8003728:	b29c      	uxth	r4, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	001a      	movs	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	18d3      	adds	r3, r2, r3
 8003738:	4a07      	ldr	r2, [pc, #28]	; (8003758 <HAL_PCD_EP_SetStall+0x158>)
 800373a:	4322      	orrs	r2, r4
 800373c:	b292      	uxth	r2, r2
 800373e:	801a      	strh	r2, [r3, #0]
    }
  }
  __HAL_UNLOCK(hpcd); 
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	23f4      	movs	r3, #244	; 0xf4
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	2100      	movs	r1, #0
 8003748:	54d1      	strb	r1, [r2, r3]
  
  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	0018      	movs	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	b005      	add	sp, #20
 8003752:	bd90      	pop	{r4, r7, pc}
 8003754:	0000bfbf 	.word	0x0000bfbf
 8003758:	ffff8080 	.word	0xffff8080
 800375c:	ffff8fbf 	.word	0xffff8fbf
 8003760:	ffffbf8f 	.word	0xffffbf8f

08003764 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003764:	b590      	push	{r4, r7, lr}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	000a      	movs	r2, r1
 800376e:	1cfb      	adds	r3, r7, #3
 8003770:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;
  
  if ((0x80U & ep_addr) == 0x80U)
 8003772:	1cfb      	adds	r3, r7, #3
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	b25b      	sxtb	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	da0c      	bge.n	8003796 <HAL_PCD_EP_ClrStall+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800377c:	1cfb      	adds	r3, r7, #3
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	227f      	movs	r2, #127	; 0x7f
 8003782:	401a      	ands	r2, r3
 8003784:	0013      	movs	r3, r2
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	1a9b      	subs	r3, r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	3328      	adds	r3, #40	; 0x28
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	18d3      	adds	r3, r2, r3
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	e00a      	b.n	80037ac <HAL_PCD_EP_ClrStall+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003796:	1cfb      	adds	r3, r7, #3
 8003798:	781a      	ldrb	r2, [r3, #0]
 800379a:	0013      	movs	r3, r2
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	1a9b      	subs	r3, r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	3309      	adds	r3, #9
 80037a4:	33ff      	adds	r3, #255	; 0xff
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	18d3      	adds	r3, r2, r3
 80037aa:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 80037b2:	1cfb      	adds	r3, r7, #3
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	227f      	movs	r2, #127	; 0x7f
 80037b8:	4013      	ands	r3, r2
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 80037c0:	1cfb      	adds	r3, r7, #3
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	b25b      	sxtb	r3, r3
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	09db      	lsrs	r3, r3, #7
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	001a      	movs	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	23f4      	movs	r3, #244	; 0xf4
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	5cd3      	ldrb	r3, [r2, r3]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d101      	bne.n	80037e2 <HAL_PCD_EP_ClrStall+0x7e>
 80037de:	2302      	movs	r3, #2
 80037e0:	e08e      	b.n	8003900 <HAL_PCD_EP_ClrStall+0x19c>
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	23f4      	movs	r3, #244	; 0xf4
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	2101      	movs	r1, #1
 80037ea:	54d1      	strb	r1, [r2, r3]
  
  if (ep->is_in)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	785b      	ldrb	r3, [r3, #1]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d03e      	beq.n	8003872 <HAL_PCD_EP_ClrStall+0x10e>
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	001a      	movs	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	18d3      	adds	r3, r2, r3
 8003802:	881b      	ldrh	r3, [r3, #0]
 8003804:	001a      	movs	r2, r3
 8003806:	2340      	movs	r3, #64	; 0x40
 8003808:	4013      	ands	r3, r2
 800380a:	d015      	beq.n	8003838 <HAL_PCD_EP_ClrStall+0xd4>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	001a      	movs	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	18d3      	adds	r3, r2, r3
 800381a:	881b      	ldrh	r3, [r3, #0]
 800381c:	4a3a      	ldr	r2, [pc, #232]	; (8003908 <HAL_PCD_EP_ClrStall+0x1a4>)
 800381e:	4013      	ands	r3, r2
 8003820:	b29a      	uxth	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	0019      	movs	r1, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	18cb      	adds	r3, r1, r3
 8003830:	4936      	ldr	r1, [pc, #216]	; (800390c <HAL_PCD_EP_ClrStall+0x1a8>)
 8003832:	430a      	orrs	r2, r1
 8003834:	b292      	uxth	r2, r2
 8003836:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	001a      	movs	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	18d3      	adds	r3, r2, r3
 8003846:	881b      	ldrh	r3, [r3, #0]
 8003848:	4a31      	ldr	r2, [pc, #196]	; (8003910 <HAL_PCD_EP_ClrStall+0x1ac>)
 800384a:	4013      	ands	r3, r2
 800384c:	b29c      	uxth	r4, r3
 800384e:	2310      	movs	r3, #16
 8003850:	4063      	eors	r3, r4
 8003852:	b29c      	uxth	r4, r3
 8003854:	2320      	movs	r3, #32
 8003856:	4063      	eors	r3, r4
 8003858:	b29c      	uxth	r4, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	001a      	movs	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	18d3      	adds	r3, r2, r3
 8003868:	4a2a      	ldr	r2, [pc, #168]	; (8003914 <HAL_PCD_EP_ClrStall+0x1b0>)
 800386a:	4322      	orrs	r2, r4
 800386c:	b292      	uxth	r2, r2
 800386e:	801a      	strh	r2, [r3, #0]
 8003870:	e040      	b.n	80038f4 <HAL_PCD_EP_ClrStall+0x190>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	001a      	movs	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	18d3      	adds	r3, r2, r3
 8003880:	881b      	ldrh	r3, [r3, #0]
 8003882:	001a      	movs	r2, r3
 8003884:	2380      	movs	r3, #128	; 0x80
 8003886:	01db      	lsls	r3, r3, #7
 8003888:	4013      	ands	r3, r2
 800388a:	d015      	beq.n	80038b8 <HAL_PCD_EP_ClrStall+0x154>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	001a      	movs	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	18d3      	adds	r3, r2, r3
 800389a:	881b      	ldrh	r3, [r3, #0]
 800389c:	4a1a      	ldr	r2, [pc, #104]	; (8003908 <HAL_PCD_EP_ClrStall+0x1a4>)
 800389e:	4013      	ands	r3, r2
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	0019      	movs	r1, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	18cb      	adds	r3, r1, r3
 80038b0:	4919      	ldr	r1, [pc, #100]	; (8003918 <HAL_PCD_EP_ClrStall+0x1b4>)
 80038b2:	430a      	orrs	r2, r1
 80038b4:	b292      	uxth	r2, r2
 80038b6:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	001a      	movs	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	18d3      	adds	r3, r2, r3
 80038c6:	881b      	ldrh	r3, [r3, #0]
 80038c8:	4a14      	ldr	r2, [pc, #80]	; (800391c <HAL_PCD_EP_ClrStall+0x1b8>)
 80038ca:	4013      	ands	r3, r2
 80038cc:	b29c      	uxth	r4, r3
 80038ce:	2380      	movs	r3, #128	; 0x80
 80038d0:	015b      	lsls	r3, r3, #5
 80038d2:	4063      	eors	r3, r4
 80038d4:	b29c      	uxth	r4, r3
 80038d6:	2380      	movs	r3, #128	; 0x80
 80038d8:	019b      	lsls	r3, r3, #6
 80038da:	4063      	eors	r3, r4
 80038dc:	b29c      	uxth	r4, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	001a      	movs	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	18d3      	adds	r3, r2, r3
 80038ec:	4a09      	ldr	r2, [pc, #36]	; (8003914 <HAL_PCD_EP_ClrStall+0x1b0>)
 80038ee:	4322      	orrs	r2, r4
 80038f0:	b292      	uxth	r2, r2
 80038f2:	801a      	strh	r2, [r3, #0]
  }
  __HAL_UNLOCK(hpcd); 
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	23f4      	movs	r3, #244	; 0xf4
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	2100      	movs	r1, #0
 80038fc:	54d1      	strb	r1, [r2, r3]
    
  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	0018      	movs	r0, r3
 8003902:	46bd      	mov	sp, r7
 8003904:	b005      	add	sp, #20
 8003906:	bd90      	pop	{r4, r7, pc}
 8003908:	00000f0f 	.word	0x00000f0f
 800390c:	ffff80c0 	.word	0xffff80c0
 8003910:	ffff8fbf 	.word	0xffff8fbf
 8003914:	ffff8080 	.word	0xffff8080
 8003918:	ffffc080 	.word	0xffffc080
 800391c:	ffffbf8f 	.word	0xffffbf8f

08003920 <PCD_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003920:	b590      	push	{r4, r7, lr}
 8003922:	b089      	sub	sp, #36	; 0x24
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	0019      	movs	r1, r3
 800392c:	1dbb      	adds	r3, r7, #6
 800392e:	801a      	strh	r2, [r3, #0]
 8003930:	1d3b      	adds	r3, r7, #4
 8003932:	1c0a      	adds	r2, r1, #0
 8003934:	801a      	strh	r2, [r3, #0]
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 8003936:	1d3b      	adds	r3, r7, #4
 8003938:	881b      	ldrh	r3, [r3, #0]
 800393a:	3301      	adds	r3, #1
 800393c:	085b      	lsrs	r3, r3, #1
 800393e:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint16_t temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 8003940:	1dbb      	adds	r3, r7, #6
 8003942:	881a      	ldrh	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	18d3      	adds	r3, r2, r3
 8003948:	2280      	movs	r2, #128	; 0x80
 800394a:	00d2      	lsls	r2, r2, #3
 800394c:	4694      	mov	ip, r2
 800394e:	4463      	add	r3, ip
 8003950:	61bb      	str	r3, [r7, #24]
  
  for (i = n; i != 0; i--)
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	61fb      	str	r3, [r7, #28]
 8003956:	e01e      	b.n	8003996 <PCD_WritePMA+0x76>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	781a      	ldrb	r2, [r3, #0]
 800395c:	2012      	movs	r0, #18
 800395e:	183b      	adds	r3, r7, r0
 8003960:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	3301      	adds	r3, #1
 8003966:	60bb      	str	r3, [r7, #8]
    temp2 = temp1 | ((uint16_t)((uint16_t)  * pbUsrBuf << 8U)) ;
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	b29b      	uxth	r3, r3
 800396e:	021b      	lsls	r3, r3, #8
 8003970:	b299      	uxth	r1, r3
 8003972:	2410      	movs	r4, #16
 8003974:	193b      	adds	r3, r7, r4
 8003976:	183a      	adds	r2, r7, r0
 8003978:	8812      	ldrh	r2, [r2, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	801a      	strh	r2, [r3, #0]
    *pdwVal++ = temp2;
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	1c9a      	adds	r2, r3, #2
 8003982:	61ba      	str	r2, [r7, #24]
 8003984:	193a      	adds	r2, r7, r4
 8003986:	8812      	ldrh	r2, [r2, #0]
 8003988:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	3301      	adds	r3, #1
 800398e:	60bb      	str	r3, [r7, #8]
  for (i = n; i != 0; i--)
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	3b01      	subs	r3, #1
 8003994:	61fb      	str	r3, [r7, #28]
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1dd      	bne.n	8003958 <PCD_WritePMA+0x38>
  }
}
 800399c:	46c0      	nop			; (mov r8, r8)
 800399e:	46c0      	nop			; (mov r8, r8)
 80039a0:	46bd      	mov	sp, r7
 80039a2:	b009      	add	sp, #36	; 0x24
 80039a4:	bd90      	pop	{r4, r7, pc}

080039a6 <PCD_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b088      	sub	sp, #32
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	60f8      	str	r0, [r7, #12]
 80039ae:	60b9      	str	r1, [r7, #8]
 80039b0:	0019      	movs	r1, r3
 80039b2:	1dbb      	adds	r3, r7, #6
 80039b4:	801a      	strh	r2, [r3, #0]
 80039b6:	1d3b      	adds	r3, r7, #4
 80039b8:	1c0a      	adds	r2, r1, #0
 80039ba:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1U;
 80039bc:	1d3b      	adds	r3, r7, #4
 80039be:	881b      	ldrh	r3, [r3, #0]
 80039c0:	085b      	lsrs	r3, r3, #1
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint16_t *pdwVal;
  uint32_t temp;
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 80039c6:	1dbb      	adds	r3, r7, #6
 80039c8:	881a      	ldrh	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	18d3      	adds	r3, r2, r3
 80039ce:	2280      	movs	r2, #128	; 0x80
 80039d0:	00d2      	lsls	r2, r2, #3
 80039d2:	4694      	mov	ip, r2
 80039d4:	4463      	add	r3, ip
 80039d6:	61bb      	str	r3, [r7, #24]
  
  for (i = n; i != 0U; i--)
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	61fb      	str	r3, [r7, #28]
 80039dc:	e014      	b.n	8003a08 <PCD_ReadPMA+0x62>
  {
    temp = *pdwVal++;
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	1c9a      	adds	r2, r3, #2
 80039e2:	61ba      	str	r2, [r7, #24]
 80039e4:	881b      	ldrh	r3, [r3, #0]
 80039e6:	613b      	str	r3, [r7, #16]
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	1c5a      	adds	r2, r3, #1
 80039ec:	60ba      	str	r2, [r7, #8]
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	b2d2      	uxtb	r2, r2
 80039f2:	701a      	strb	r2, [r3, #0]
    *pbUsrBuf++ = ((temp >> 8) & 0xFF);
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	0a19      	lsrs	r1, r3, #8
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	1c5a      	adds	r2, r3, #1
 80039fc:	60ba      	str	r2, [r7, #8]
 80039fe:	b2ca      	uxtb	r2, r1
 8003a00:	701a      	strb	r2, [r3, #0]
  for (i = n; i != 0U; i--)
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	3b01      	subs	r3, #1
 8003a06:	61fb      	str	r3, [r7, #28]
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1e7      	bne.n	80039de <PCD_ReadPMA+0x38>
  }
  
  if (wNBytes % 2)
 8003a0e:	1d3b      	adds	r3, r7, #4
 8003a10:	881b      	ldrh	r3, [r3, #0]
 8003a12:	2201      	movs	r2, #1
 8003a14:	4013      	ands	r3, r2
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00a      	beq.n	8003a32 <PCD_ReadPMA+0x8c>
  {
    temp = *pdwVal++;
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	1c9a      	adds	r2, r3, #2
 8003a20:	61ba      	str	r2, [r7, #24]
 8003a22:	881b      	ldrh	r3, [r3, #0]
 8003a24:	613b      	str	r3, [r7, #16]
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	1c5a      	adds	r2, r3, #1
 8003a2a:	60ba      	str	r2, [r7, #8]
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	b2d2      	uxtb	r2, r2
 8003a30:	701a      	strb	r2, [r3, #0]
  }
}
 8003a32:	46c0      	nop			; (mov r8, r8)
 8003a34:	46bd      	mov	sp, r7
 8003a36:	b008      	add	sp, #32
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003a3c:	b590      	push	{r4, r7, lr}
 8003a3e:	b089      	sub	sp, #36	; 0x24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count=0U;
 8003a44:	2316      	movs	r3, #22
 8003a46:	18fb      	adds	r3, r7, r3
 8003a48:	2200      	movs	r2, #0
 8003a4a:	801a      	strh	r2, [r3, #0]
  uint8_t EPindex;
  __IO uint16_t wIstr;  
  __IO uint16_t wEPVal = 0U;
 8003a4c:	230c      	movs	r3, #12
 8003a4e:	18fb      	adds	r3, r7, r3
 8003a50:	2200      	movs	r2, #0
 8003a52:	801a      	strh	r2, [r3, #0]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0U)
 8003a54:	e337      	b.n	80040c6 <PCD_EP_ISR_Handler+0x68a>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003a56:	200e      	movs	r0, #14
 8003a58:	183b      	adds	r3, r7, r0
 8003a5a:	881b      	ldrh	r3, [r3, #0]
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	241f      	movs	r4, #31
 8003a62:	193b      	adds	r3, r7, r4
 8003a64:	210f      	movs	r1, #15
 8003a66:	400a      	ands	r2, r1
 8003a68:	701a      	strb	r2, [r3, #0]
    
    if (EPindex == 0U)
 8003a6a:	193b      	adds	r3, r7, r4
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d000      	beq.n	8003a74 <PCD_EP_ISR_Handler+0x38>
 8003a72:	e133      	b.n	8003cdc <PCD_EP_ISR_Handler+0x2a0>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003a74:	183b      	adds	r3, r7, r0
 8003a76:	881b      	ldrh	r3, [r3, #0]
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	001a      	movs	r2, r3
 8003a7c:	2310      	movs	r3, #16
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d14c      	bne.n	8003b1c <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	881a      	ldrh	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	0019      	movs	r1, r3
 8003a8e:	4bdb      	ldr	r3, [pc, #876]	; (8003dfc <PCD_EP_ISR_Handler+0x3c0>)
 8003a90:	4013      	ands	r3, r2
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	800b      	strh	r3, [r1, #0]
        ep = &hpcd->IN_ep[0];
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3328      	adds	r3, #40	; 0x28
 8003a9a:	61bb      	str	r3, [r7, #24]
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2250      	movs	r2, #80	; 0x50
 8003aa2:	5a9b      	ldrh	r3, [r3, r2]
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	001a      	movs	r2, r3
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	18d3      	adds	r3, r2, r3
 8003ab0:	001a      	movs	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	18d3      	adds	r3, r2, r3
 8003ab8:	4ad1      	ldr	r2, [pc, #836]	; (8003e00 <PCD_EP_ISR_Handler+0x3c4>)
 8003aba:	4694      	mov	ip, r2
 8003abc:	4463      	add	r3, ip
 8003abe:	881b      	ldrh	r3, [r3, #0]
 8003ac0:	059b      	lsls	r3, r3, #22
 8003ac2:	0d9a      	lsrs	r2, r3, #22
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	619a      	str	r2, [r3, #24]
        ep->xfer_buff += ep->xfer_count;
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	691a      	ldr	r2, [r3, #16]
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	18d2      	adds	r2, r2, r3
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	611a      	str	r2, [r3, #16]
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2100      	movs	r1, #0
 8003ada:	0018      	movs	r0, r3
 8003adc:	f003 f966 	bl	8006dac <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2224      	movs	r2, #36	; 0x24
 8003ae4:	5c9b      	ldrb	r3, [r3, r2]
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d100      	bne.n	8003aee <PCD_EP_ISR_Handler+0xb2>
 8003aec:	e2eb      	b.n	80040c6 <PCD_EP_ISR_Handler+0x68a>
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d000      	beq.n	8003af8 <PCD_EP_ISR_Handler+0xbc>
 8003af6:	e2e6      	b.n	80040c6 <PCD_EP_ISR_Handler+0x68a>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2224      	movs	r2, #36	; 0x24
 8003afc:	5c9b      	ldrb	r3, [r3, r2]
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2280      	movs	r2, #128	; 0x80
 8003b02:	4252      	negs	r2, r2
 8003b04:	4313      	orrs	r3, r2
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	b291      	uxth	r1, r2
 8003b0e:	224c      	movs	r2, #76	; 0x4c
 8003b10:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2224      	movs	r2, #36	; 0x24
 8003b16:	2100      	movs	r1, #0
 8003b18:	5499      	strb	r1, [r3, r2]
 8003b1a:	e2d4      	b.n	80040c6 <PCD_EP_ISR_Handler+0x68a>
      {
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3309      	adds	r3, #9
 8003b20:	33ff      	adds	r3, #255	; 0xff
 8003b22:	61bb      	str	r3, [r7, #24]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	881a      	ldrh	r2, [r3, #0]
 8003b2a:	210c      	movs	r1, #12
 8003b2c:	187b      	adds	r3, r7, r1
 8003b2e:	801a      	strh	r2, [r3, #0]
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003b30:	187b      	adds	r3, r7, r1
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	001a      	movs	r2, r3
 8003b38:	2380      	movs	r3, #128	; 0x80
 8003b3a:	011b      	lsls	r3, r3, #4
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	d031      	beq.n	8003ba4 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2250      	movs	r2, #80	; 0x50
 8003b46:	5a9b      	ldrh	r3, [r3, r2]
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	001a      	movs	r2, r3
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	18d3      	adds	r3, r2, r3
 8003b54:	001a      	movs	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	18d3      	adds	r3, r2, r3
 8003b5c:	4aa9      	ldr	r2, [pc, #676]	; (8003e04 <PCD_EP_ISR_Handler+0x3c8>)
 8003b5e:	4694      	mov	ip, r2
 8003b60:	4463      	add	r3, ip
 8003b62:	881b      	ldrh	r3, [r3, #0]
 8003b64:	059b      	lsls	r3, r3, #22
 8003b66:	0d9a      	lsrs	r2, r3, #22
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	619a      	str	r2, [r3, #24]
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)(void*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6818      	ldr	r0, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	33ed      	adds	r3, #237	; 0xed
 8003b74:	33ff      	adds	r3, #255	; 0xff
 8003b76:	0019      	movs	r1, r3
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	889a      	ldrh	r2, [r3, #4]
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	f7ff ff10 	bl	80039a6 <PCD_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	881a      	ldrh	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	0019      	movs	r1, r3
 8003b92:	4b9d      	ldr	r3, [pc, #628]	; (8003e08 <PCD_EP_ISR_Handler+0x3cc>)
 8003b94:	4013      	ands	r3, r2
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	800b      	strh	r3, [r1, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	0018      	movs	r0, r3
 8003b9e:	f003 f8ed 	bl	8006d7c <HAL_PCD_SetupStageCallback>
 8003ba2:	e290      	b.n	80040c6 <PCD_EP_ISR_Handler+0x68a>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003ba4:	230c      	movs	r3, #12
 8003ba6:	18fb      	adds	r3, r7, r3
 8003ba8:	881b      	ldrh	r3, [r3, #0]
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	b21b      	sxth	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	db00      	blt.n	8003bb4 <PCD_EP_ISR_Handler+0x178>
 8003bb2:	e288      	b.n	80040c6 <PCD_EP_ISR_Handler+0x68a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	881a      	ldrh	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	0019      	movs	r1, r3
 8003bc0:	4b91      	ldr	r3, [pc, #580]	; (8003e08 <PCD_EP_ISR_Handler+0x3cc>)
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	800b      	strh	r3, [r1, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2250      	movs	r2, #80	; 0x50
 8003bce:	5a9b      	ldrh	r3, [r3, r2]
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	001a      	movs	r2, r3
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	18d3      	adds	r3, r2, r3
 8003bdc:	001a      	movs	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	18d3      	adds	r3, r2, r3
 8003be4:	4a87      	ldr	r2, [pc, #540]	; (8003e04 <PCD_EP_ISR_Handler+0x3c8>)
 8003be6:	4694      	mov	ip, r2
 8003be8:	4463      	add	r3, ip
 8003bea:	881b      	ldrh	r3, [r3, #0]
 8003bec:	059b      	lsls	r3, r3, #22
 8003bee:	0d9a      	lsrs	r2, r3, #22
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	619a      	str	r2, [r3, #24]
          
          if (ep->xfer_count != 0U)
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d011      	beq.n	8003c20 <PCD_EP_ISR_Handler+0x1e4>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6818      	ldr	r0, [r3, #0]
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	6919      	ldr	r1, [r3, #16]
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	889a      	ldrh	r2, [r3, #4]
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	f7ff feca 	bl	80039a6 <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	691a      	ldr	r2, [r3, #16]
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	18d2      	adds	r2, r2, r3
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	611a      	str	r2, [r3, #16]
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2100      	movs	r1, #0
 8003c24:	0018      	movs	r0, r3
 8003c26:	f003 f8b3 	bl	8006d90 <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2250      	movs	r2, #80	; 0x50
 8003c30:	5a9b      	ldrh	r3, [r3, r2]
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	001a      	movs	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	18d3      	adds	r3, r2, r3
 8003c3c:	4a71      	ldr	r2, [pc, #452]	; (8003e04 <PCD_EP_ISR_Handler+0x3c8>)
 8003c3e:	4694      	mov	ip, r2
 8003c40:	4463      	add	r3, ip
 8003c42:	613b      	str	r3, [r7, #16]
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	2b3e      	cmp	r3, #62	; 0x3e
 8003c4a:	d91a      	bls.n	8003c82 <PCD_EP_ISR_Handler+0x246>
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	095a      	lsrs	r2, r3, #5
 8003c52:	2114      	movs	r1, #20
 8003c54:	187b      	adds	r3, r7, r1
 8003c56:	801a      	strh	r2, [r3, #0]
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	221f      	movs	r2, #31
 8003c5e:	4013      	ands	r3, r2
 8003c60:	d104      	bne.n	8003c6c <PCD_EP_ISR_Handler+0x230>
 8003c62:	187b      	adds	r3, r7, r1
 8003c64:	881a      	ldrh	r2, [r3, #0]
 8003c66:	187b      	adds	r3, r7, r1
 8003c68:	3a01      	subs	r2, #1
 8003c6a:	801a      	strh	r2, [r3, #0]
 8003c6c:	2314      	movs	r3, #20
 8003c6e:	18fb      	adds	r3, r7, r3
 8003c70:	881b      	ldrh	r3, [r3, #0]
 8003c72:	029b      	lsls	r3, r3, #10
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	4a65      	ldr	r2, [pc, #404]	; (8003e0c <PCD_EP_ISR_Handler+0x3d0>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	801a      	strh	r2, [r3, #0]
 8003c80:	e016      	b.n	8003cb0 <PCD_EP_ISR_Handler+0x274>
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	085a      	lsrs	r2, r3, #1
 8003c88:	2114      	movs	r1, #20
 8003c8a:	187b      	adds	r3, r7, r1
 8003c8c:	801a      	strh	r2, [r3, #0]
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	2201      	movs	r2, #1
 8003c94:	4013      	ands	r3, r2
 8003c96:	d004      	beq.n	8003ca2 <PCD_EP_ISR_Handler+0x266>
 8003c98:	187b      	adds	r3, r7, r1
 8003c9a:	881a      	ldrh	r2, [r3, #0]
 8003c9c:	187b      	adds	r3, r7, r1
 8003c9e:	3201      	adds	r2, #1
 8003ca0:	801a      	strh	r2, [r3, #0]
 8003ca2:	2314      	movs	r3, #20
 8003ca4:	18fb      	adds	r3, r7, r3
 8003ca6:	881b      	ldrh	r3, [r3, #0]
 8003ca8:	029b      	lsls	r3, r3, #10
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	881b      	ldrh	r3, [r3, #0]
 8003cb6:	4a56      	ldr	r2, [pc, #344]	; (8003e10 <PCD_EP_ISR_Handler+0x3d4>)
 8003cb8:	4013      	ands	r3, r2
 8003cba:	b29c      	uxth	r4, r3
 8003cbc:	2380      	movs	r3, #128	; 0x80
 8003cbe:	015b      	lsls	r3, r3, #5
 8003cc0:	4063      	eors	r3, r4
 8003cc2:	b29c      	uxth	r4, r3
 8003cc4:	2380      	movs	r3, #128	; 0x80
 8003cc6:	019b      	lsls	r3, r3, #6
 8003cc8:	4063      	eors	r3, r4
 8003cca:	b29c      	uxth	r4, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	001a      	movs	r2, r3
 8003cd2:	4b50      	ldr	r3, [pc, #320]	; (8003e14 <PCD_EP_ISR_Handler+0x3d8>)
 8003cd4:	4323      	orrs	r3, r4
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	8013      	strh	r3, [r2, #0]
 8003cda:	e1f4      	b.n	80040c6 <PCD_EP_ISR_Handler+0x68a>
    {
      
      /* Decode and service non control endpoints interrupt  */
      
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	001a      	movs	r2, r3
 8003ce2:	211f      	movs	r1, #31
 8003ce4:	187b      	adds	r3, r7, r1
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	18d3      	adds	r3, r2, r3
 8003cec:	881a      	ldrh	r2, [r3, #0]
 8003cee:	200c      	movs	r0, #12
 8003cf0:	183b      	adds	r3, r7, r0
 8003cf2:	801a      	strh	r2, [r3, #0]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003cf4:	183b      	adds	r3, r7, r0
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	b21b      	sxth	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	db00      	blt.n	8003d02 <PCD_EP_ISR_Handler+0x2c6>
 8003d00:	e0ef      	b.n	8003ee2 <PCD_EP_ISR_Handler+0x4a6>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	001a      	movs	r2, r3
 8003d08:	0008      	movs	r0, r1
 8003d0a:	183b      	adds	r3, r7, r0
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	18d3      	adds	r3, r2, r3
 8003d12:	881a      	ldrh	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	0019      	movs	r1, r3
 8003d1a:	183b      	adds	r3, r7, r0
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	18cb      	adds	r3, r1, r3
 8003d22:	4939      	ldr	r1, [pc, #228]	; (8003e08 <PCD_EP_ISR_Handler+0x3cc>)
 8003d24:	400a      	ands	r2, r1
 8003d26:	b292      	uxth	r2, r2
 8003d28:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[EPindex];
 8003d2a:	183b      	adds	r3, r7, r0
 8003d2c:	781a      	ldrb	r2, [r3, #0]
 8003d2e:	0013      	movs	r3, r2
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	1a9b      	subs	r3, r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	3309      	adds	r3, #9
 8003d38:	33ff      	adds	r3, #255	; 0xff
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	18d3      	adds	r3, r2, r3
 8003d3e:	61bb      	str	r3, [r7, #24]
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	7a9b      	ldrb	r3, [r3, #10]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d126      	bne.n	8003d96 <PCD_EP_ISR_Handler+0x35a>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2250      	movs	r2, #80	; 0x50
 8003d4e:	5a9b      	ldrh	r3, [r3, r2]
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	001a      	movs	r2, r3
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	18d3      	adds	r3, r2, r3
 8003d5c:	001a      	movs	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	18d3      	adds	r3, r2, r3
 8003d64:	4a27      	ldr	r2, [pc, #156]	; (8003e04 <PCD_EP_ISR_Handler+0x3c8>)
 8003d66:	4694      	mov	ip, r2
 8003d68:	4463      	add	r3, ip
 8003d6a:	881a      	ldrh	r2, [r3, #0]
 8003d6c:	2416      	movs	r4, #22
 8003d6e:	193b      	adds	r3, r7, r4
 8003d70:	0592      	lsls	r2, r2, #22
 8003d72:	0d92      	lsrs	r2, r2, #22
 8003d74:	801a      	strh	r2, [r3, #0]
          if (count != 0U)
 8003d76:	193b      	adds	r3, r7, r4
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d100      	bne.n	8003d80 <PCD_EP_ISR_Handler+0x344>
 8003d7e:	e086      	b.n	8003e8e <PCD_EP_ISR_Handler+0x452>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6818      	ldr	r0, [r3, #0]
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	6919      	ldr	r1, [r3, #16]
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	889a      	ldrh	r2, [r3, #4]
 8003d8c:	193b      	adds	r3, r7, r4
 8003d8e:	881b      	ldrh	r3, [r3, #0]
 8003d90:	f7ff fe09 	bl	80039a6 <PCD_ReadPMA>
 8003d94:	e07b      	b.n	8003e8e <PCD_EP_ISR_Handler+0x452>
          }
        }
        else
        {
          
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_RX) == USB_EP_DTOG_RX)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	001a      	movs	r2, r3
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	18d3      	adds	r3, r2, r3
 8003da4:	881b      	ldrh	r3, [r3, #0]
 8003da6:	001a      	movs	r2, r3
 8003da8:	2380      	movs	r3, #128	; 0x80
 8003daa:	01db      	lsls	r3, r3, #7
 8003dac:	4013      	ands	r3, r2
 8003dae:	d033      	beq.n	8003e18 <PCD_EP_ISR_Handler+0x3dc>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2250      	movs	r2, #80	; 0x50
 8003db6:	5a9b      	ldrh	r3, [r3, r2]
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	001a      	movs	r2, r3
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	18d3      	adds	r3, r2, r3
 8003dc4:	001a      	movs	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	18d3      	adds	r3, r2, r3
 8003dcc:	4a0c      	ldr	r2, [pc, #48]	; (8003e00 <PCD_EP_ISR_Handler+0x3c4>)
 8003dce:	4694      	mov	ip, r2
 8003dd0:	4463      	add	r3, ip
 8003dd2:	881a      	ldrh	r2, [r3, #0]
 8003dd4:	2416      	movs	r4, #22
 8003dd6:	193b      	adds	r3, r7, r4
 8003dd8:	0592      	lsls	r2, r2, #22
 8003dda:	0d92      	lsrs	r2, r2, #22
 8003ddc:	801a      	strh	r2, [r3, #0]
            if (count != 0U)
 8003dde:	193b      	adds	r3, r7, r4
 8003de0:	881b      	ldrh	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d03d      	beq.n	8003e62 <PCD_EP_ISR_Handler+0x426>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6818      	ldr	r0, [r3, #0]
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	6919      	ldr	r1, [r3, #16]
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	88da      	ldrh	r2, [r3, #6]
 8003df2:	193b      	adds	r3, r7, r4
 8003df4:	881b      	ldrh	r3, [r3, #0]
 8003df6:	f7ff fdd6 	bl	80039a6 <PCD_ReadPMA>
 8003dfa:	e032      	b.n	8003e62 <PCD_EP_ISR_Handler+0x426>
 8003dfc:	ffff8f0f 	.word	0xffff8f0f
 8003e00:	00000402 	.word	0x00000402
 8003e04:	00000406 	.word	0x00000406
 8003e08:	00000f8f 	.word	0x00000f8f
 8003e0c:	ffff8000 	.word	0xffff8000
 8003e10:	ffffbf8f 	.word	0xffffbf8f
 8003e14:	ffff8080 	.word	0xffff8080
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2250      	movs	r2, #80	; 0x50
 8003e1e:	5a9b      	ldrh	r3, [r3, r2]
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	001a      	movs	r2, r3
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	00db      	lsls	r3, r3, #3
 8003e2a:	18d3      	adds	r3, r2, r3
 8003e2c:	001a      	movs	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	18d3      	adds	r3, r2, r3
 8003e34:	4aad      	ldr	r2, [pc, #692]	; (80040ec <PCD_EP_ISR_Handler+0x6b0>)
 8003e36:	4694      	mov	ip, r2
 8003e38:	4463      	add	r3, ip
 8003e3a:	881a      	ldrh	r2, [r3, #0]
 8003e3c:	2416      	movs	r4, #22
 8003e3e:	193b      	adds	r3, r7, r4
 8003e40:	0592      	lsls	r2, r2, #22
 8003e42:	0d92      	lsrs	r2, r2, #22
 8003e44:	801a      	strh	r2, [r3, #0]
            if (count != 0U)
 8003e46:	193b      	adds	r3, r7, r4
 8003e48:	881b      	ldrh	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d009      	beq.n	8003e62 <PCD_EP_ISR_Handler+0x426>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6818      	ldr	r0, [r3, #0]
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	6919      	ldr	r1, [r3, #16]
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	891a      	ldrh	r2, [r3, #8]
 8003e5a:	193b      	adds	r3, r7, r4
 8003e5c:	881b      	ldrh	r3, [r3, #0]
 8003e5e:	f7ff fda2 	bl	80039a6 <PCD_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT)  
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	001a      	movs	r2, r3
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	18d3      	adds	r3, r2, r3
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	4a9f      	ldr	r2, [pc, #636]	; (80040f0 <PCD_EP_ISR_Handler+0x6b4>)
 8003e74:	4013      	ands	r3, r2
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	0019      	movs	r1, r3
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	18cb      	adds	r3, r1, r3
 8003e86:	499b      	ldr	r1, [pc, #620]	; (80040f4 <PCD_EP_ISR_Handler+0x6b8>)
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	b292      	uxth	r2, r2
 8003e8c:	801a      	strh	r2, [r3, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	699a      	ldr	r2, [r3, #24]
 8003e92:	2116      	movs	r1, #22
 8003e94:	187b      	adds	r3, r7, r1
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	18d2      	adds	r2, r2, r3
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	619a      	str	r2, [r3, #24]
        ep->xfer_buff+=count;
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	691a      	ldr	r2, [r3, #16]
 8003ea2:	187b      	adds	r3, r7, r1
 8003ea4:	881b      	ldrh	r3, [r3, #0]
 8003ea6:	18d2      	adds	r2, r2, r3
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	611a      	str	r2, [r3, #16]
       
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d005      	beq.n	8003ec0 <PCD_EP_ISR_Handler+0x484>
 8003eb4:	187b      	adds	r3, r7, r1
 8003eb6:	881a      	ldrh	r2, [r3, #0]
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d207      	bcs.n	8003ed0 <PCD_EP_ISR_Handler+0x494>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	781a      	ldrb	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	0011      	movs	r1, r2
 8003ec8:	0018      	movs	r0, r3
 8003eca:	f002 ff61 	bl	8006d90 <HAL_PCD_DataOutStageCallback>
 8003ece:	e008      	b.n	8003ee2 <PCD_EP_ISR_Handler+0x4a6>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	7819      	ldrb	r1, [r3, #0]
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	691a      	ldr	r2, [r3, #16]
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f7ff f84f 	bl	8002f80 <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003ee2:	230c      	movs	r3, #12
 8003ee4:	18fb      	adds	r3, r7, r3
 8003ee6:	881b      	ldrh	r3, [r3, #0]
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	001a      	movs	r2, r3
 8003eec:	2380      	movs	r3, #128	; 0x80
 8003eee:	4013      	ands	r3, r2
 8003ef0:	d100      	bne.n	8003ef4 <PCD_EP_ISR_Handler+0x4b8>
 8003ef2:	e0e8      	b.n	80040c6 <PCD_EP_ISR_Handler+0x68a>
      {
        ep = &hpcd->IN_ep[EPindex];
 8003ef4:	211f      	movs	r1, #31
 8003ef6:	187b      	adds	r3, r7, r1
 8003ef8:	781a      	ldrb	r2, [r3, #0]
 8003efa:	0013      	movs	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	1a9b      	subs	r3, r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	3328      	adds	r3, #40	; 0x28
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	18d3      	adds	r3, r2, r3
 8003f08:	61bb      	str	r3, [r7, #24]
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	001a      	movs	r2, r3
 8003f10:	0008      	movs	r0, r1
 8003f12:	187b      	adds	r3, r7, r1
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	18d3      	adds	r3, r2, r3
 8003f1a:	881a      	ldrh	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	0019      	movs	r1, r3
 8003f22:	183b      	adds	r3, r7, r0
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	18cb      	adds	r3, r1, r3
 8003f2a:	4973      	ldr	r1, [pc, #460]	; (80040f8 <PCD_EP_ISR_Handler+0x6bc>)
 8003f2c:	400a      	ands	r2, r1
 8003f2e:	b292      	uxth	r2, r2
 8003f30:	801a      	strh	r2, [r3, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	7a9b      	ldrb	r3, [r3, #10]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d126      	bne.n	8003f88 <PCD_EP_ISR_Handler+0x54c>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2250      	movs	r2, #80	; 0x50
 8003f40:	5a9b      	ldrh	r3, [r3, r2]
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	001a      	movs	r2, r3
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	18d3      	adds	r3, r2, r3
 8003f4e:	001a      	movs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	18d3      	adds	r3, r2, r3
 8003f56:	4a69      	ldr	r2, [pc, #420]	; (80040fc <PCD_EP_ISR_Handler+0x6c0>)
 8003f58:	4694      	mov	ip, r2
 8003f5a:	4463      	add	r3, ip
 8003f5c:	881b      	ldrh	r3, [r3, #0]
 8003f5e:	059b      	lsls	r3, r3, #22
 8003f60:	0d9a      	lsrs	r2, r3, #22
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	619a      	str	r2, [r3, #24]
          if (ep->xfer_count != 0)
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d100      	bne.n	8003f70 <PCD_EP_ISR_Handler+0x534>
 8003f6e:	e078      	b.n	8004062 <PCD_EP_ISR_Handler+0x626>
          {
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6818      	ldr	r0, [r3, #0]
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	6919      	ldr	r1, [r3, #16]
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	889a      	ldrh	r2, [r3, #4]
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	f7ff fccd 	bl	8003920 <PCD_WritePMA>
 8003f86:	e06c      	b.n	8004062 <PCD_EP_ISR_Handler+0x626>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	001a      	movs	r2, r3
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	18d3      	adds	r3, r2, r3
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	001a      	movs	r2, r3
 8003f9a:	2340      	movs	r3, #64	; 0x40
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	d025      	beq.n	8003fec <PCD_EP_ISR_Handler+0x5b0>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2250      	movs	r2, #80	; 0x50
 8003fa6:	5a9b      	ldrh	r3, [r3, r2]
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	001a      	movs	r2, r3
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	00db      	lsls	r3, r3, #3
 8003fb2:	18d3      	adds	r3, r2, r3
 8003fb4:	001a      	movs	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	18d3      	adds	r3, r2, r3
 8003fbc:	4a4f      	ldr	r2, [pc, #316]	; (80040fc <PCD_EP_ISR_Handler+0x6c0>)
 8003fbe:	4694      	mov	ip, r2
 8003fc0:	4463      	add	r3, ip
 8003fc2:	881b      	ldrh	r3, [r3, #0]
 8003fc4:	059b      	lsls	r3, r3, #22
 8003fc6:	0d9a      	lsrs	r2, r3, #22
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	619a      	str	r2, [r3, #24]
            if (ep->xfer_count != 0U)
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d030      	beq.n	8004036 <PCD_EP_ISR_Handler+0x5fa>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6818      	ldr	r0, [r3, #0]
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	6919      	ldr	r1, [r3, #16]
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	88da      	ldrh	r2, [r3, #6]
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	f7ff fc9b 	bl	8003920 <PCD_WritePMA>
 8003fea:	e024      	b.n	8004036 <PCD_EP_ISR_Handler+0x5fa>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2250      	movs	r2, #80	; 0x50
 8003ff2:	5a9b      	ldrh	r3, [r3, r2]
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	001a      	movs	r2, r3
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	18d3      	adds	r3, r2, r3
 8004000:	001a      	movs	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	18d3      	adds	r3, r2, r3
 8004008:	4a38      	ldr	r2, [pc, #224]	; (80040ec <PCD_EP_ISR_Handler+0x6b0>)
 800400a:	4694      	mov	ip, r2
 800400c:	4463      	add	r3, ip
 800400e:	881b      	ldrh	r3, [r3, #0]
 8004010:	059b      	lsls	r3, r3, #22
 8004012:	0d9a      	lsrs	r2, r3, #22
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	619a      	str	r2, [r3, #24]
            if (ep->xfer_count != 0U)
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00a      	beq.n	8004036 <PCD_EP_ISR_Handler+0x5fa>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6818      	ldr	r0, [r3, #0]
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	6919      	ldr	r1, [r3, #16]
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	891a      	ldrh	r2, [r3, #8]
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	b29b      	uxth	r3, r3
 8004032:	f7ff fc75 	bl	8003920 <PCD_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN) 
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	001a      	movs	r2, r3
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	18d3      	adds	r3, r2, r3
 8004044:	881b      	ldrh	r3, [r3, #0]
 8004046:	4a2a      	ldr	r2, [pc, #168]	; (80040f0 <PCD_EP_ISR_Handler+0x6b4>)
 8004048:	4013      	ands	r3, r2
 800404a:	b29a      	uxth	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	0019      	movs	r1, r3
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	18cb      	adds	r3, r1, r3
 800405a:	4929      	ldr	r1, [pc, #164]	; (8004100 <PCD_EP_ISR_Handler+0x6c4>)
 800405c:	430a      	orrs	r2, r1
 800405e:	b292      	uxth	r2, r2
 8004060:	801a      	strh	r2, [r3, #0]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2250      	movs	r2, #80	; 0x50
 8004068:	5a9b      	ldrh	r3, [r3, r2]
 800406a:	b29b      	uxth	r3, r3
 800406c:	001a      	movs	r2, r3
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	18d3      	adds	r3, r2, r3
 8004076:	001a      	movs	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	18d3      	adds	r3, r2, r3
 800407e:	4a1f      	ldr	r2, [pc, #124]	; (80040fc <PCD_EP_ISR_Handler+0x6c0>)
 8004080:	4694      	mov	ip, r2
 8004082:	4463      	add	r3, ip
 8004084:	881b      	ldrh	r3, [r3, #0]
 8004086:	059b      	lsls	r3, r3, #22
 8004088:	0d9a      	lsrs	r2, r3, #22
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	619a      	str	r2, [r3, #24]
        ep->xfer_buff+=ep->xfer_count;
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	691a      	ldr	r2, [r3, #16]
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	18d2      	adds	r2, r2, r3
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	611a      	str	r2, [r3, #16]
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d107      	bne.n	80040b4 <PCD_EP_ISR_Handler+0x678>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	781a      	ldrb	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	0011      	movs	r1, r2
 80040ac:	0018      	movs	r0, r3
 80040ae:	f002 fe7d 	bl	8006dac <HAL_PCD_DataInStageCallback>
 80040b2:	e008      	b.n	80040c6 <PCD_EP_ISR_Handler+0x68a>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	7819      	ldrb	r1, [r3, #0]
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	691a      	ldr	r2, [r3, #16]
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7ff f8ed 	bl	80032a0 <HAL_PCD_EP_Transmit>
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0U)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2244      	movs	r2, #68	; 0x44
 80040cc:	5a9b      	ldrh	r3, [r3, r2]
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	230e      	movs	r3, #14
 80040d2:	18fb      	adds	r3, r7, r3
 80040d4:	1c11      	adds	r1, r2, #0
 80040d6:	8019      	strh	r1, [r3, #0]
 80040d8:	b213      	sxth	r3, r2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	da00      	bge.n	80040e0 <PCD_EP_ISR_Handler+0x6a4>
 80040de:	e4ba      	b.n	8003a56 <PCD_EP_ISR_Handler+0x1a>
        }
      } 
    }
  }
  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	0018      	movs	r0, r3
 80040e4:	46bd      	mov	sp, r7
 80040e6:	b009      	add	sp, #36	; 0x24
 80040e8:	bd90      	pop	{r4, r7, pc}
 80040ea:	46c0      	nop			; (mov r8, r8)
 80040ec:	00000406 	.word	0x00000406
 80040f0:	00000f0f 	.word	0x00000f0f
 80040f4:	ffff80c0 	.word	0xffff80c0
 80040f8:	ffff8f0f 	.word	0xffff8f0f
 80040fc:	00000402 	.word	0x00000402
 8004100:	ffffc080 	.word	0xffffc080

08004104 <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                        uint16_t ep_addr,
                        uint16_t ep_kind,
                        uint32_t pmaadress)

{
 8004104:	b590      	push	{r4, r7, lr}
 8004106:	b087      	sub	sp, #28
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	0008      	movs	r0, r1
 800410e:	0011      	movs	r1, r2
 8004110:	607b      	str	r3, [r7, #4]
 8004112:	240a      	movs	r4, #10
 8004114:	193b      	adds	r3, r7, r4
 8004116:	1c02      	adds	r2, r0, #0
 8004118:	801a      	strh	r2, [r3, #0]
 800411a:	2308      	movs	r3, #8
 800411c:	18fb      	adds	r3, r7, r3
 800411e:	1c0a      	adds	r2, r1, #0
 8004120:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004122:	0021      	movs	r1, r4
 8004124:	187b      	adds	r3, r7, r1
 8004126:	881b      	ldrh	r3, [r3, #0]
 8004128:	2280      	movs	r2, #128	; 0x80
 800412a:	4013      	ands	r3, r2
 800412c:	b29b      	uxth	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00c      	beq.n	800414c <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8004132:	187b      	adds	r3, r7, r1
 8004134:	881b      	ldrh	r3, [r3, #0]
 8004136:	227f      	movs	r2, #127	; 0x7f
 8004138:	401a      	ands	r2, r3
 800413a:	0013      	movs	r3, r2
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	1a9b      	subs	r3, r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	3328      	adds	r3, #40	; 0x28
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	18d3      	adds	r3, r2, r3
 8004148:	617b      	str	r3, [r7, #20]
 800414a:	e00b      	b.n	8004164 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800414c:	230a      	movs	r3, #10
 800414e:	18fb      	adds	r3, r7, r3
 8004150:	881a      	ldrh	r2, [r3, #0]
 8004152:	0013      	movs	r3, r2
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	1a9b      	subs	r3, r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	3309      	adds	r3, #9
 800415c:	33ff      	adds	r3, #255	; 0xff
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	18d3      	adds	r3, r2, r3
 8004162:	617b      	str	r3, [r7, #20]
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004164:	2308      	movs	r3, #8
 8004166:	18fb      	adds	r3, r7, r3
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d107      	bne.n	800417e <HAL_PCDEx_PMAConfig+0x7a>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2200      	movs	r2, #0
 8004172:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	b29a      	uxth	r2, r3
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	809a      	strh	r2, [r3, #4]
 800417c:	e00b      	b.n	8004196 <HAL_PCDEx_PMAConfig+0x92>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1U;
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	2201      	movs	r2, #1
 8004182:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFFU;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	b29a      	uxth	r2, r3
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	0c1b      	lsrs	r3, r3, #16
 8004190:	b29a      	uxth	r2, r3
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	811a      	strh	r2, [r3, #8]
  }
  
  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	0018      	movs	r0, r3
 800419a:	46bd      	mov	sp, r7
 800419c:	b007      	add	sp, #28
 800419e:	bd90      	pop	{r4, r7, pc}

080041a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80041a8:	2300      	movs	r3, #0
 80041aa:	60fb      	str	r3, [r7, #12]
//    }
//  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2220      	movs	r2, #32
 80041b2:	4013      	ands	r3, r2
 80041b4:	d05c      	beq.n	8004270 <HAL_RCC_OscConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80041b6:	4b6e      	ldr	r3, [pc, #440]	; (8004370 <HAL_RCC_OscConfig+0x1d0>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	220c      	movs	r2, #12
 80041bc:	4013      	ands	r3, r2
 80041be:	2b0c      	cmp	r3, #12
 80041c0:	d00e      	beq.n	80041e0 <HAL_RCC_OscConfig+0x40>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80041c2:	4b6b      	ldr	r3, [pc, #428]	; (8004370 <HAL_RCC_OscConfig+0x1d0>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	220c      	movs	r2, #12
 80041c8:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80041ca:	2b08      	cmp	r3, #8
 80041cc:	d114      	bne.n	80041f8 <HAL_RCC_OscConfig+0x58>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80041ce:	4b68      	ldr	r3, [pc, #416]	; (8004370 <HAL_RCC_OscConfig+0x1d0>)
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	23c0      	movs	r3, #192	; 0xc0
 80041d4:	025b      	lsls	r3, r3, #9
 80041d6:	401a      	ands	r2, r3
 80041d8:	23c0      	movs	r3, #192	; 0xc0
 80041da:	025b      	lsls	r3, r3, #9
 80041dc:	429a      	cmp	r2, r3
 80041de:	d10b      	bne.n	80041f8 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80041e0:	4b63      	ldr	r3, [pc, #396]	; (8004370 <HAL_RCC_OscConfig+0x1d0>)
 80041e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041e4:	2380      	movs	r3, #128	; 0x80
 80041e6:	025b      	lsls	r3, r3, #9
 80041e8:	4013      	ands	r3, r2
 80041ea:	d040      	beq.n	800426e <HAL_RCC_OscConfig+0xce>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d03c      	beq.n	800426e <HAL_RCC_OscConfig+0xce>
      {
        return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e0b6      	b.n	8004366 <HAL_RCC_OscConfig+0x1c6>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d01b      	beq.n	8004238 <HAL_RCC_OscConfig+0x98>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004200:	4b5b      	ldr	r3, [pc, #364]	; (8004370 <HAL_RCC_OscConfig+0x1d0>)
 8004202:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004204:	4b5a      	ldr	r3, [pc, #360]	; (8004370 <HAL_RCC_OscConfig+0x1d0>)
 8004206:	2180      	movs	r1, #128	; 0x80
 8004208:	0249      	lsls	r1, r1, #9
 800420a:	430a      	orrs	r2, r1
 800420c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800420e:	f7fc f843 	bl	8000298 <HAL_GetTick>
 8004212:	0003      	movs	r3, r0
 8004214:	60fb      	str	r3, [r7, #12]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004216:	e008      	b.n	800422a <HAL_RCC_OscConfig+0x8a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004218:	f7fc f83e 	bl	8000298 <HAL_GetTick>
 800421c:	0002      	movs	r2, r0
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b02      	cmp	r3, #2
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x8a>
          {
            return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e09d      	b.n	8004366 <HAL_RCC_OscConfig+0x1c6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800422a:	4b51      	ldr	r3, [pc, #324]	; (8004370 <HAL_RCC_OscConfig+0x1d0>)
 800422c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800422e:	2380      	movs	r3, #128	; 0x80
 8004230:	025b      	lsls	r3, r3, #9
 8004232:	4013      	ands	r3, r2
 8004234:	d0f0      	beq.n	8004218 <HAL_RCC_OscConfig+0x78>
 8004236:	e01b      	b.n	8004270 <HAL_RCC_OscConfig+0xd0>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004238:	4b4d      	ldr	r3, [pc, #308]	; (8004370 <HAL_RCC_OscConfig+0x1d0>)
 800423a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800423c:	4b4c      	ldr	r3, [pc, #304]	; (8004370 <HAL_RCC_OscConfig+0x1d0>)
 800423e:	494d      	ldr	r1, [pc, #308]	; (8004374 <HAL_RCC_OscConfig+0x1d4>)
 8004240:	400a      	ands	r2, r1
 8004242:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004244:	f7fc f828 	bl	8000298 <HAL_GetTick>
 8004248:	0003      	movs	r3, r0
 800424a:	60fb      	str	r3, [r7, #12]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800424c:	e008      	b.n	8004260 <HAL_RCC_OscConfig+0xc0>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800424e:	f7fc f823 	bl	8000298 <HAL_GetTick>
 8004252:	0002      	movs	r2, r0
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0xc0>
          {
            return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e082      	b.n	8004366 <HAL_RCC_OscConfig+0x1c6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004260:	4b43      	ldr	r3, [pc, #268]	; (8004370 <HAL_RCC_OscConfig+0x1d0>)
 8004262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004264:	2380      	movs	r3, #128	; 0x80
 8004266:	025b      	lsls	r3, r3, #9
 8004268:	4013      	ands	r3, r2
 800426a:	d1f0      	bne.n	800424e <HAL_RCC_OscConfig+0xae>
 800426c:	e000      	b.n	8004270 <HAL_RCC_OscConfig+0xd0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800426e:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	2b00      	cmp	r3, #0
 8004276:	d100      	bne.n	800427a <HAL_RCC_OscConfig+0xda>
 8004278:	e074      	b.n	8004364 <HAL_RCC_OscConfig+0x1c4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800427a:	4b3d      	ldr	r3, [pc, #244]	; (8004370 <HAL_RCC_OscConfig+0x1d0>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	220c      	movs	r2, #12
 8004280:	4013      	ands	r3, r2
 8004282:	2b08      	cmp	r3, #8
 8004284:	d100      	bne.n	8004288 <HAL_RCC_OscConfig+0xe8>
 8004286:	e06b      	b.n	8004360 <HAL_RCC_OscConfig+0x1c0>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	2b02      	cmp	r3, #2
 800428e:	d14c      	bne.n	800432a <HAL_RCC_OscConfig+0x18a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004290:	4b37      	ldr	r3, [pc, #220]	; (8004370 <HAL_RCC_OscConfig+0x1d0>)
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	4b36      	ldr	r3, [pc, #216]	; (8004370 <HAL_RCC_OscConfig+0x1d0>)
 8004296:	4938      	ldr	r1, [pc, #224]	; (8004378 <HAL_RCC_OscConfig+0x1d8>)
 8004298:	400a      	ands	r2, r1
 800429a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800429c:	f7fb fffc 	bl	8000298 <HAL_GetTick>
 80042a0:	0003      	movs	r3, r0
 80042a2:	60fb      	str	r3, [r7, #12]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042a4:	e008      	b.n	80042b8 <HAL_RCC_OscConfig+0x118>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042a6:	f7fb fff7 	bl	8000298 <HAL_GetTick>
 80042aa:	0002      	movs	r2, r0
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e056      	b.n	8004366 <HAL_RCC_OscConfig+0x1c6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042b8:	4b2d      	ldr	r3, [pc, #180]	; (8004370 <HAL_RCC_OscConfig+0x1d0>)
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	2380      	movs	r3, #128	; 0x80
 80042be:	049b      	lsls	r3, r3, #18
 80042c0:	4013      	ands	r3, r2
 80042c2:	d1f0      	bne.n	80042a6 <HAL_RCC_OscConfig+0x106>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042c4:	4b2a      	ldr	r3, [pc, #168]	; (8004370 <HAL_RCC_OscConfig+0x1d0>)
 80042c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c8:	220f      	movs	r2, #15
 80042ca:	4393      	bics	r3, r2
 80042cc:	0019      	movs	r1, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042d2:	4b27      	ldr	r3, [pc, #156]	; (8004370 <HAL_RCC_OscConfig+0x1d0>)
 80042d4:	430a      	orrs	r2, r1
 80042d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80042d8:	4b25      	ldr	r3, [pc, #148]	; (8004370 <HAL_RCC_OscConfig+0x1d0>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	4a27      	ldr	r2, [pc, #156]	; (800437c <HAL_RCC_OscConfig+0x1dc>)
 80042de:	4013      	ands	r3, r2
 80042e0:	0019      	movs	r1, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ea:	431a      	orrs	r2, r3
 80042ec:	4b20      	ldr	r3, [pc, #128]	; (8004370 <HAL_RCC_OscConfig+0x1d0>)
 80042ee:	430a      	orrs	r2, r1
 80042f0:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042f2:	4b1f      	ldr	r3, [pc, #124]	; (8004370 <HAL_RCC_OscConfig+0x1d0>)
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	4b1e      	ldr	r3, [pc, #120]	; (8004370 <HAL_RCC_OscConfig+0x1d0>)
 80042f8:	2180      	movs	r1, #128	; 0x80
 80042fa:	0449      	lsls	r1, r1, #17
 80042fc:	430a      	orrs	r2, r1
 80042fe:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004300:	f7fb ffca 	bl	8000298 <HAL_GetTick>
 8004304:	0003      	movs	r3, r0
 8004306:	60fb      	str	r3, [r7, #12]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004308:	e008      	b.n	800431c <HAL_RCC_OscConfig+0x17c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800430a:	f7fb ffc5 	bl	8000298 <HAL_GetTick>
 800430e:	0002      	movs	r2, r0
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e024      	b.n	8004366 <HAL_RCC_OscConfig+0x1c6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800431c:	4b14      	ldr	r3, [pc, #80]	; (8004370 <HAL_RCC_OscConfig+0x1d0>)
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	2380      	movs	r3, #128	; 0x80
 8004322:	049b      	lsls	r3, r3, #18
 8004324:	4013      	ands	r3, r2
 8004326:	d0f0      	beq.n	800430a <HAL_RCC_OscConfig+0x16a>
 8004328:	e01c      	b.n	8004364 <HAL_RCC_OscConfig+0x1c4>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800432a:	4b11      	ldr	r3, [pc, #68]	; (8004370 <HAL_RCC_OscConfig+0x1d0>)
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	4b10      	ldr	r3, [pc, #64]	; (8004370 <HAL_RCC_OscConfig+0x1d0>)
 8004330:	4911      	ldr	r1, [pc, #68]	; (8004378 <HAL_RCC_OscConfig+0x1d8>)
 8004332:	400a      	ands	r2, r1
 8004334:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004336:	f7fb ffaf 	bl	8000298 <HAL_GetTick>
 800433a:	0003      	movs	r3, r0
 800433c:	60fb      	str	r3, [r7, #12]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004340:	f7fb ffaa 	bl	8000298 <HAL_GetTick>
 8004344:	0002      	movs	r2, r0
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e009      	b.n	8004366 <HAL_RCC_OscConfig+0x1c6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004352:	4b07      	ldr	r3, [pc, #28]	; (8004370 <HAL_RCC_OscConfig+0x1d0>)
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	2380      	movs	r3, #128	; 0x80
 8004358:	049b      	lsls	r3, r3, #18
 800435a:	4013      	ands	r3, r2
 800435c:	d1f0      	bne.n	8004340 <HAL_RCC_OscConfig+0x1a0>
 800435e:	e001      	b.n	8004364 <HAL_RCC_OscConfig+0x1c4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e000      	b.n	8004366 <HAL_RCC_OscConfig+0x1c6>
    }
  }
  
  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	0018      	movs	r0, r3
 8004368:	46bd      	mov	sp, r7
 800436a:	b004      	add	sp, #16
 800436c:	bd80      	pop	{r7, pc}
 800436e:	46c0      	nop			; (mov r8, r8)
 8004370:	40021000 	.word	0x40021000
 8004374:	fffeffff 	.word	0xfffeffff
 8004378:	feffffff 	.word	0xfeffffff
 800437c:	ffc27fff 	.word	0xffc27fff

08004380 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800438a:	2300      	movs	r3, #0
 800438c:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800438e:	4b7b      	ldr	r3, [pc, #492]	; (800457c <HAL_RCC_ClockConfig+0x1fc>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2201      	movs	r2, #1
 8004394:	4013      	ands	r3, r2
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	429a      	cmp	r2, r3
 800439a:	d911      	bls.n	80043c0 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800439c:	4b77      	ldr	r3, [pc, #476]	; (800457c <HAL_RCC_ClockConfig+0x1fc>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2201      	movs	r2, #1
 80043a2:	4393      	bics	r3, r2
 80043a4:	0019      	movs	r1, r3
 80043a6:	4b75      	ldr	r3, [pc, #468]	; (800457c <HAL_RCC_ClockConfig+0x1fc>)
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80043ae:	4b73      	ldr	r3, [pc, #460]	; (800457c <HAL_RCC_ClockConfig+0x1fc>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2201      	movs	r2, #1
 80043b4:	4013      	ands	r3, r2
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d001      	beq.n	80043c0 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e0d8      	b.n	8004572 <HAL_RCC_ClockConfig+0x1f2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2202      	movs	r2, #2
 80043c6:	4013      	ands	r3, r2
 80043c8:	d009      	beq.n	80043de <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043ca:	4b6d      	ldr	r3, [pc, #436]	; (8004580 <HAL_RCC_ClockConfig+0x200>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	22f0      	movs	r2, #240	; 0xf0
 80043d0:	4393      	bics	r3, r2
 80043d2:	0019      	movs	r1, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	4b69      	ldr	r3, [pc, #420]	; (8004580 <HAL_RCC_ClockConfig+0x200>)
 80043da:	430a      	orrs	r2, r1
 80043dc:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2201      	movs	r2, #1
 80043e4:	4013      	ands	r3, r2
 80043e6:	d100      	bne.n	80043ea <HAL_RCC_ClockConfig+0x6a>
 80043e8:	e089      	b.n	80044fe <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d107      	bne.n	8004402 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043f2:	4b63      	ldr	r3, [pc, #396]	; (8004580 <HAL_RCC_ClockConfig+0x200>)
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	2380      	movs	r3, #128	; 0x80
 80043f8:	029b      	lsls	r3, r3, #10
 80043fa:	4013      	ands	r3, r2
 80043fc:	d120      	bne.n	8004440 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e0b7      	b.n	8004572 <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	2b02      	cmp	r3, #2
 8004408:	d107      	bne.n	800441a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800440a:	4b5d      	ldr	r3, [pc, #372]	; (8004580 <HAL_RCC_ClockConfig+0x200>)
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	2380      	movs	r3, #128	; 0x80
 8004410:	049b      	lsls	r3, r3, #18
 8004412:	4013      	ands	r3, r2
 8004414:	d114      	bne.n	8004440 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e0ab      	b.n	8004572 <HAL_RCC_ClockConfig+0x1f2>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	2b03      	cmp	r3, #3
 8004420:	d107      	bne.n	8004432 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004422:	4b57      	ldr	r3, [pc, #348]	; (8004580 <HAL_RCC_ClockConfig+0x200>)
 8004424:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004426:	2380      	movs	r3, #128	; 0x80
 8004428:	025b      	lsls	r3, r3, #9
 800442a:	4013      	ands	r3, r2
 800442c:	d108      	bne.n	8004440 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e09f      	b.n	8004572 <HAL_RCC_ClockConfig+0x1f2>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004432:	4b53      	ldr	r3, [pc, #332]	; (8004580 <HAL_RCC_ClockConfig+0x200>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2202      	movs	r2, #2
 8004438:	4013      	ands	r3, r2
 800443a:	d101      	bne.n	8004440 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e098      	b.n	8004572 <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004440:	4b4f      	ldr	r3, [pc, #316]	; (8004580 <HAL_RCC_ClockConfig+0x200>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	2203      	movs	r2, #3
 8004446:	4393      	bics	r3, r2
 8004448:	0019      	movs	r1, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	4b4c      	ldr	r3, [pc, #304]	; (8004580 <HAL_RCC_ClockConfig+0x200>)
 8004450:	430a      	orrs	r2, r1
 8004452:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004454:	f7fb ff20 	bl	8000298 <HAL_GetTick>
 8004458:	0003      	movs	r3, r0
 800445a:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d111      	bne.n	8004488 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004464:	e009      	b.n	800447a <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004466:	f7fb ff17 	bl	8000298 <HAL_GetTick>
 800446a:	0002      	movs	r2, r0
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	4a44      	ldr	r2, [pc, #272]	; (8004584 <HAL_RCC_ClockConfig+0x204>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d901      	bls.n	800447a <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e07b      	b.n	8004572 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800447a:	4b41      	ldr	r3, [pc, #260]	; (8004580 <HAL_RCC_ClockConfig+0x200>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	220c      	movs	r2, #12
 8004480:	4013      	ands	r3, r2
 8004482:	2b04      	cmp	r3, #4
 8004484:	d1ef      	bne.n	8004466 <HAL_RCC_ClockConfig+0xe6>
 8004486:	e03a      	b.n	80044fe <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	2b02      	cmp	r3, #2
 800448e:	d111      	bne.n	80044b4 <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004490:	e009      	b.n	80044a6 <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004492:	f7fb ff01 	bl	8000298 <HAL_GetTick>
 8004496:	0002      	movs	r2, r0
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	4a39      	ldr	r2, [pc, #228]	; (8004584 <HAL_RCC_ClockConfig+0x204>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e065      	b.n	8004572 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044a6:	4b36      	ldr	r3, [pc, #216]	; (8004580 <HAL_RCC_ClockConfig+0x200>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	220c      	movs	r2, #12
 80044ac:	4013      	ands	r3, r2
 80044ae:	2b08      	cmp	r3, #8
 80044b0:	d1ef      	bne.n	8004492 <HAL_RCC_ClockConfig+0x112>
 80044b2:	e024      	b.n	80044fe <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	2b03      	cmp	r3, #3
 80044ba:	d11b      	bne.n	80044f4 <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80044bc:	e009      	b.n	80044d2 <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044be:	f7fb feeb 	bl	8000298 <HAL_GetTick>
 80044c2:	0002      	movs	r2, r0
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	4a2e      	ldr	r2, [pc, #184]	; (8004584 <HAL_RCC_ClockConfig+0x204>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e04f      	b.n	8004572 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80044d2:	4b2b      	ldr	r3, [pc, #172]	; (8004580 <HAL_RCC_ClockConfig+0x200>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	220c      	movs	r2, #12
 80044d8:	4013      	ands	r3, r2
 80044da:	2b0c      	cmp	r3, #12
 80044dc:	d1ef      	bne.n	80044be <HAL_RCC_ClockConfig+0x13e>
 80044de:	e00e      	b.n	80044fe <HAL_RCC_ClockConfig+0x17e>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044e0:	f7fb feda 	bl	8000298 <HAL_GetTick>
 80044e4:	0002      	movs	r2, r0
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	4a26      	ldr	r2, [pc, #152]	; (8004584 <HAL_RCC_ClockConfig+0x204>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d901      	bls.n	80044f4 <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e03e      	b.n	8004572 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80044f4:	4b22      	ldr	r3, [pc, #136]	; (8004580 <HAL_RCC_ClockConfig+0x200>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	220c      	movs	r2, #12
 80044fa:	4013      	ands	r3, r2
 80044fc:	d1f0      	bne.n	80044e0 <HAL_RCC_ClockConfig+0x160>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80044fe:	4b1f      	ldr	r3, [pc, #124]	; (800457c <HAL_RCC_ClockConfig+0x1fc>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2201      	movs	r2, #1
 8004504:	4013      	ands	r3, r2
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	429a      	cmp	r2, r3
 800450a:	d211      	bcs.n	8004530 <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800450c:	4b1b      	ldr	r3, [pc, #108]	; (800457c <HAL_RCC_ClockConfig+0x1fc>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2201      	movs	r2, #1
 8004512:	4393      	bics	r3, r2
 8004514:	0019      	movs	r1, r3
 8004516:	4b19      	ldr	r3, [pc, #100]	; (800457c <HAL_RCC_ClockConfig+0x1fc>)
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800451e:	4b17      	ldr	r3, [pc, #92]	; (800457c <HAL_RCC_ClockConfig+0x1fc>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2201      	movs	r2, #1
 8004524:	4013      	ands	r3, r2
 8004526:	683a      	ldr	r2, [r7, #0]
 8004528:	429a      	cmp	r2, r3
 800452a:	d001      	beq.n	8004530 <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e020      	b.n	8004572 <HAL_RCC_ClockConfig+0x1f2>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2204      	movs	r2, #4
 8004536:	4013      	ands	r3, r2
 8004538:	d009      	beq.n	800454e <HAL_RCC_ClockConfig+0x1ce>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800453a:	4b11      	ldr	r3, [pc, #68]	; (8004580 <HAL_RCC_ClockConfig+0x200>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	4a12      	ldr	r2, [pc, #72]	; (8004588 <HAL_RCC_ClockConfig+0x208>)
 8004540:	4013      	ands	r3, r2
 8004542:	0019      	movs	r1, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68da      	ldr	r2, [r3, #12]
 8004548:	4b0d      	ldr	r3, [pc, #52]	; (8004580 <HAL_RCC_ClockConfig+0x200>)
 800454a:	430a      	orrs	r2, r1
 800454c:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800454e:	f000 f821 	bl	8004594 <HAL_RCC_GetSysClockFreq>
 8004552:	0001      	movs	r1, r0
 8004554:	4b0a      	ldr	r3, [pc, #40]	; (8004580 <HAL_RCC_ClockConfig+0x200>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	091b      	lsrs	r3, r3, #4
 800455a:	220f      	movs	r2, #15
 800455c:	4013      	ands	r3, r2
 800455e:	4a0b      	ldr	r2, [pc, #44]	; (800458c <HAL_RCC_ClockConfig+0x20c>)
 8004560:	5cd3      	ldrb	r3, [r2, r3]
 8004562:	000a      	movs	r2, r1
 8004564:	40da      	lsrs	r2, r3
 8004566:	4b0a      	ldr	r3, [pc, #40]	; (8004590 <HAL_RCC_ClockConfig+0x210>)
 8004568:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800456a:	2000      	movs	r0, #0
 800456c:	f7fb fe6c 	bl	8000248 <HAL_InitTick>
  
  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	0018      	movs	r0, r3
 8004574:	46bd      	mov	sp, r7
 8004576:	b004      	add	sp, #16
 8004578:	bd80      	pop	{r7, pc}
 800457a:	46c0      	nop			; (mov r8, r8)
 800457c:	40022000 	.word	0x40022000
 8004580:	40021000 	.word	0x40021000
 8004584:	00001388 	.word	0x00001388
 8004588:	fffff8ff 	.word	0xfffff8ff
 800458c:	08007adc 	.word	0x08007adc
 8004590:	20000114 	.word	0x20000114

08004594 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004594:	b590      	push	{r4, r7, lr}
 8004596:	b08f      	sub	sp, #60	; 0x3c
 8004598:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800459a:	2314      	movs	r3, #20
 800459c:	18fb      	adds	r3, r7, r3
 800459e:	4a38      	ldr	r2, [pc, #224]	; (8004680 <HAL_RCC_GetSysClockFreq+0xec>)
 80045a0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80045a2:	c313      	stmia	r3!, {r0, r1, r4}
 80045a4:	6812      	ldr	r2, [r2, #0]
 80045a6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80045a8:	1d3b      	adds	r3, r7, #4
 80045aa:	4a36      	ldr	r2, [pc, #216]	; (8004684 <HAL_RCC_GetSysClockFreq+0xf0>)
 80045ac:	ca13      	ldmia	r2!, {r0, r1, r4}
 80045ae:	c313      	stmia	r3!, {r0, r1, r4}
 80045b0:	6812      	ldr	r2, [r2, #0]
 80045b2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045b8:	2300      	movs	r3, #0
 80045ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80045bc:	2300      	movs	r3, #0
 80045be:	637b      	str	r3, [r7, #52]	; 0x34
 80045c0:	2300      	movs	r3, #0
 80045c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80045c4:	2300      	movs	r3, #0
 80045c6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80045c8:	4b2f      	ldr	r3, [pc, #188]	; (8004688 <HAL_RCC_GetSysClockFreq+0xf4>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d0:	220c      	movs	r2, #12
 80045d2:	4013      	ands	r3, r2
 80045d4:	2b0c      	cmp	r3, #12
 80045d6:	d047      	beq.n	8004668 <HAL_RCC_GetSysClockFreq+0xd4>
 80045d8:	d849      	bhi.n	800466e <HAL_RCC_GetSysClockFreq+0xda>
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d002      	beq.n	80045e4 <HAL_RCC_GetSysClockFreq+0x50>
 80045de:	2b08      	cmp	r3, #8
 80045e0:	d003      	beq.n	80045ea <HAL_RCC_GetSysClockFreq+0x56>
 80045e2:	e044      	b.n	800466e <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045e4:	4b29      	ldr	r3, [pc, #164]	; (800468c <HAL_RCC_GetSysClockFreq+0xf8>)
 80045e6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80045e8:	e044      	b.n	8004674 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80045ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ec:	0c9b      	lsrs	r3, r3, #18
 80045ee:	220f      	movs	r2, #15
 80045f0:	4013      	ands	r3, r2
 80045f2:	2214      	movs	r2, #20
 80045f4:	18ba      	adds	r2, r7, r2
 80045f6:	5cd3      	ldrb	r3, [r2, r3]
 80045f8:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80045fa:	4b23      	ldr	r3, [pc, #140]	; (8004688 <HAL_RCC_GetSysClockFreq+0xf4>)
 80045fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fe:	220f      	movs	r2, #15
 8004600:	4013      	ands	r3, r2
 8004602:	1d3a      	adds	r2, r7, #4
 8004604:	5cd3      	ldrb	r3, [r2, r3]
 8004606:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800460a:	23c0      	movs	r3, #192	; 0xc0
 800460c:	025b      	lsls	r3, r3, #9
 800460e:	401a      	ands	r2, r3
 8004610:	2380      	movs	r3, #128	; 0x80
 8004612:	025b      	lsls	r3, r3, #9
 8004614:	429a      	cmp	r2, r3
 8004616:	d109      	bne.n	800462c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8004618:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800461a:	481c      	ldr	r0, [pc, #112]	; (800468c <HAL_RCC_GetSysClockFreq+0xf8>)
 800461c:	f7fb fd74 	bl	8000108 <__udivsi3>
 8004620:	0003      	movs	r3, r0
 8004622:	001a      	movs	r2, r3
 8004624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004626:	4353      	muls	r3, r2
 8004628:	637b      	str	r3, [r7, #52]	; 0x34
 800462a:	e01a      	b.n	8004662 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800462c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800462e:	23c0      	movs	r3, #192	; 0xc0
 8004630:	025b      	lsls	r3, r3, #9
 8004632:	401a      	ands	r2, r3
 8004634:	23c0      	movs	r3, #192	; 0xc0
 8004636:	025b      	lsls	r3, r3, #9
 8004638:	429a      	cmp	r2, r3
 800463a:	d109      	bne.n	8004650 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 800463c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800463e:	4814      	ldr	r0, [pc, #80]	; (8004690 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004640:	f7fb fd62 	bl	8000108 <__udivsi3>
 8004644:	0003      	movs	r3, r0
 8004646:	001a      	movs	r2, r3
 8004648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464a:	4353      	muls	r3, r2
 800464c:	637b      	str	r3, [r7, #52]	; 0x34
 800464e:	e008      	b.n	8004662 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8004650:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004652:	480e      	ldr	r0, [pc, #56]	; (800468c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004654:	f7fb fd58 	bl	8000108 <__udivsi3>
 8004658:	0003      	movs	r3, r0
 800465a:	001a      	movs	r2, r3
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	4353      	muls	r3, r2
 8004660:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 8004662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004664:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004666:	e005      	b.n	8004674 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004668:	4b09      	ldr	r3, [pc, #36]	; (8004690 <HAL_RCC_GetSysClockFreq+0xfc>)
 800466a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800466c:	e002      	b.n	8004674 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800466e:	4b07      	ldr	r3, [pc, #28]	; (800468c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004670:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004672:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004676:	0018      	movs	r0, r3
 8004678:	46bd      	mov	sp, r7
 800467a:	b00f      	add	sp, #60	; 0x3c
 800467c:	bd90      	pop	{r4, r7, pc}
 800467e:	46c0      	nop			; (mov r8, r8)
 8004680:	08007a5c 	.word	0x08007a5c
 8004684:	08007a6c 	.word	0x08007a6c
 8004688:	40021000 	.word	0x40021000
 800468c:	007a1200 	.word	0x007a1200
 8004690:	02dc6c00 	.word	0x02dc6c00

08004694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004698:	4b02      	ldr	r3, [pc, #8]	; (80046a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800469a:	681b      	ldr	r3, [r3, #0]
}
 800469c:	0018      	movs	r0, r3
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	46c0      	nop			; (mov r8, r8)
 80046a4:	20000114 	.word	0x20000114

080046a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80046ac:	f7ff fff2 	bl	8004694 <HAL_RCC_GetHCLKFreq>
 80046b0:	0001      	movs	r1, r0
 80046b2:	4b06      	ldr	r3, [pc, #24]	; (80046cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	0a1b      	lsrs	r3, r3, #8
 80046b8:	2207      	movs	r2, #7
 80046ba:	4013      	ands	r3, r2
 80046bc:	4a04      	ldr	r2, [pc, #16]	; (80046d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80046be:	5cd3      	ldrb	r3, [r2, r3]
 80046c0:	40d9      	lsrs	r1, r3
 80046c2:	000b      	movs	r3, r1
}    
 80046c4:	0018      	movs	r0, r3
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	46c0      	nop			; (mov r8, r8)
 80046cc:	40021000 	.word	0x40021000
 80046d0:	08007aec 	.word	0x08007aec

080046d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046dc:	2300      	movs	r3, #0
 80046de:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	2380      	movs	r3, #128	; 0x80
 80046ea:	025b      	lsls	r3, r3, #9
 80046ec:	4013      	ands	r3, r2
 80046ee:	d100      	bne.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80046f0:	e08e      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80046f2:	2017      	movs	r0, #23
 80046f4:	183b      	adds	r3, r7, r0
 80046f6:	2200      	movs	r2, #0
 80046f8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046fa:	4b67      	ldr	r3, [pc, #412]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80046fc:	69da      	ldr	r2, [r3, #28]
 80046fe:	2380      	movs	r3, #128	; 0x80
 8004700:	055b      	lsls	r3, r3, #21
 8004702:	4013      	ands	r3, r2
 8004704:	d110      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004706:	4b64      	ldr	r3, [pc, #400]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004708:	69da      	ldr	r2, [r3, #28]
 800470a:	4b63      	ldr	r3, [pc, #396]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800470c:	2180      	movs	r1, #128	; 0x80
 800470e:	0549      	lsls	r1, r1, #21
 8004710:	430a      	orrs	r2, r1
 8004712:	61da      	str	r2, [r3, #28]
 8004714:	4b60      	ldr	r3, [pc, #384]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004716:	69da      	ldr	r2, [r3, #28]
 8004718:	2380      	movs	r3, #128	; 0x80
 800471a:	055b      	lsls	r3, r3, #21
 800471c:	4013      	ands	r3, r2
 800471e:	60bb      	str	r3, [r7, #8]
 8004720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004722:	183b      	adds	r3, r7, r0
 8004724:	2201      	movs	r2, #1
 8004726:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004728:	4b5c      	ldr	r3, [pc, #368]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	2380      	movs	r3, #128	; 0x80
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	4013      	ands	r3, r2
 8004732:	d11a      	bne.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004734:	4b59      	ldr	r3, [pc, #356]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	4b58      	ldr	r3, [pc, #352]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800473a:	2180      	movs	r1, #128	; 0x80
 800473c:	0049      	lsls	r1, r1, #1
 800473e:	430a      	orrs	r2, r1
 8004740:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004742:	f7fb fda9 	bl	8000298 <HAL_GetTick>
 8004746:	0003      	movs	r3, r0
 8004748:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800474a:	e008      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800474c:	f7fb fda4 	bl	8000298 <HAL_GetTick>
 8004750:	0002      	movs	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b64      	cmp	r3, #100	; 0x64
 8004758:	d901      	bls.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e097      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800475e:	4b4f      	ldr	r3, [pc, #316]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	2380      	movs	r3, #128	; 0x80
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	4013      	ands	r3, r2
 8004768:	d0f0      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800476a:	4b4b      	ldr	r3, [pc, #300]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800476c:	6a1a      	ldr	r2, [r3, #32]
 800476e:	23c0      	movs	r3, #192	; 0xc0
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	4013      	ands	r3, r2
 8004774:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d034      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	23c0      	movs	r3, #192	; 0xc0
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4013      	ands	r3, r2
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	429a      	cmp	r2, r3
 800478a:	d02c      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800478c:	4b42      	ldr	r3, [pc, #264]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800478e:	6a1b      	ldr	r3, [r3, #32]
 8004790:	4a43      	ldr	r2, [pc, #268]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004792:	4013      	ands	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004796:	4b40      	ldr	r3, [pc, #256]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004798:	6a1a      	ldr	r2, [r3, #32]
 800479a:	4b3f      	ldr	r3, [pc, #252]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800479c:	2180      	movs	r1, #128	; 0x80
 800479e:	0249      	lsls	r1, r1, #9
 80047a0:	430a      	orrs	r2, r1
 80047a2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047a4:	4b3c      	ldr	r3, [pc, #240]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80047a6:	6a1a      	ldr	r2, [r3, #32]
 80047a8:	4b3b      	ldr	r3, [pc, #236]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80047aa:	493e      	ldr	r1, [pc, #248]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ac:	400a      	ands	r2, r1
 80047ae:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80047b0:	4b39      	ldr	r3, [pc, #228]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2201      	movs	r2, #1
 80047ba:	4013      	ands	r3, r2
 80047bc:	d013      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047be:	f7fb fd6b 	bl	8000298 <HAL_GetTick>
 80047c2:	0003      	movs	r3, r0
 80047c4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c6:	e009      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c8:	f7fb fd66 	bl	8000298 <HAL_GetTick>
 80047cc:	0002      	movs	r2, r0
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	4a35      	ldr	r2, [pc, #212]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d901      	bls.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e058      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047dc:	4b2e      	ldr	r3, [pc, #184]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	2202      	movs	r2, #2
 80047e2:	4013      	ands	r3, r2
 80047e4:	d0f0      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047e6:	4b2c      	ldr	r3, [pc, #176]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	4a2d      	ldr	r2, [pc, #180]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80047ec:	4013      	ands	r3, r2
 80047ee:	0019      	movs	r1, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	4b28      	ldr	r3, [pc, #160]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80047f6:	430a      	orrs	r2, r1
 80047f8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80047fa:	2317      	movs	r3, #23
 80047fc:	18fb      	adds	r3, r7, r3
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d105      	bne.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004804:	4b24      	ldr	r3, [pc, #144]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004806:	69da      	ldr	r2, [r3, #28]
 8004808:	4b23      	ldr	r3, [pc, #140]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800480a:	4928      	ldr	r1, [pc, #160]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800480c:	400a      	ands	r2, r1
 800480e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2201      	movs	r2, #1
 8004816:	4013      	ands	r3, r2
 8004818:	d009      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800481a:	4b1f      	ldr	r3, [pc, #124]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800481c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481e:	2203      	movs	r2, #3
 8004820:	4393      	bics	r3, r2
 8004822:	0019      	movs	r1, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689a      	ldr	r2, [r3, #8]
 8004828:	4b1b      	ldr	r3, [pc, #108]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800482a:	430a      	orrs	r2, r1
 800482c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2220      	movs	r2, #32
 8004834:	4013      	ands	r3, r2
 8004836:	d009      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004838:	4b17      	ldr	r3, [pc, #92]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800483a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483c:	2210      	movs	r2, #16
 800483e:	4393      	bics	r3, r2
 8004840:	0019      	movs	r1, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	4b14      	ldr	r3, [pc, #80]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004848:	430a      	orrs	r2, r1
 800484a:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	2380      	movs	r3, #128	; 0x80
 8004852:	029b      	lsls	r3, r3, #10
 8004854:	4013      	ands	r3, r2
 8004856:	d009      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004858:	4b0f      	ldr	r3, [pc, #60]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800485a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485c:	2280      	movs	r2, #128	; 0x80
 800485e:	4393      	bics	r3, r2
 8004860:	0019      	movs	r1, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	695a      	ldr	r2, [r3, #20]
 8004866:	4b0c      	ldr	r3, [pc, #48]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004868:	430a      	orrs	r2, r1
 800486a:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	2380      	movs	r3, #128	; 0x80
 8004872:	00db      	lsls	r3, r3, #3
 8004874:	4013      	ands	r3, r2
 8004876:	d009      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004878:	4b07      	ldr	r3, [pc, #28]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800487a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487c:	2240      	movs	r2, #64	; 0x40
 800487e:	4393      	bics	r3, r2
 8004880:	0019      	movs	r1, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	691a      	ldr	r2, [r3, #16]
 8004886:	4b04      	ldr	r3, [pc, #16]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004888:	430a      	orrs	r2, r1
 800488a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	0018      	movs	r0, r3
 8004890:	46bd      	mov	sp, r7
 8004892:	b006      	add	sp, #24
 8004894:	bd80      	pop	{r7, pc}
 8004896:	46c0      	nop			; (mov r8, r8)
 8004898:	40021000 	.word	0x40021000
 800489c:	40007000 	.word	0x40007000
 80048a0:	fffffcff 	.word	0xfffffcff
 80048a4:	fffeffff 	.word	0xfffeffff
 80048a8:	00001388 	.word	0x00001388
 80048ac:	efffffff 	.word	0xefffffff

080048b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e047      	b.n	8004952 <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2269      	movs	r2, #105	; 0x69
 80048c6:	5c9b      	ldrb	r3, [r3, r2]
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d107      	bne.n	80048de <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2268      	movs	r2, #104	; 0x68
 80048d2:	2100      	movs	r1, #0
 80048d4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	0018      	movs	r0, r3
 80048da:	f002 f93b 	bl	8006b54 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2269      	movs	r2, #105	; 0x69
 80048e2:	2124      	movs	r1, #36	; 0x24
 80048e4:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2101      	movs	r1, #1
 80048f2:	438a      	bics	r2, r1
 80048f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	0018      	movs	r0, r3
 80048fa:	f000 f973 	bl	8004be4 <UART_SetConfig>
 80048fe:	0003      	movs	r3, r0
 8004900:	2b01      	cmp	r3, #1
 8004902:	d101      	bne.n	8004908 <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e024      	b.n	8004952 <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	2b00      	cmp	r3, #0
 800490e:	d003      	beq.n	8004918 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	0018      	movs	r0, r3
 8004914:	f000 fade 	bl	8004ed4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	685a      	ldr	r2, [r3, #4]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	490e      	ldr	r1, [pc, #56]	; (800495c <HAL_UART_Init+0xac>)
 8004924:	400a      	ands	r2, r1
 8004926:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689a      	ldr	r2, [r3, #8]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	212a      	movs	r1, #42	; 0x2a
 8004934:	438a      	bics	r2, r1
 8004936:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2101      	movs	r1, #1
 8004944:	430a      	orrs	r2, r1
 8004946:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	0018      	movs	r0, r3
 800494c:	f000 fb76 	bl	800503c <UART_CheckIdleState>
 8004950:	0003      	movs	r3, r0
}
 8004952:	0018      	movs	r0, r3
 8004954:	46bd      	mov	sp, r7
 8004956:	b002      	add	sp, #8
 8004958:	bd80      	pop	{r7, pc}
 800495a:	46c0      	nop			; (mov r8, r8)
 800495c:	ffffb7ff 	.word	0xffffb7ff

08004960 <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b088      	sub	sp, #32
 8004964:	af02      	add	r7, sp, #8
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	603b      	str	r3, [r7, #0]
 800496c:	1dbb      	adds	r3, r7, #6
 800496e:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8004970:	2300      	movs	r3, #0
 8004972:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2269      	movs	r2, #105	; 0x69
 8004978:	5c9b      	ldrb	r3, [r3, r2]
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b20      	cmp	r3, #32
 800497e:	d000      	beq.n	8004982 <HAL_UART_Transmit+0x22>
 8004980:	e08c      	b.n	8004a9c <HAL_UART_Transmit+0x13c>
  {
    if((pData == NULL ) || (Size == 0U))
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d003      	beq.n	8004990 <HAL_UART_Transmit+0x30>
 8004988:	1dbb      	adds	r3, r7, #6
 800498a:	881b      	ldrh	r3, [r3, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d101      	bne.n	8004994 <HAL_UART_Transmit+0x34>
    {
      return  HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e084      	b.n	8004a9e <HAL_UART_Transmit+0x13e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be filled into TDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	689a      	ldr	r2, [r3, #8]
 8004998:	2380      	movs	r3, #128	; 0x80
 800499a:	015b      	lsls	r3, r3, #5
 800499c:	429a      	cmp	r2, r3
 800499e:	d109      	bne.n	80049b4 <HAL_UART_Transmit+0x54>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d105      	bne.n	80049b4 <HAL_UART_Transmit+0x54>
    {
      if((((uint32_t)pData)&1U) != 0U)
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	2201      	movs	r2, #1
 80049ac:	4013      	ands	r3, r2
 80049ae:	d001      	beq.n	80049b4 <HAL_UART_Transmit+0x54>
      {
        return  HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e074      	b.n	8004a9e <HAL_UART_Transmit+0x13e>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2268      	movs	r2, #104	; 0x68
 80049b8:	5c9b      	ldrb	r3, [r3, r2]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d101      	bne.n	80049c2 <HAL_UART_Transmit+0x62>
 80049be:	2302      	movs	r3, #2
 80049c0:	e06d      	b.n	8004a9e <HAL_UART_Transmit+0x13e>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2268      	movs	r2, #104	; 0x68
 80049c6:	2101      	movs	r1, #1
 80049c8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2269      	movs	r2, #105	; 0x69
 80049d4:	2121      	movs	r1, #33	; 0x21
 80049d6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80049d8:	f7fb fc5e 	bl	8000298 <HAL_GetTick>
 80049dc:	0003      	movs	r3, r0
 80049de:	617b      	str	r3, [r7, #20]

    huart->TxXferSize = Size;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	1dba      	adds	r2, r7, #6
 80049e4:	2150      	movs	r1, #80	; 0x50
 80049e6:	8812      	ldrh	r2, [r2, #0]
 80049e8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	1dba      	adds	r2, r7, #6
 80049ee:	2152      	movs	r1, #82	; 0x52
 80049f0:	8812      	ldrh	r2, [r2, #0]
 80049f2:	525a      	strh	r2, [r3, r1]
    while(huart->TxXferCount > 0)
 80049f4:	e035      	b.n	8004a62 <HAL_UART_Transmit+0x102>
    {
      huart->TxXferCount--;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2252      	movs	r2, #82	; 0x52
 80049fa:	5a9b      	ldrh	r3, [r3, r2]
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	3b01      	subs	r3, #1
 8004a00:	b299      	uxth	r1, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2252      	movs	r2, #82	; 0x52
 8004a06:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	0013      	movs	r3, r2
 8004a12:	2200      	movs	r2, #0
 8004a14:	2180      	movs	r1, #128	; 0x80
 8004a16:	f000 fb61 	bl	80050dc <UART_WaitOnFlagUntilTimeout>
 8004a1a:	1e03      	subs	r3, r0, #0
 8004a1c:	d001      	beq.n	8004a22 <HAL_UART_Transmit+0xc2>
      {
        return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e03d      	b.n	8004a9e <HAL_UART_Transmit+0x13e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	689a      	ldr	r2, [r3, #8]
 8004a26:	2380      	movs	r3, #128	; 0x80
 8004a28:	015b      	lsls	r3, r3, #5
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d111      	bne.n	8004a52 <HAL_UART_Transmit+0xf2>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10d      	bne.n	8004a52 <HAL_UART_Transmit+0xf2>
      {
        tmp = (uint16_t*) pData;
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	881a      	ldrh	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	05d2      	lsls	r2, r2, #23
 8004a44:	0dd2      	lsrs	r2, r2, #23
 8004a46:	b292      	uxth	r2, r2
 8004a48:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2;
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	3302      	adds	r3, #2
 8004a4e:	60bb      	str	r3, [r7, #8]
 8004a50:	e007      	b.n	8004a62 <HAL_UART_Transmit+0x102>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	1c5a      	adds	r2, r3, #1
 8004a56:	60ba      	str	r2, [r7, #8]
 8004a58:	781a      	ldrb	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	b292      	uxth	r2, r2
 8004a60:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2252      	movs	r2, #82	; 0x52
 8004a66:	5a9b      	ldrh	r3, [r3, r2]
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1c3      	bne.n	80049f6 <HAL_UART_Transmit+0x96>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	0013      	movs	r3, r2
 8004a78:	2200      	movs	r2, #0
 8004a7a:	2140      	movs	r1, #64	; 0x40
 8004a7c:	f000 fb2e 	bl	80050dc <UART_WaitOnFlagUntilTimeout>
 8004a80:	1e03      	subs	r3, r0, #0
 8004a82:	d001      	beq.n	8004a88 <HAL_UART_Transmit+0x128>
    {
      return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e00a      	b.n	8004a9e <HAL_UART_Transmit+0x13e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2269      	movs	r2, #105	; 0x69
 8004a8c:	2120      	movs	r1, #32
 8004a8e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2268      	movs	r2, #104	; 0x68
 8004a94:	2100      	movs	r1, #0
 8004a96:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	e000      	b.n	8004a9e <HAL_UART_Transmit+0x13e>
  }
  else
  {
    return HAL_BUSY;
 8004a9c:	2302      	movs	r3, #2
  }
}
 8004a9e:	0018      	movs	r0, r3
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	b006      	add	sp, #24
 8004aa4:	bd80      	pop	{r7, pc}
	...

08004aa8 <HAL_UART_Receive_IT>:
  *         (as received data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	1dbb      	adds	r3, r7, #6
 8004ab4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	226a      	movs	r2, #106	; 0x6a
 8004aba:	5c9b      	ldrb	r3, [r3, r2]
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b20      	cmp	r3, #32
 8004ac0:	d000      	beq.n	8004ac4 <HAL_UART_Receive_IT+0x1c>
 8004ac2:	e087      	b.n	8004bd4 <HAL_UART_Receive_IT+0x12c>
  {
    if((pData == NULL ) || (Size == 0U))
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <HAL_UART_Receive_IT+0x2a>
 8004aca:	1dbb      	adds	r3, r7, #6
 8004acc:	881b      	ldrh	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_UART_Receive_IT+0x2e>
    {
      return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e07f      	b.n	8004bd6 <HAL_UART_Receive_IT+0x12e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be received from RDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	689a      	ldr	r2, [r3, #8]
 8004ada:	2380      	movs	r3, #128	; 0x80
 8004adc:	015b      	lsls	r3, r3, #5
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d109      	bne.n	8004af6 <HAL_UART_Receive_IT+0x4e>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d105      	bne.n	8004af6 <HAL_UART_Receive_IT+0x4e>
    {
      if((((uint32_t)pData)&1U) != 0U)
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	2201      	movs	r2, #1
 8004aee:	4013      	ands	r3, r2
 8004af0:	d001      	beq.n	8004af6 <HAL_UART_Receive_IT+0x4e>
      {
        return  HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e06f      	b.n	8004bd6 <HAL_UART_Receive_IT+0x12e>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2268      	movs	r2, #104	; 0x68
 8004afa:	5c9b      	ldrb	r3, [r3, r2]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d101      	bne.n	8004b04 <HAL_UART_Receive_IT+0x5c>
 8004b00:	2302      	movs	r3, #2
 8004b02:	e068      	b.n	8004bd6 <HAL_UART_Receive_IT+0x12e>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2268      	movs	r2, #104	; 0x68
 8004b08:	2101      	movs	r1, #1
 8004b0a:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr = pData;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	1dba      	adds	r2, r7, #6
 8004b16:	2158      	movs	r1, #88	; 0x58
 8004b18:	8812      	ldrh	r2, [r2, #0]
 8004b1a:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	1dba      	adds	r2, r7, #6
 8004b20:	215a      	movs	r1, #90	; 0x5a
 8004b22:	8812      	ldrh	r2, [r2, #0]
 8004b24:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	689a      	ldr	r2, [r3, #8]
 8004b2a:	2380      	movs	r3, #128	; 0x80
 8004b2c:	015b      	lsls	r3, r3, #5
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d10d      	bne.n	8004b4e <HAL_UART_Receive_IT+0xa6>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d104      	bne.n	8004b44 <HAL_UART_Receive_IT+0x9c>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	225c      	movs	r2, #92	; 0x5c
 8004b3e:	4928      	ldr	r1, [pc, #160]	; (8004be0 <HAL_UART_Receive_IT+0x138>)
 8004b40:	5299      	strh	r1, [r3, r2]
 8004b42:	e029      	b.n	8004b98 <HAL_UART_Receive_IT+0xf0>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	225c      	movs	r2, #92	; 0x5c
 8004b48:	21ff      	movs	r1, #255	; 0xff
 8004b4a:	5299      	strh	r1, [r3, r2]
 8004b4c:	e024      	b.n	8004b98 <HAL_UART_Receive_IT+0xf0>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10d      	bne.n	8004b72 <HAL_UART_Receive_IT+0xca>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d104      	bne.n	8004b68 <HAL_UART_Receive_IT+0xc0>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	225c      	movs	r2, #92	; 0x5c
 8004b62:	21ff      	movs	r1, #255	; 0xff
 8004b64:	5299      	strh	r1, [r3, r2]
 8004b66:	e017      	b.n	8004b98 <HAL_UART_Receive_IT+0xf0>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	225c      	movs	r2, #92	; 0x5c
 8004b6c:	217f      	movs	r1, #127	; 0x7f
 8004b6e:	5299      	strh	r1, [r3, r2]
 8004b70:	e012      	b.n	8004b98 <HAL_UART_Receive_IT+0xf0>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	689a      	ldr	r2, [r3, #8]
 8004b76:	2380      	movs	r3, #128	; 0x80
 8004b78:	055b      	lsls	r3, r3, #21
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d10c      	bne.n	8004b98 <HAL_UART_Receive_IT+0xf0>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d104      	bne.n	8004b90 <HAL_UART_Receive_IT+0xe8>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	225c      	movs	r2, #92	; 0x5c
 8004b8a:	217f      	movs	r1, #127	; 0x7f
 8004b8c:	5299      	strh	r1, [r3, r2]
 8004b8e:	e003      	b.n	8004b98 <HAL_UART_Receive_IT+0xf0>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	225c      	movs	r2, #92	; 0x5c
 8004b94:	213f      	movs	r1, #63	; 0x3f
 8004b96:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	226a      	movs	r2, #106	; 0x6a
 8004ba2:	2122      	movs	r1, #34	; 0x22
 8004ba4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2268      	movs	r2, #104	; 0x68
 8004baa:	2100      	movs	r1, #0
 8004bac:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	689a      	ldr	r2, [r3, #8]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2101      	movs	r1, #1
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	609a      	str	r2, [r3, #8]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2190      	movs	r1, #144	; 0x90
 8004bca:	0049      	lsls	r1, r1, #1
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	e000      	b.n	8004bd6 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8004bd4:	2302      	movs	r3, #2
  }
}
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	b004      	add	sp, #16
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	46c0      	nop			; (mov r8, r8)
 8004be0:	000001ff 	.word	0x000001ff

08004be4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004be4:	b590      	push	{r4, r7, lr}
 8004be6:	b087      	sub	sp, #28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8004bf0:	2317      	movs	r3, #23
 8004bf2:	18fb      	adds	r3, r7, r3
 8004bf4:	2210      	movs	r2, #16
 8004bf6:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8004bf8:	230a      	movs	r3, #10
 8004bfa:	18fb      	adds	r3, r7, r3
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8004c00:	2314      	movs	r3, #20
 8004c02:	18fb      	adds	r3, r7, r3
 8004c04:	2200      	movs	r2, #0
 8004c06:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c08:	2313      	movs	r3, #19
 8004c0a:	18fb      	adds	r3, r7, r3
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	431a      	orrs	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	69db      	ldr	r3, [r3, #28]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4aa1      	ldr	r2, [pc, #644]	; (8004eb4 <UART_SetConfig+0x2d0>)
 8004c30:	4013      	ands	r3, r2
 8004c32:	0019      	movs	r1, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	4a9c      	ldr	r2, [pc, #624]	; (8004eb8 <UART_SetConfig+0x2d4>)
 8004c46:	4013      	ands	r3, r2
 8004c48:	0019      	movs	r1, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68da      	ldr	r2, [r3, #12]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	699a      	ldr	r2, [r3, #24]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	4a94      	ldr	r2, [pc, #592]	; (8004ebc <UART_SetConfig+0x2d8>)
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	0019      	movs	r1, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a90      	ldr	r2, [pc, #576]	; (8004ec0 <UART_SetConfig+0x2dc>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d127      	bne.n	8004cd2 <UART_SetConfig+0xee>
 8004c82:	4b90      	ldr	r3, [pc, #576]	; (8004ec4 <UART_SetConfig+0x2e0>)
 8004c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c86:	2203      	movs	r2, #3
 8004c88:	4013      	ands	r3, r2
 8004c8a:	2b03      	cmp	r3, #3
 8004c8c:	d00d      	beq.n	8004caa <UART_SetConfig+0xc6>
 8004c8e:	d81b      	bhi.n	8004cc8 <UART_SetConfig+0xe4>
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d014      	beq.n	8004cbe <UART_SetConfig+0xda>
 8004c94:	d818      	bhi.n	8004cc8 <UART_SetConfig+0xe4>
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d002      	beq.n	8004ca0 <UART_SetConfig+0xbc>
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d00a      	beq.n	8004cb4 <UART_SetConfig+0xd0>
 8004c9e:	e013      	b.n	8004cc8 <UART_SetConfig+0xe4>
 8004ca0:	2317      	movs	r3, #23
 8004ca2:	18fb      	adds	r3, r7, r3
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	701a      	strb	r2, [r3, #0]
 8004ca8:	e021      	b.n	8004cee <UART_SetConfig+0x10a>
 8004caa:	2317      	movs	r3, #23
 8004cac:	18fb      	adds	r3, r7, r3
 8004cae:	2202      	movs	r2, #2
 8004cb0:	701a      	strb	r2, [r3, #0]
 8004cb2:	e01c      	b.n	8004cee <UART_SetConfig+0x10a>
 8004cb4:	2317      	movs	r3, #23
 8004cb6:	18fb      	adds	r3, r7, r3
 8004cb8:	2204      	movs	r2, #4
 8004cba:	701a      	strb	r2, [r3, #0]
 8004cbc:	e017      	b.n	8004cee <UART_SetConfig+0x10a>
 8004cbe:	2317      	movs	r3, #23
 8004cc0:	18fb      	adds	r3, r7, r3
 8004cc2:	2208      	movs	r2, #8
 8004cc4:	701a      	strb	r2, [r3, #0]
 8004cc6:	e012      	b.n	8004cee <UART_SetConfig+0x10a>
 8004cc8:	2317      	movs	r3, #23
 8004cca:	18fb      	adds	r3, r7, r3
 8004ccc:	2210      	movs	r2, #16
 8004cce:	701a      	strb	r2, [r3, #0]
 8004cd0:	e00d      	b.n	8004cee <UART_SetConfig+0x10a>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a7c      	ldr	r2, [pc, #496]	; (8004ec8 <UART_SetConfig+0x2e4>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d104      	bne.n	8004ce6 <UART_SetConfig+0x102>
 8004cdc:	2317      	movs	r3, #23
 8004cde:	18fb      	adds	r3, r7, r3
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	701a      	strb	r2, [r3, #0]
 8004ce4:	e003      	b.n	8004cee <UART_SetConfig+0x10a>
 8004ce6:	2317      	movs	r3, #23
 8004ce8:	18fb      	adds	r3, r7, r3
 8004cea:	2210      	movs	r2, #16
 8004cec:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	69da      	ldr	r2, [r3, #28]
 8004cf2:	2380      	movs	r3, #128	; 0x80
 8004cf4:	021b      	lsls	r3, r3, #8
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d000      	beq.n	8004cfc <UART_SetConfig+0x118>
 8004cfa:	e077      	b.n	8004dec <UART_SetConfig+0x208>
  {
    switch (clocksource)
 8004cfc:	2317      	movs	r3, #23
 8004cfe:	18fb      	adds	r3, r7, r3
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	2b08      	cmp	r3, #8
 8004d04:	d041      	beq.n	8004d8a <UART_SetConfig+0x1a6>
 8004d06:	dc52      	bgt.n	8004dae <UART_SetConfig+0x1ca>
 8004d08:	2b04      	cmp	r3, #4
 8004d0a:	d02a      	beq.n	8004d62 <UART_SetConfig+0x17e>
 8004d0c:	dc4f      	bgt.n	8004dae <UART_SetConfig+0x1ca>
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d002      	beq.n	8004d18 <UART_SetConfig+0x134>
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d014      	beq.n	8004d40 <UART_SetConfig+0x15c>
 8004d16:	e04a      	b.n	8004dae <UART_SetConfig+0x1ca>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004d18:	f7ff fcc6 	bl	80046a8 <HAL_RCC_GetPCLK1Freq>
 8004d1c:	0003      	movs	r3, r0
 8004d1e:	005a      	lsls	r2, r3, #1
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	085b      	lsrs	r3, r3, #1
 8004d26:	18d2      	adds	r2, r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	0019      	movs	r1, r3
 8004d2e:	0010      	movs	r0, r2
 8004d30:	f7fb f9ea 	bl	8000108 <__udivsi3>
 8004d34:	0003      	movs	r3, r0
 8004d36:	001a      	movs	r2, r3
 8004d38:	2314      	movs	r3, #20
 8004d3a:	18fb      	adds	r3, r7, r3
 8004d3c:	801a      	strh	r2, [r3, #0]
        break;
 8004d3e:	e03b      	b.n	8004db8 <UART_SetConfig+0x1d4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	085b      	lsrs	r3, r3, #1
 8004d46:	4a61      	ldr	r2, [pc, #388]	; (8004ecc <UART_SetConfig+0x2e8>)
 8004d48:	189a      	adds	r2, r3, r2
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	0019      	movs	r1, r3
 8004d50:	0010      	movs	r0, r2
 8004d52:	f7fb f9d9 	bl	8000108 <__udivsi3>
 8004d56:	0003      	movs	r3, r0
 8004d58:	001a      	movs	r2, r3
 8004d5a:	2314      	movs	r3, #20
 8004d5c:	18fb      	adds	r3, r7, r3
 8004d5e:	801a      	strh	r2, [r3, #0]
        break;
 8004d60:	e02a      	b.n	8004db8 <UART_SetConfig+0x1d4>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004d62:	f7ff fc17 	bl	8004594 <HAL_RCC_GetSysClockFreq>
 8004d66:	0003      	movs	r3, r0
 8004d68:	005a      	lsls	r2, r3, #1
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	085b      	lsrs	r3, r3, #1
 8004d70:	18d2      	adds	r2, r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	0019      	movs	r1, r3
 8004d78:	0010      	movs	r0, r2
 8004d7a:	f7fb f9c5 	bl	8000108 <__udivsi3>
 8004d7e:	0003      	movs	r3, r0
 8004d80:	001a      	movs	r2, r3
 8004d82:	2314      	movs	r3, #20
 8004d84:	18fb      	adds	r3, r7, r3
 8004d86:	801a      	strh	r2, [r3, #0]
        break;
 8004d88:	e016      	b.n	8004db8 <UART_SetConfig+0x1d4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	085b      	lsrs	r3, r3, #1
 8004d90:	2280      	movs	r2, #128	; 0x80
 8004d92:	0252      	lsls	r2, r2, #9
 8004d94:	189a      	adds	r2, r3, r2
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	0019      	movs	r1, r3
 8004d9c:	0010      	movs	r0, r2
 8004d9e:	f7fb f9b3 	bl	8000108 <__udivsi3>
 8004da2:	0003      	movs	r3, r0
 8004da4:	001a      	movs	r2, r3
 8004da6:	2314      	movs	r3, #20
 8004da8:	18fb      	adds	r3, r7, r3
 8004daa:	801a      	strh	r2, [r3, #0]
        break;
 8004dac:	e004      	b.n	8004db8 <UART_SetConfig+0x1d4>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004dae:	2313      	movs	r3, #19
 8004db0:	18fb      	adds	r3, r7, r3
 8004db2:	2201      	movs	r2, #1
 8004db4:	701a      	strb	r2, [r3, #0]
        break;
 8004db6:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8004db8:	200a      	movs	r0, #10
 8004dba:	183b      	adds	r3, r7, r0
 8004dbc:	2414      	movs	r4, #20
 8004dbe:	193a      	adds	r2, r7, r4
 8004dc0:	8812      	ldrh	r2, [r2, #0]
 8004dc2:	210f      	movs	r1, #15
 8004dc4:	438a      	bics	r2, r1
 8004dc6:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dc8:	193b      	adds	r3, r7, r4
 8004dca:	881b      	ldrh	r3, [r3, #0]
 8004dcc:	105b      	asrs	r3, r3, #1
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	2207      	movs	r2, #7
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	b299      	uxth	r1, r3
 8004dd6:	183b      	adds	r3, r7, r0
 8004dd8:	183a      	adds	r2, r7, r0
 8004dda:	8812      	ldrh	r2, [r2, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	183a      	adds	r2, r7, r0
 8004de6:	8812      	ldrh	r2, [r2, #0]
 8004de8:	60da      	str	r2, [r3, #12]
 8004dea:	e05b      	b.n	8004ea4 <UART_SetConfig+0x2c0>
  }
  else
  {
    switch (clocksource)
 8004dec:	2317      	movs	r3, #23
 8004dee:	18fb      	adds	r3, r7, r3
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	2b08      	cmp	r3, #8
 8004df4:	d03f      	beq.n	8004e76 <UART_SetConfig+0x292>
 8004df6:	dc50      	bgt.n	8004e9a <UART_SetConfig+0x2b6>
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d029      	beq.n	8004e50 <UART_SetConfig+0x26c>
 8004dfc:	dc4d      	bgt.n	8004e9a <UART_SetConfig+0x2b6>
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d002      	beq.n	8004e08 <UART_SetConfig+0x224>
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d013      	beq.n	8004e2e <UART_SetConfig+0x24a>
 8004e06:	e048      	b.n	8004e9a <UART_SetConfig+0x2b6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004e08:	f7ff fc4e 	bl	80046a8 <HAL_RCC_GetPCLK1Freq>
 8004e0c:	0002      	movs	r2, r0
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	085b      	lsrs	r3, r3, #1
 8004e14:	18d2      	adds	r2, r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	0019      	movs	r1, r3
 8004e1c:	0010      	movs	r0, r2
 8004e1e:	f7fb f973 	bl	8000108 <__udivsi3>
 8004e22:	0003      	movs	r3, r0
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	60da      	str	r2, [r3, #12]
        break;
 8004e2c:	e03a      	b.n	8004ea4 <UART_SetConfig+0x2c0>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	085b      	lsrs	r3, r3, #1
 8004e34:	4a26      	ldr	r2, [pc, #152]	; (8004ed0 <UART_SetConfig+0x2ec>)
 8004e36:	189a      	adds	r2, r3, r2
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	0019      	movs	r1, r3
 8004e3e:	0010      	movs	r0, r2
 8004e40:	f7fb f962 	bl	8000108 <__udivsi3>
 8004e44:	0003      	movs	r3, r0
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	60da      	str	r2, [r3, #12]
        break;
 8004e4e:	e029      	b.n	8004ea4 <UART_SetConfig+0x2c0>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004e50:	f7ff fba0 	bl	8004594 <HAL_RCC_GetSysClockFreq>
 8004e54:	0002      	movs	r2, r0
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	085b      	lsrs	r3, r3, #1
 8004e5c:	18d2      	adds	r2, r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	0019      	movs	r1, r3
 8004e64:	0010      	movs	r0, r2
 8004e66:	f7fb f94f 	bl	8000108 <__udivsi3>
 8004e6a:	0003      	movs	r3, r0
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	60da      	str	r2, [r3, #12]
        break;
 8004e74:	e016      	b.n	8004ea4 <UART_SetConfig+0x2c0>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	085b      	lsrs	r3, r3, #1
 8004e7c:	2280      	movs	r2, #128	; 0x80
 8004e7e:	0212      	lsls	r2, r2, #8
 8004e80:	189a      	adds	r2, r3, r2
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	0019      	movs	r1, r3
 8004e88:	0010      	movs	r0, r2
 8004e8a:	f7fb f93d 	bl	8000108 <__udivsi3>
 8004e8e:	0003      	movs	r3, r0
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	60da      	str	r2, [r3, #12]
        break;
 8004e98:	e004      	b.n	8004ea4 <UART_SetConfig+0x2c0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004e9a:	2313      	movs	r3, #19
 8004e9c:	18fb      	adds	r3, r7, r3
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	701a      	strb	r2, [r3, #0]
        break;
 8004ea2:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8004ea4:	2313      	movs	r3, #19
 8004ea6:	18fb      	adds	r3, r7, r3
 8004ea8:	781b      	ldrb	r3, [r3, #0]

}
 8004eaa:	0018      	movs	r0, r3
 8004eac:	46bd      	mov	sp, r7
 8004eae:	b007      	add	sp, #28
 8004eb0:	bd90      	pop	{r4, r7, pc}
 8004eb2:	46c0      	nop			; (mov r8, r8)
 8004eb4:	efff69f3 	.word	0xefff69f3
 8004eb8:	ffffcfff 	.word	0xffffcfff
 8004ebc:	fffff4ff 	.word	0xfffff4ff
 8004ec0:	40013800 	.word	0x40013800
 8004ec4:	40021000 	.word	0x40021000
 8004ec8:	40004400 	.word	0x40004400
 8004ecc:	00f42400 	.word	0x00f42400
 8004ed0:	007a1200 	.word	0x007a1200

08004ed4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	d00b      	beq.n	8004efe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	4a4a      	ldr	r2, [pc, #296]	; (8005018 <UART_AdvFeatureConfig+0x144>)
 8004eee:	4013      	ands	r3, r2
 8004ef0:	0019      	movs	r1, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f02:	2202      	movs	r2, #2
 8004f04:	4013      	ands	r3, r2
 8004f06:	d00b      	beq.n	8004f20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	4a43      	ldr	r2, [pc, #268]	; (800501c <UART_AdvFeatureConfig+0x148>)
 8004f10:	4013      	ands	r3, r2
 8004f12:	0019      	movs	r1, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f24:	2204      	movs	r2, #4
 8004f26:	4013      	ands	r3, r2
 8004f28:	d00b      	beq.n	8004f42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	4a3b      	ldr	r2, [pc, #236]	; (8005020 <UART_AdvFeatureConfig+0x14c>)
 8004f32:	4013      	ands	r3, r2
 8004f34:	0019      	movs	r1, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f46:	2208      	movs	r2, #8
 8004f48:	4013      	ands	r3, r2
 8004f4a:	d00b      	beq.n	8004f64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	4a34      	ldr	r2, [pc, #208]	; (8005024 <UART_AdvFeatureConfig+0x150>)
 8004f54:	4013      	ands	r3, r2
 8004f56:	0019      	movs	r1, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	430a      	orrs	r2, r1
 8004f62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	2210      	movs	r2, #16
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	d00b      	beq.n	8004f86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	4a2c      	ldr	r2, [pc, #176]	; (8005028 <UART_AdvFeatureConfig+0x154>)
 8004f76:	4013      	ands	r3, r2
 8004f78:	0019      	movs	r1, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	430a      	orrs	r2, r1
 8004f84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	d00b      	beq.n	8004fa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	4a25      	ldr	r2, [pc, #148]	; (800502c <UART_AdvFeatureConfig+0x158>)
 8004f98:	4013      	ands	r3, r2
 8004f9a:	0019      	movs	r1, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fac:	2240      	movs	r2, #64	; 0x40
 8004fae:	4013      	ands	r3, r2
 8004fb0:	d01d      	beq.n	8004fee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	4a1d      	ldr	r2, [pc, #116]	; (8005030 <UART_AdvFeatureConfig+0x15c>)
 8004fba:	4013      	ands	r3, r2
 8004fbc:	0019      	movs	r1, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fce:	2380      	movs	r3, #128	; 0x80
 8004fd0:	035b      	lsls	r3, r3, #13
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d10b      	bne.n	8004fee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	4a15      	ldr	r2, [pc, #84]	; (8005034 <UART_AdvFeatureConfig+0x160>)
 8004fde:	4013      	ands	r3, r2
 8004fe0:	0019      	movs	r1, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff2:	2280      	movs	r2, #128	; 0x80
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	d00b      	beq.n	8005010 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	4a0e      	ldr	r2, [pc, #56]	; (8005038 <UART_AdvFeatureConfig+0x164>)
 8005000:	4013      	ands	r3, r2
 8005002:	0019      	movs	r1, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	430a      	orrs	r2, r1
 800500e:	605a      	str	r2, [r3, #4]
  }
}
 8005010:	46c0      	nop			; (mov r8, r8)
 8005012:	46bd      	mov	sp, r7
 8005014:	b002      	add	sp, #8
 8005016:	bd80      	pop	{r7, pc}
 8005018:	fffdffff 	.word	0xfffdffff
 800501c:	fffeffff 	.word	0xfffeffff
 8005020:	fffbffff 	.word	0xfffbffff
 8005024:	ffff7fff 	.word	0xffff7fff
 8005028:	ffffefff 	.word	0xffffefff
 800502c:	ffffdfff 	.word	0xffffdfff
 8005030:	ffefffff 	.word	0xffefffff
 8005034:	ff9fffff 	.word	0xff9fffff
 8005038:	fff7ffff 	.word	0xfff7ffff

0800503c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b086      	sub	sp, #24
 8005040:	af02      	add	r7, sp, #8
 8005042:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
 8005044:	2300      	movs	r3, #0
 8005046:	60fb      	str	r3, [r7, #12]
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	66da      	str	r2, [r3, #108]	; 0x6c

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800504e:	f7fb f923 	bl	8000298 <HAL_GetTick>
 8005052:	0003      	movs	r3, r0
 8005054:	60fb      	str	r3, [r7, #12]

  /* TEACK and REACK bits in ISR are checked only when available (not available on all F0 devices).
     Bits are defined for some specific devices, and are available only for UART instances supporting WakeUp from Stop Mode feature. 
  */
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a1e      	ldr	r2, [pc, #120]	; (80050d4 <UART_CheckIdleState+0x98>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d127      	bne.n	80050b0 <UART_CheckIdleState+0x74>
  {
    /* Check if the Transmitter is enabled */
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2208      	movs	r2, #8
 8005068:	4013      	ands	r3, r2
 800506a:	2b08      	cmp	r3, #8
 800506c:	d10c      	bne.n	8005088 <UART_CheckIdleState+0x4c>
    {
      /* Wait until TEACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2280      	movs	r2, #128	; 0x80
 8005072:	0391      	lsls	r1, r2, #14
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	4a18      	ldr	r2, [pc, #96]	; (80050d8 <UART_CheckIdleState+0x9c>)
 8005078:	9200      	str	r2, [sp, #0]
 800507a:	2200      	movs	r2, #0
 800507c:	f000 f82e 	bl	80050dc <UART_WaitOnFlagUntilTimeout>
 8005080:	1e03      	subs	r3, r0, #0
 8005082:	d001      	beq.n	8005088 <UART_CheckIdleState+0x4c>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e020      	b.n	80050ca <UART_CheckIdleState+0x8e>
      }
    }

    /* Check if the Receiver is enabled */
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2204      	movs	r2, #4
 8005090:	4013      	ands	r3, r2
 8005092:	2b04      	cmp	r3, #4
 8005094:	d10c      	bne.n	80050b0 <UART_CheckIdleState+0x74>
    {
      /* Wait until REACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2280      	movs	r2, #128	; 0x80
 800509a:	03d1      	lsls	r1, r2, #15
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	4a0e      	ldr	r2, [pc, #56]	; (80050d8 <UART_CheckIdleState+0x9c>)
 80050a0:	9200      	str	r2, [sp, #0]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f000 f81a 	bl	80050dc <UART_WaitOnFlagUntilTimeout>
 80050a8:	1e03      	subs	r3, r0, #0
 80050aa:	d001      	beq.n	80050b0 <UART_CheckIdleState+0x74>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e00c      	b.n	80050ca <UART_CheckIdleState+0x8e>
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2269      	movs	r2, #105	; 0x69
 80050b4:	2120      	movs	r1, #32
 80050b6:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	226a      	movs	r2, #106	; 0x6a
 80050bc:	2120      	movs	r1, #32
 80050be:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2268      	movs	r2, #104	; 0x68
 80050c4:	2100      	movs	r1, #0
 80050c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	0018      	movs	r0, r3
 80050cc:	46bd      	mov	sp, r7
 80050ce:	b004      	add	sp, #16
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	46c0      	nop			; (mov r8, r8)
 80050d4:	40013800 	.word	0x40013800
 80050d8:	01ffffff 	.word	0x01ffffff

080050dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	603b      	str	r3, [r7, #0]
 80050e8:	1dfb      	adds	r3, r7, #7
 80050ea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050ec:	e02b      	b.n	8005146 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	3301      	adds	r3, #1
 80050f2:	d028      	beq.n	8005146 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d007      	beq.n	800510a <UART_WaitOnFlagUntilTimeout+0x2e>
 80050fa:	f7fb f8cd 	bl	8000298 <HAL_GetTick>
 80050fe:	0002      	movs	r2, r0
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	429a      	cmp	r2, r3
 8005108:	d21d      	bcs.n	8005146 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4916      	ldr	r1, [pc, #88]	; (8005170 <UART_WaitOnFlagUntilTimeout+0x94>)
 8005116:	400a      	ands	r2, r1
 8005118:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	689a      	ldr	r2, [r3, #8]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2101      	movs	r1, #1
 8005126:	438a      	bics	r2, r1
 8005128:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2269      	movs	r2, #105	; 0x69
 800512e:	2120      	movs	r1, #32
 8005130:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	226a      	movs	r2, #106	; 0x6a
 8005136:	2120      	movs	r1, #32
 8005138:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2268      	movs	r2, #104	; 0x68
 800513e:	2100      	movs	r1, #0
 8005140:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e00f      	b.n	8005166 <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	69db      	ldr	r3, [r3, #28]
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	4013      	ands	r3, r2
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	425a      	negs	r2, r3
 8005156:	4153      	adcs	r3, r2
 8005158:	b2db      	uxtb	r3, r3
 800515a:	001a      	movs	r2, r3
 800515c:	1dfb      	adds	r3, r7, #7
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	429a      	cmp	r2, r3
 8005162:	d0c4      	beq.n	80050ee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	0018      	movs	r0, r3
 8005168:	46bd      	mov	sp, r7
 800516a:	b004      	add	sp, #16
 800516c:	bd80      	pop	{r7, pc}
 800516e:	46c0      	nop			; (mov r8, r8)
 8005170:	fffffe5f 	.word	0xfffffe5f

08005174 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005174:	b590      	push	{r4, r7, lr}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 800517c:	200e      	movs	r0, #14
 800517e:	183b      	adds	r3, r7, r0
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	215c      	movs	r1, #92	; 0x5c
 8005184:	5a52      	ldrh	r2, [r2, r1]
 8005186:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	226a      	movs	r2, #106	; 0x6a
 800518c:	5c9b      	ldrb	r3, [r3, r2]
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b22      	cmp	r3, #34	; 0x22
 8005192:	d159      	bne.n	8005248 <UART_Receive_IT+0xd4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	210c      	movs	r1, #12
 800519a:	187b      	adds	r3, r7, r1
 800519c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800519e:	801a      	strh	r2, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689a      	ldr	r2, [r3, #8]
 80051a4:	2380      	movs	r3, #128	; 0x80
 80051a6:	015b      	lsls	r3, r3, #5
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d114      	bne.n	80051d6 <UART_Receive_IT+0x62>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d110      	bne.n	80051d6 <UART_Receive_IT+0x62>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b8:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(uhdata & uhMask);
 80051ba:	187b      	adds	r3, r7, r1
 80051bc:	183a      	adds	r2, r7, r0
 80051be:	881b      	ldrh	r3, [r3, #0]
 80051c0:	8812      	ldrh	r2, [r2, #0]
 80051c2:	4013      	ands	r3, r2
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2U;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ce:	1c9a      	adds	r2, r3, #2
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	655a      	str	r2, [r3, #84]	; 0x54
 80051d4:	e010      	b.n	80051f8 <UART_Receive_IT+0x84>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80051d6:	230c      	movs	r3, #12
 80051d8:	18fb      	adds	r3, r7, r3
 80051da:	881b      	ldrh	r3, [r3, #0]
 80051dc:	b2d9      	uxtb	r1, r3
 80051de:	230e      	movs	r3, #14
 80051e0:	18fb      	adds	r3, r7, r3
 80051e2:	881b      	ldrh	r3, [r3, #0]
 80051e4:	b2d8      	uxtb	r0, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ea:	1c5c      	adds	r4, r3, #1
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6554      	str	r4, [r2, #84]	; 0x54
 80051f0:	0002      	movs	r2, r0
 80051f2:	400a      	ands	r2, r1
 80051f4:	b2d2      	uxtb	r2, r2
 80051f6:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0U)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	225a      	movs	r2, #90	; 0x5a
 80051fc:	5a9b      	ldrh	r3, [r3, r2]
 80051fe:	b29b      	uxth	r3, r3
 8005200:	3b01      	subs	r3, #1
 8005202:	b29b      	uxth	r3, r3
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	215a      	movs	r1, #90	; 0x5a
 8005208:	1c18      	adds	r0, r3, #0
 800520a:	5250      	strh	r0, [r2, r1]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d119      	bne.n	8005244 <UART_Receive_IT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4912      	ldr	r1, [pc, #72]	; (8005264 <UART_Receive_IT+0xf0>)
 800521c:	400a      	ands	r2, r1
 800521e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689a      	ldr	r2, [r3, #8]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2101      	movs	r1, #1
 800522c:	438a      	bics	r2, r1
 800522e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	226a      	movs	r2, #106	; 0x6a
 8005234:	2120      	movs	r1, #32
 8005236:	5499      	strb	r1, [r3, r2]

      HAL_UART_RxCpltCallback(huart);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	0018      	movs	r0, r3
 800523c:	f001 fc1e 	bl	8006a7c <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8005240:	2300      	movs	r3, #0
 8005242:	e00a      	b.n	800525a <UART_Receive_IT+0xe6>
    }

    return HAL_OK;
 8005244:	2300      	movs	r3, #0
 8005246:	e008      	b.n	800525a <UART_Receive_IT+0xe6>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	699a      	ldr	r2, [r3, #24]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2108      	movs	r1, #8
 8005254:	430a      	orrs	r2, r1
 8005256:	619a      	str	r2, [r3, #24]

    return HAL_BUSY;
 8005258:	2302      	movs	r3, #2
  }
}
 800525a:	0018      	movs	r0, r3
 800525c:	46bd      	mov	sp, r7
 800525e:	b005      	add	sp, #20
 8005260:	bd90      	pop	{r4, r7, pc}
 8005262:	46c0      	nop			; (mov r8, r8)
 8005264:	fffffedf 	.word	0xfffffedf

08005268 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	000a      	movs	r2, r1
 8005272:	1cfb      	adds	r3, r7, #3
 8005274:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0;
 8005276:	230f      	movs	r3, #15
 8005278:	18fb      	adds	r3, r7, r3
 800527a:	2200      	movs	r2, #0
 800527c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	7c1b      	ldrb	r3, [r3, #16]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10e      	bne.n	80052a4 <USBD_CDC_Init+0x3c>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8005286:	2380      	movs	r3, #128	; 0x80
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	2202      	movs	r2, #2
 800528e:	2181      	movs	r1, #129	; 0x81
 8005290:	f001 fe29 	bl	8006ee6 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8005294:	2380      	movs	r3, #128	; 0x80
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	2202      	movs	r2, #2
 800529c:	2101      	movs	r1, #1
 800529e:	f001 fe22 	bl	8006ee6 <USBD_LL_OpenEP>
 80052a2:	e00b      	b.n	80052bc <USBD_CDC_Init+0x54>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	2340      	movs	r3, #64	; 0x40
 80052a8:	2202      	movs	r2, #2
 80052aa:	2181      	movs	r1, #129	; 0x81
 80052ac:	f001 fe1b 	bl	8006ee6 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	2340      	movs	r3, #64	; 0x40
 80052b4:	2202      	movs	r2, #2
 80052b6:	2101      	movs	r1, #1
 80052b8:	f001 fe15 	bl	8006ee6 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	2308      	movs	r3, #8
 80052c0:	2203      	movs	r2, #3
 80052c2:	2182      	movs	r1, #130	; 0x82
 80052c4:	f001 fe0f 	bl	8006ee6 <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80052c8:	2387      	movs	r3, #135	; 0x87
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	0018      	movs	r0, r3
 80052ce:	f001 fe89 	bl	8006fe4 <USBD_static_malloc>
 80052d2:	0001      	movs	r1, r0
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	2386      	movs	r3, #134	; 0x86
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	50d1      	str	r1, [r2, r3]
  
  if(pdev->pClassData == NULL)
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	2386      	movs	r3, #134	; 0x86
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	58d3      	ldr	r3, [r2, r3]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d104      	bne.n	80052f2 <USBD_CDC_Init+0x8a>
  {
    ret = 1; 
 80052e8:	230f      	movs	r3, #15
 80052ea:	18fb      	adds	r3, r7, r3
 80052ec:	2201      	movs	r2, #1
 80052ee:	701a      	strb	r2, [r3, #0]
 80052f0:	e02c      	b.n	800534c <USBD_CDC_Init+0xe4>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	2386      	movs	r3, #134	; 0x86
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	58d3      	ldr	r3, [r2, r3]
 80052fa:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	2387      	movs	r3, #135	; 0x87
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	58d3      	ldr	r3, [r2, r3]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	2385      	movs	r3, #133	; 0x85
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	2100      	movs	r1, #0
 8005310:	50d1      	str	r1, [r2, r3]
    hcdc->RxState =0;
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	2386      	movs	r3, #134	; 0x86
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	2100      	movs	r1, #0
 800531a:	50d1      	str	r1, [r2, r3]
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	7c1b      	ldrb	r3, [r3, #16]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10a      	bne.n	800533a <USBD_CDC_Init+0xd2>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	2381      	movs	r3, #129	; 0x81
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	58d2      	ldr	r2, [r2, r3]
 800532c:	2380      	movs	r3, #128	; 0x80
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	2101      	movs	r1, #1
 8005334:	f001 fe41 	bl	8006fba <USBD_LL_PrepareReceive>
 8005338:	e008      	b.n	800534c <USBD_CDC_Init+0xe4>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	2381      	movs	r3, #129	; 0x81
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	58d2      	ldr	r2, [r2, r3]
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	2340      	movs	r3, #64	; 0x40
 8005346:	2101      	movs	r1, #1
 8005348:	f001 fe37 	bl	8006fba <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 800534c:	230f      	movs	r3, #15
 800534e:	18fb      	adds	r3, r7, r3
 8005350:	781b      	ldrb	r3, [r3, #0]
}
 8005352:	0018      	movs	r0, r3
 8005354:	46bd      	mov	sp, r7
 8005356:	b004      	add	sp, #16
 8005358:	bd80      	pop	{r7, pc}

0800535a <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b084      	sub	sp, #16
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
 8005362:	000a      	movs	r2, r1
 8005364:	1cfb      	adds	r3, r7, #3
 8005366:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0;
 8005368:	230f      	movs	r3, #15
 800536a:	18fb      	adds	r3, r7, r3
 800536c:	2200      	movs	r2, #0
 800536e:	701a      	strb	r2, [r3, #0]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2181      	movs	r1, #129	; 0x81
 8005374:	0018      	movs	r0, r3
 8005376:	f001 fdc6 	bl	8006f06 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2101      	movs	r1, #1
 800537e:	0018      	movs	r0, r3
 8005380:	f001 fdc1 	bl	8006f06 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2182      	movs	r1, #130	; 0x82
 8005388:	0018      	movs	r0, r3
 800538a:	f001 fdbc 	bl	8006f06 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	2386      	movs	r3, #134	; 0x86
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	58d3      	ldr	r3, [r2, r3]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d011      	beq.n	80053be <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	2387      	movs	r3, #135	; 0x87
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	58d3      	ldr	r3, [r2, r3]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	2386      	movs	r3, #134	; 0x86
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	58d3      	ldr	r3, [r2, r3]
 80053ae:	0018      	movs	r0, r3
 80053b0:	f001 fe1c 	bl	8006fec <USBD_static_free>
    pdev->pClassData = NULL;
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	2386      	movs	r3, #134	; 0x86
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	2100      	movs	r1, #0
 80053bc:	50d1      	str	r1, [r2, r3]
  }
  
  return ret;
 80053be:	230f      	movs	r3, #15
 80053c0:	18fb      	adds	r3, r7, r3
 80053c2:	781b      	ldrb	r3, [r3, #0]
}
 80053c4:	0018      	movs	r0, r3
 80053c6:	46bd      	mov	sp, r7
 80053c8:	b004      	add	sp, #16
 80053ca:	bd80      	pop	{r7, pc}

080053cc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	2386      	movs	r3, #134	; 0x86
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	58d3      	ldr	r3, [r2, r3]
 80053de:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	001a      	movs	r2, r3
 80053e6:	2360      	movs	r3, #96	; 0x60
 80053e8:	4013      	ands	r3, r2
 80053ea:	d03c      	beq.n	8005466 <USBD_CDC_Setup+0x9a>
 80053ec:	2b20      	cmp	r3, #32
 80053ee:	d149      	bne.n	8005484 <USBD_CDC_Setup+0xb8>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	88db      	ldrh	r3, [r3, #6]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d02b      	beq.n	8005450 <USBD_CDC_Setup+0x84>
    {
      if (req->bmRequest & 0x80)
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	b25b      	sxtb	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	da12      	bge.n	8005428 <USBD_CDC_Setup+0x5c>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	2387      	movs	r3, #135	; 0x87
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	58d3      	ldr	r3, [r2, r3]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	683a      	ldr	r2, [r7, #0]
 800540e:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8005410:	68f9      	ldr	r1, [r7, #12]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	88d2      	ldrh	r2, [r2, #6]
 8005416:	4798      	blx	r3
                                                          req->wLength);
          USBD_CtlSendData (pdev, 
                            (uint8_t *)hcdc->data,
 8005418:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev, 
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	88da      	ldrh	r2, [r3, #6]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	0018      	movs	r0, r3
 8005422:	f001 f93a 	bl	800669a <USBD_CtlSendData>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t*)req,
                                                        0);
    }
    break;
 8005426:	e02e      	b.n	8005486 <USBD_CDC_Setup+0xba>
        hcdc->CmdOpCode = req->bRequest;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	7859      	ldrb	r1, [r3, #1]
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	2380      	movs	r3, #128	; 0x80
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	54d1      	strb	r1, [r2, r3]
        hcdc->CmdLength = req->wLength;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	88db      	ldrh	r3, [r3, #6]
 8005438:	b2d9      	uxtb	r1, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	4a14      	ldr	r2, [pc, #80]	; (8005490 <USBD_CDC_Setup+0xc4>)
 800543e:	5499      	strb	r1, [r3, r2]
                           (uint8_t *)hcdc->data,
 8005440:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev, 
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	88da      	ldrh	r2, [r3, #6]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	0018      	movs	r0, r3
 800544a:	f001 f959 	bl	8006700 <USBD_CtlPrepareRx>
    break;
 800544e:	e01a      	b.n	8005486 <USBD_CDC_Setup+0xba>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	2387      	movs	r3, #135	; 0x87
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	58d3      	ldr	r3, [r2, r3]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	7850      	ldrb	r0, [r2, #1]
 800545e:	6839      	ldr	r1, [r7, #0]
 8005460:	2200      	movs	r2, #0
 8005462:	4798      	blx	r3
    break;
 8005464:	e00f      	b.n	8005486 <USBD_CDC_Setup+0xba>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	785b      	ldrb	r3, [r3, #1]
 800546a:	2b0a      	cmp	r3, #10
 800546c:	d002      	beq.n	8005474 <USBD_CDC_Setup+0xa8>
 800546e:	2b0b      	cmp	r3, #11
 8005470:	d007      	beq.n	8005482 <USBD_CDC_Setup+0xb6>
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 8005472:	e007      	b.n	8005484 <USBD_CDC_Setup+0xb8>
      USBD_CtlSendData (pdev,
 8005474:	4907      	ldr	r1, [pc, #28]	; (8005494 <USBD_CDC_Setup+0xc8>)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	0018      	movs	r0, r3
 800547c:	f001 f90d 	bl	800669a <USBD_CtlSendData>
      break;
 8005480:	e000      	b.n	8005484 <USBD_CDC_Setup+0xb8>
      break;
 8005482:	46c0      	nop			; (mov r8, r8)
    break;
 8005484:	46c0      	nop			; (mov r8, r8)
  }
  return USBD_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	0018      	movs	r0, r3
 800548a:	46bd      	mov	sp, r7
 800548c:	b004      	add	sp, #16
 800548e:	bd80      	pop	{r7, pc}
 8005490:	00000201 	.word	0x00000201
 8005494:	200001a0 	.word	0x200001a0

08005498 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	000a      	movs	r2, r1
 80054a2:	1cfb      	adds	r3, r7, #3
 80054a4:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	2386      	movs	r3, #134	; 0x86
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	58d3      	ldr	r3, [r2, r3]
 80054ae:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	2386      	movs	r3, #134	; 0x86
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	58d3      	ldr	r3, [r2, r3]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d006      	beq.n	80054ca <USBD_CDC_DataIn+0x32>
  {
    
    hcdc->TxState = 0;
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	2385      	movs	r3, #133	; 0x85
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	2100      	movs	r1, #0
 80054c4:	50d1      	str	r1, [r2, r3]

    return USBD_OK;
 80054c6:	2300      	movs	r3, #0
 80054c8:	e000      	b.n	80054cc <USBD_CDC_DataIn+0x34>
  }
  else
  {
    return USBD_FAIL;
 80054ca:	2302      	movs	r3, #2
  }
}
 80054cc:	0018      	movs	r0, r3
 80054ce:	46bd      	mov	sp, r7
 80054d0:	b004      	add	sp, #16
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	000a      	movs	r2, r1
 80054de:	1cfb      	adds	r3, r7, #3
 80054e0:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	2386      	movs	r3, #134	; 0x86
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	58d3      	ldr	r3, [r2, r3]
 80054ea:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80054ec:	1cfb      	adds	r3, r7, #3
 80054ee:	781a      	ldrb	r2, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	0011      	movs	r1, r2
 80054f4:	0018      	movs	r0, r3
 80054f6:	f001 fd6d 	bl	8006fd4 <USBD_LL_GetRxDataSize>
 80054fa:	0001      	movs	r1, r0
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	2383      	movs	r3, #131	; 0x83
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	50d1      	str	r1, [r2, r3]
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	2386      	movs	r3, #134	; 0x86
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	58d3      	ldr	r3, [r2, r3]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d011      	beq.n	8005534 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	2387      	movs	r3, #135	; 0x87
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	58d3      	ldr	r3, [r2, r3]
 8005518:	68da      	ldr	r2, [r3, #12]
 800551a:	68f9      	ldr	r1, [r7, #12]
 800551c:	2381      	movs	r3, #129	; 0x81
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	58c8      	ldr	r0, [r1, r3]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2183      	movs	r1, #131	; 0x83
 8005526:	0089      	lsls	r1, r1, #2
 8005528:	468c      	mov	ip, r1
 800552a:	4463      	add	r3, ip
 800552c:	0019      	movs	r1, r3
 800552e:	4790      	blx	r2

    return USBD_OK;
 8005530:	2300      	movs	r3, #0
 8005532:	e000      	b.n	8005536 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8005534:	2302      	movs	r3, #2
  }
}
 8005536:	0018      	movs	r0, r3
 8005538:	46bd      	mov	sp, r7
 800553a:	b004      	add	sp, #16
 800553c:	bd80      	pop	{r7, pc}
	...

08005540 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8005540:	b590      	push	{r4, r7, lr}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	2386      	movs	r3, #134	; 0x86
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	58d3      	ldr	r3, [r2, r3]
 8005550:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	2387      	movs	r3, #135	; 0x87
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	58d3      	ldr	r3, [r2, r3]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d019      	beq.n	8005592 <USBD_CDC_EP0_RxReady+0x52>
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	2380      	movs	r3, #128	; 0x80
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	5cd3      	ldrb	r3, [r2, r3]
 8005566:	2bff      	cmp	r3, #255	; 0xff
 8005568:	d013      	beq.n	8005592 <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	2387      	movs	r3, #135	; 0x87
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	58d3      	ldr	r3, [r2, r3]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	68f9      	ldr	r1, [r7, #12]
 8005576:	2280      	movs	r2, #128	; 0x80
 8005578:	0092      	lsls	r2, r2, #2
 800557a:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)hcdc->data,
 800557c:	68f9      	ldr	r1, [r7, #12]
                                                      hcdc->CmdLength);
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	4c06      	ldr	r4, [pc, #24]	; (800559c <USBD_CDC_EP0_RxReady+0x5c>)
 8005582:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005584:	b292      	uxth	r2, r2
 8005586:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFF; 
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	2380      	movs	r3, #128	; 0x80
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	21ff      	movs	r1, #255	; 0xff
 8005590:	54d1      	strb	r1, [r2, r3]
      
  }
  return USBD_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	0018      	movs	r0, r3
 8005596:	46bd      	mov	sp, r7
 8005598:	b005      	add	sp, #20
 800559a:	bd90      	pop	{r4, r7, pc}
 800559c:	00000201 	.word	0x00000201

080055a0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2243      	movs	r2, #67	; 0x43
 80055ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80055ae:	4b02      	ldr	r3, [pc, #8]	; (80055b8 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 80055b0:	0018      	movs	r0, r3
 80055b2:	46bd      	mov	sp, r7
 80055b4:	b002      	add	sp, #8
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	20000088 	.word	0x20000088

080055bc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2243      	movs	r2, #67	; 0x43
 80055c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80055ca:	4b02      	ldr	r3, [pc, #8]	; (80055d4 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 80055cc:	0018      	movs	r0, r3
 80055ce:	46bd      	mov	sp, r7
 80055d0:	b002      	add	sp, #8
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	20000044 	.word	0x20000044

080055d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2243      	movs	r2, #67	; 0x43
 80055e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80055e6:	4b02      	ldr	r3, [pc, #8]	; (80055f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 80055e8:	0018      	movs	r0, r3
 80055ea:	46bd      	mov	sp, r7
 80055ec:	b002      	add	sp, #8
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	200000cc 	.word	0x200000cc

080055f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	220a      	movs	r2, #10
 8005600:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005602:	4b02      	ldr	r3, [pc, #8]	; (800560c <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8005604:	0018      	movs	r0, r3
 8005606:	46bd      	mov	sp, r7
 8005608:	b002      	add	sp, #8
 800560a:	bd80      	pop	{r7, pc}
 800560c:	20000000 	.word	0x20000000

08005610 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800561a:	200f      	movs	r0, #15
 800561c:	183b      	adds	r3, r7, r0
 800561e:	2202      	movs	r2, #2
 8005620:	701a      	strb	r2, [r3, #0]
  
  if(fops != NULL)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d007      	beq.n	8005638 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData= fops;
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	2387      	movs	r3, #135	; 0x87
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	6839      	ldr	r1, [r7, #0]
 8005630:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;    
 8005632:	183b      	adds	r3, r7, r0
 8005634:	2200      	movs	r2, #0
 8005636:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8005638:	230f      	movs	r3, #15
 800563a:	18fb      	adds	r3, r7, r3
 800563c:	781b      	ldrb	r3, [r3, #0]
}
 800563e:	0018      	movs	r0, r3
 8005640:	46bd      	mov	sp, r7
 8005642:	b004      	add	sp, #16
 8005644:	bd80      	pop	{r7, pc}

08005646 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b086      	sub	sp, #24
 800564a:	af00      	add	r7, sp, #0
 800564c:	60f8      	str	r0, [r7, #12]
 800564e:	60b9      	str	r1, [r7, #8]
 8005650:	1dbb      	adds	r3, r7, #6
 8005652:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	2386      	movs	r3, #134	; 0x86
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	58d3      	ldr	r3, [r2, r3]
 800565c:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	2382      	movs	r3, #130	; 0x82
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	68b9      	ldr	r1, [r7, #8]
 8005666:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;  
 8005668:	1dbb      	adds	r3, r7, #6
 800566a:	8819      	ldrh	r1, [r3, #0]
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	2384      	movs	r3, #132	; 0x84
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	50d1      	str	r1, [r2, r3]
  
  return USBD_OK;  
 8005674:	2300      	movs	r3, #0
}
 8005676:	0018      	movs	r0, r3
 8005678:	46bd      	mov	sp, r7
 800567a:	b006      	add	sp, #24
 800567c:	bd80      	pop	{r7, pc}

0800567e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b084      	sub	sp, #16
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
 8005686:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	2386      	movs	r3, #134	; 0x86
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	58d3      	ldr	r3, [r2, r3]
 8005690:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	2381      	movs	r3, #129	; 0x81
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	6839      	ldr	r1, [r7, #0]
 800569a:	50d1      	str	r1, [r2, r3]
  
  return USBD_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	0018      	movs	r0, r3
 80056a0:	46bd      	mov	sp, r7
 80056a2:	b004      	add	sp, #16
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b084      	sub	sp, #16
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	2386      	movs	r3, #134	; 0x86
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	58d3      	ldr	r3, [r2, r3]
 80056b6:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	2386      	movs	r3, #134	; 0x86
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	58d3      	ldr	r3, [r2, r3]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d01c      	beq.n	80056fe <USBD_CDC_TransmitPacket+0x58>
  {
    if(hcdc->TxState == 0)
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	2385      	movs	r3, #133	; 0x85
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	58d3      	ldr	r3, [r2, r3]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d114      	bne.n	80056fa <USBD_CDC_TransmitPacket+0x54>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	2385      	movs	r3, #133	; 0x85
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	2101      	movs	r1, #1
 80056d8:	50d1      	str	r1, [r2, r3]
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	2382      	movs	r3, #130	; 0x82
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	58d1      	ldr	r1, [r2, r3]
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	2384      	movs	r3, #132	; 0x84
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev,
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	000a      	movs	r2, r1
 80056f0:	2181      	movs	r1, #129	; 0x81
 80056f2:	f001 fc55 	bl	8006fa0 <USBD_LL_Transmit>
      
      return USBD_OK;
 80056f6:	2300      	movs	r3, #0
 80056f8:	e002      	b.n	8005700 <USBD_CDC_TransmitPacket+0x5a>
    }
    else
    {
      return USBD_BUSY;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e000      	b.n	8005700 <USBD_CDC_TransmitPacket+0x5a>
    }
  }
  else
  {
    return USBD_FAIL;
 80056fe:	2302      	movs	r3, #2
  }
}
 8005700:	0018      	movs	r0, r3
 8005702:	46bd      	mov	sp, r7
 8005704:	b004      	add	sp, #16
 8005706:	bd80      	pop	{r7, pc}

08005708 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	2386      	movs	r3, #134	; 0x86
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	58d3      	ldr	r3, [r2, r3]
 8005718:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	2386      	movs	r3, #134	; 0x86
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	58d3      	ldr	r3, [r2, r3]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d019      	beq.n	800575a <USBD_CDC_ReceivePacket+0x52>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	7c1b      	ldrb	r3, [r3, #16]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10a      	bne.n	8005744 <USBD_CDC_ReceivePacket+0x3c>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	2381      	movs	r3, #129	; 0x81
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	58d2      	ldr	r2, [r2, r3]
 8005736:	2380      	movs	r3, #128	; 0x80
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	2101      	movs	r1, #1
 800573e:	f001 fc3c 	bl	8006fba <USBD_LL_PrepareReceive>
 8005742:	e008      	b.n	8005756 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	2381      	movs	r3, #129	; 0x81
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	58d2      	ldr	r2, [r2, r3]
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	2340      	movs	r3, #64	; 0x40
 8005750:	2101      	movs	r1, #1
 8005752:	f001 fc32 	bl	8006fba <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005756:	2300      	movs	r3, #0
 8005758:	e000      	b.n	800575c <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800575a:	2302      	movs	r3, #2
  }
}
 800575c:	0018      	movs	r0, r3
 800575e:	46bd      	mov	sp, r7
 8005760:	b004      	add	sp, #16
 8005762:	bd80      	pop	{r7, pc}

08005764 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	1dfb      	adds	r3, r7, #7
 8005770:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d101      	bne.n	800577c <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8005778:	2302      	movs	r3, #2
 800577a:	e020      	b.n	80057be <USBD_Init+0x5a>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	2385      	movs	r3, #133	; 0x85
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	58d3      	ldr	r3, [r2, r3]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d004      	beq.n	8005792 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	2385      	movs	r3, #133	; 0x85
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	2100      	movs	r1, #0
 8005790:	50d1      	str	r1, [r2, r3]
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d004      	beq.n	80057a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	2384      	movs	r3, #132	; 0x84
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	68b9      	ldr	r1, [r7, #8]
 80057a0:	50d1      	str	r1, [r2, r3]
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	23fe      	movs	r3, #254	; 0xfe
 80057a6:	005b      	lsls	r3, r3, #1
 80057a8:	2101      	movs	r1, #1
 80057aa:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	1dfa      	adds	r2, r7, #7
 80057b0:	7812      	ldrb	r2, [r2, #0]
 80057b2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	0018      	movs	r0, r3
 80057b8:	f001 fb40 	bl	8006e3c <USBD_LL_Init>
  
  return USBD_OK; 
 80057bc:	2300      	movs	r3, #0
}
 80057be:	0018      	movs	r0, r3
 80057c0:	46bd      	mov	sp, r7
 80057c2:	b004      	add	sp, #16
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b084      	sub	sp, #16
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
 80057ce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80057d0:	200f      	movs	r0, #15
 80057d2:	183b      	adds	r3, r7, r0
 80057d4:	2200      	movs	r2, #0
 80057d6:	701a      	strb	r2, [r3, #0]
  if(pclass != 0)
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d008      	beq.n	80057f0 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	2385      	movs	r3, #133	; 0x85
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	6839      	ldr	r1, [r7, #0]
 80057e6:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 80057e8:	183b      	adds	r3, r7, r0
 80057ea:	2200      	movs	r2, #0
 80057ec:	701a      	strb	r2, [r3, #0]
 80057ee:	e003      	b.n	80057f8 <USBD_RegisterClass+0x32>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 80057f0:	230f      	movs	r3, #15
 80057f2:	18fb      	adds	r3, r7, r3
 80057f4:	2202      	movs	r2, #2
 80057f6:	701a      	strb	r2, [r3, #0]
  }
  
  return status;
 80057f8:	230f      	movs	r3, #15
 80057fa:	18fb      	adds	r3, r7, r3
 80057fc:	781b      	ldrb	r3, [r3, #0]
}
 80057fe:	0018      	movs	r0, r3
 8005800:	46bd      	mov	sp, r7
 8005802:	b004      	add	sp, #16
 8005804:	bd80      	pop	{r7, pc}

08005806 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8005806:	b580      	push	{r7, lr}
 8005808:	b082      	sub	sp, #8
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	0018      	movs	r0, r3
 8005812:	f001 fb5b 	bl	8006ecc <USBD_LL_Start>
  
  return USBD_OK;  
 8005816:	2300      	movs	r3, #0
}
 8005818:	0018      	movs	r0, r3
 800581a:	46bd      	mov	sp, r7
 800581c:	b002      	add	sp, #8
 800581e:	bd80      	pop	{r7, pc}

08005820 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	0018      	movs	r0, r3
 800582c:	46bd      	mov	sp, r7
 800582e:	b002      	add	sp, #8
 8005830:	bd80      	pop	{r7, pc}

08005832 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005832:	b590      	push	{r4, r7, lr}
 8005834:	b085      	sub	sp, #20
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
 800583a:	000a      	movs	r2, r1
 800583c:	1cfb      	adds	r3, r7, #3
 800583e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8005840:	240f      	movs	r4, #15
 8005842:	193b      	adds	r3, r7, r4
 8005844:	2202      	movs	r2, #2
 8005846:	701a      	strb	r2, [r3, #0]
  
  if(pdev->pClass != NULL)
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	2385      	movs	r3, #133	; 0x85
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	58d3      	ldr	r3, [r2, r3]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00e      	beq.n	8005872 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	2385      	movs	r3, #133	; 0x85
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	58d3      	ldr	r3, [r2, r3]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	1cfa      	adds	r2, r7, #3
 8005860:	7811      	ldrb	r1, [r2, #0]
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	0010      	movs	r0, r2
 8005866:	4798      	blx	r3
 8005868:	1e03      	subs	r3, r0, #0
 800586a:	d102      	bne.n	8005872 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800586c:	193b      	adds	r3, r7, r4
 800586e:	2200      	movs	r2, #0
 8005870:	701a      	strb	r2, [r3, #0]
    }
  }
  return ret; 
 8005872:	230f      	movs	r3, #15
 8005874:	18fb      	adds	r3, r7, r3
 8005876:	781b      	ldrb	r3, [r3, #0]
}
 8005878:	0018      	movs	r0, r3
 800587a:	46bd      	mov	sp, r7
 800587c:	b005      	add	sp, #20
 800587e:	bd90      	pop	{r4, r7, pc}

08005880 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	000a      	movs	r2, r1
 800588a:	1cfb      	adds	r3, r7, #3
 800588c:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	2385      	movs	r3, #133	; 0x85
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	58d3      	ldr	r3, [r2, r3]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	1cfa      	adds	r2, r7, #3
 800589a:	7811      	ldrb	r1, [r2, #0]
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	0010      	movs	r0, r2
 80058a0:	4798      	blx	r3
  return USBD_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	0018      	movs	r0, r3
 80058a6:	46bd      	mov	sp, r7
 80058a8:	b002      	add	sp, #8
 80058aa:	bd80      	pop	{r7, pc}

080058ac <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2282      	movs	r2, #130	; 0x82
 80058ba:	0092      	lsls	r2, r2, #2
 80058bc:	4694      	mov	ip, r2
 80058be:	4463      	add	r3, ip
 80058c0:	683a      	ldr	r2, [r7, #0]
 80058c2:	0011      	movs	r1, r2
 80058c4:	0018      	movs	r0, r3
 80058c6:	f000 fe2e 	bl	8006526 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	23fa      	movs	r3, #250	; 0xfa
 80058ce:	005b      	lsls	r3, r3, #1
 80058d0:	2101      	movs	r1, #1
 80058d2:	50d1      	str	r1, [r2, r3]
  pdev->ep0_data_len = pdev->request.wLength;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a23      	ldr	r2, [pc, #140]	; (8005964 <USBD_LL_SetupStage+0xb8>)
 80058d8:	5a9b      	ldrh	r3, [r3, r2]
 80058da:	0019      	movs	r1, r3
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	23fc      	movs	r3, #252	; 0xfc
 80058e0:	005b      	lsls	r3, r3, #1
 80058e2:	50d1      	str	r1, [r2, r3]
  
  switch (pdev->request.bmRequest & 0x1F) 
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	2382      	movs	r3, #130	; 0x82
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	5cd3      	ldrb	r3, [r2, r3]
 80058ec:	001a      	movs	r2, r3
 80058ee:	231f      	movs	r3, #31
 80058f0:	4013      	ands	r3, r2
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d019      	beq.n	800592a <USBD_LL_SetupStage+0x7e>
 80058f6:	dc22      	bgt.n	800593e <USBD_LL_SetupStage+0x92>
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d002      	beq.n	8005902 <USBD_LL_SetupStage+0x56>
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d00a      	beq.n	8005916 <USBD_LL_SetupStage+0x6a>
 8005900:	e01d      	b.n	800593e <USBD_LL_SetupStage+0x92>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2282      	movs	r2, #130	; 0x82
 8005906:	0092      	lsls	r2, r2, #2
 8005908:	189a      	adds	r2, r3, r2
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	0011      	movs	r1, r2
 800590e:	0018      	movs	r0, r3
 8005910:	f000 f9be 	bl	8005c90 <USBD_StdDevReq>
    break;
 8005914:	e020      	b.n	8005958 <USBD_LL_SetupStage+0xac>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2282      	movs	r2, #130	; 0x82
 800591a:	0092      	lsls	r2, r2, #2
 800591c:	189a      	adds	r2, r3, r2
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	0011      	movs	r1, r2
 8005922:	0018      	movs	r0, r3
 8005924:	f000 fa08 	bl	8005d38 <USBD_StdItfReq>
    break;
 8005928:	e016      	b.n	8005958 <USBD_LL_SetupStage+0xac>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2282      	movs	r2, #130	; 0x82
 800592e:	0092      	lsls	r2, r2, #2
 8005930:	189a      	adds	r2, r3, r2
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	0011      	movs	r1, r2
 8005936:	0018      	movs	r0, r3
 8005938:	f000 fa3c 	bl	8005db4 <USBD_StdEPReq>
    break;
 800593c:	e00c      	b.n	8005958 <USBD_LL_SetupStage+0xac>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	2382      	movs	r3, #130	; 0x82
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	5cd3      	ldrb	r3, [r2, r3]
 8005946:	227f      	movs	r2, #127	; 0x7f
 8005948:	4393      	bics	r3, r2
 800594a:	b2da      	uxtb	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	0011      	movs	r1, r2
 8005950:	0018      	movs	r0, r3
 8005952:	f001 fae5 	bl	8006f20 <USBD_LL_StallEP>
    break;
 8005956:	46c0      	nop			; (mov r8, r8)
  }  
  return USBD_OK;  
 8005958:	2300      	movs	r3, #0
}
 800595a:	0018      	movs	r0, r3
 800595c:	46bd      	mov	sp, r7
 800595e:	b002      	add	sp, #8
 8005960:	bd80      	pop	{r7, pc}
 8005962:	46c0      	nop			; (mov r8, r8)
 8005964:	0000020e 	.word	0x0000020e

08005968 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b086      	sub	sp, #24
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	607a      	str	r2, [r7, #4]
 8005972:	200b      	movs	r0, #11
 8005974:	183b      	adds	r3, r7, r0
 8005976:	1c0a      	adds	r2, r1, #0
 8005978:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800597a:	183b      	adds	r3, r7, r0
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d13e      	bne.n	8005a00 <USBD_LL_DataOutStage+0x98>
  {
    pep = &pdev->ep_out[0];
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	3305      	adds	r3, #5
 8005986:	33ff      	adds	r3, #255	; 0xff
 8005988:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	23fa      	movs	r3, #250	; 0xfa
 800598e:	005b      	lsls	r3, r3, #1
 8005990:	58d3      	ldr	r3, [r2, r3]
 8005992:	2b03      	cmp	r3, #3
 8005994:	d14c      	bne.n	8005a30 <USBD_LL_DataOutStage+0xc8>
    {
      if(pep->rem_length > pep->maxpacket)
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	689a      	ldr	r2, [r3, #8]
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d914      	bls.n	80059cc <USBD_LL_DataOutStage+0x64>
      {
        pep->rem_length -=  pep->maxpacket;
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	689a      	ldr	r2, [r3, #8]
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	1ad2      	subs	r2, r2, r3
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	68da      	ldr	r2, [r3, #12]
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d900      	bls.n	80059be <USBD_LL_DataOutStage+0x56>
 80059bc:	001a      	movs	r2, r3
        USBD_CtlContinueRx (pdev, 
 80059be:	b292      	uxth	r2, r2
 80059c0:	6879      	ldr	r1, [r7, #4]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	0018      	movs	r0, r3
 80059c6:	f000 febf 	bl	8006748 <USBD_CtlContinueRx>
 80059ca:	e031      	b.n	8005a30 <USBD_LL_DataOutStage+0xc8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	2385      	movs	r3, #133	; 0x85
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	58d3      	ldr	r3, [r2, r3]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00d      	beq.n	80059f6 <USBD_LL_DataOutStage+0x8e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	23fe      	movs	r3, #254	; 0xfe
 80059de:	005b      	lsls	r3, r3, #1
 80059e0:	5cd3      	ldrb	r3, [r2, r3]
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80059e2:	2b03      	cmp	r3, #3
 80059e4:	d107      	bne.n	80059f6 <USBD_LL_DataOutStage+0x8e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	2385      	movs	r3, #133	; 0x85
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	58d3      	ldr	r3, [r2, r3]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	0010      	movs	r0, r2
 80059f4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	0018      	movs	r0, r3
 80059fa:	f000 feb8 	bl	800676e <USBD_CtlSendStatus>
 80059fe:	e017      	b.n	8005a30 <USBD_LL_DataOutStage+0xc8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	2385      	movs	r3, #133	; 0x85
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	58d3      	ldr	r3, [r2, r3]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d010      	beq.n	8005a30 <USBD_LL_DataOutStage+0xc8>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	23fe      	movs	r3, #254	; 0xfe
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	5cd3      	ldrb	r3, [r2, r3]
  else if((pdev->pClass->DataOut != NULL)&&
 8005a16:	2b03      	cmp	r3, #3
 8005a18:	d10a      	bne.n	8005a30 <USBD_LL_DataOutStage+0xc8>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	2385      	movs	r3, #133	; 0x85
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	58d3      	ldr	r3, [r2, r3]
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	220b      	movs	r2, #11
 8005a26:	18ba      	adds	r2, r7, r2
 8005a28:	7811      	ldrb	r1, [r2, #0]
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	0010      	movs	r0, r2
 8005a2e:	4798      	blx	r3
  }  
  return USBD_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	0018      	movs	r0, r3
 8005a34:	46bd      	mov	sp, r7
 8005a36:	b006      	add	sp, #24
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b086      	sub	sp, #24
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	60f8      	str	r0, [r7, #12]
 8005a42:	607a      	str	r2, [r7, #4]
 8005a44:	200b      	movs	r0, #11
 8005a46:	183b      	adds	r3, r7, r0
 8005a48:	1c0a      	adds	r2, r1, #0
 8005a4a:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8005a4c:	183b      	adds	r3, r7, r0
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d000      	beq.n	8005a56 <USBD_LL_DataInStage+0x1c>
 8005a54:	e077      	b.n	8005b46 <USBD_LL_DataInStage+0x10c>
  {
    pep = &pdev->ep_in[0];
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	3314      	adds	r3, #20
 8005a5a:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	23fa      	movs	r3, #250	; 0xfa
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	58d3      	ldr	r3, [r2, r3]
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d15e      	bne.n	8005b26 <USBD_LL_DataInStage+0xec>
    {
      if(pep->rem_length > pep->maxpacket)
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	689a      	ldr	r2, [r3, #8]
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d915      	bls.n	8005aa0 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	689a      	ldr	r2, [r3, #8]
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	1ad2      	subs	r2, r2, r3
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	6879      	ldr	r1, [r7, #4]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	0018      	movs	r0, r3
 8005a8e:	f000 fe24 	bl	80066da <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	2300      	movs	r3, #0
 8005a96:	2200      	movs	r2, #0
 8005a98:	2100      	movs	r1, #0
 8005a9a:	f001 fa8e 	bl	8006fba <USBD_LL_PrepareReceive>
 8005a9e:	e042      	b.n	8005b26 <USBD_LL_DataInStage+0xec>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	0019      	movs	r1, r3
 8005aaa:	0010      	movs	r0, r2
 8005aac:	f7fa fbb2 	bl	8000214 <__aeabi_uidivmod>
 8005ab0:	1e0b      	subs	r3, r1, #0
 8005ab2:	d11f      	bne.n	8005af4 <USBD_LL_DataInStage+0xba>
           (pep->total_length >= pep->maxpacket) &&
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	685a      	ldr	r2, [r3, #4]
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d319      	bcc.n	8005af4 <USBD_LL_DataInStage+0xba>
             (pep->total_length < pdev->ep0_data_len ))
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	68f9      	ldr	r1, [r7, #12]
 8005ac6:	23fc      	movs	r3, #252	; 0xfc
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	58cb      	ldr	r3, [r1, r3]
           (pep->total_length >= pep->maxpacket) &&
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d211      	bcs.n	8005af4 <USBD_LL_DataInStage+0xba>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	2100      	movs	r1, #0
 8005ad6:	0018      	movs	r0, r3
 8005ad8:	f000 fdff 	bl	80066da <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	23fc      	movs	r3, #252	; 0xfc
 8005ae0:	005b      	lsls	r3, r3, #1
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	50d1      	str	r1, [r2, r3]
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	2300      	movs	r3, #0
 8005aea:	2200      	movs	r2, #0
 8005aec:	2100      	movs	r1, #0
 8005aee:	f001 fa64 	bl	8006fba <USBD_LL_PrepareReceive>
 8005af2:	e018      	b.n	8005b26 <USBD_LL_DataInStage+0xec>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	2385      	movs	r3, #133	; 0x85
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	58d3      	ldr	r3, [r2, r3]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00d      	beq.n	8005b1e <USBD_LL_DataInStage+0xe4>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	23fe      	movs	r3, #254	; 0xfe
 8005b06:	005b      	lsls	r3, r3, #1
 8005b08:	5cd3      	ldrb	r3, [r2, r3]
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8005b0a:	2b03      	cmp	r3, #3
 8005b0c:	d107      	bne.n	8005b1e <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	2385      	movs	r3, #133	; 0x85
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	58d3      	ldr	r3, [r2, r3]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	0010      	movs	r0, r2
 8005b1c:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	0018      	movs	r0, r3
 8005b22:	f000 fe38 	bl	8006796 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	2380      	movs	r3, #128	; 0x80
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	5cd3      	ldrb	r3, [r2, r3]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d121      	bne.n	8005b76 <USBD_LL_DataInStage+0x13c>
    {
      USBD_RunTestMode(pdev); 
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	0018      	movs	r0, r3
 8005b36:	f7ff fe73 	bl	8005820 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	2380      	movs	r3, #128	; 0x80
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	2100      	movs	r1, #0
 8005b42:	54d1      	strb	r1, [r2, r3]
 8005b44:	e017      	b.n	8005b76 <USBD_LL_DataInStage+0x13c>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	2385      	movs	r3, #133	; 0x85
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	58d3      	ldr	r3, [r2, r3]
 8005b4e:	695b      	ldr	r3, [r3, #20]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d010      	beq.n	8005b76 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	23fe      	movs	r3, #254	; 0xfe
 8005b58:	005b      	lsls	r3, r3, #1
 8005b5a:	5cd3      	ldrb	r3, [r2, r3]
  else if((pdev->pClass->DataIn != NULL)&& 
 8005b5c:	2b03      	cmp	r3, #3
 8005b5e:	d10a      	bne.n	8005b76 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	2385      	movs	r3, #133	; 0x85
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	58d3      	ldr	r3, [r2, r3]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	220b      	movs	r2, #11
 8005b6c:	18ba      	adds	r2, r7, r2
 8005b6e:	7811      	ldrb	r1, [r2, #0]
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	0010      	movs	r0, r2
 8005b74:	4798      	blx	r3
  }  
  return USBD_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	0018      	movs	r0, r3
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	b006      	add	sp, #24
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	2340      	movs	r3, #64	; 0x40
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	2100      	movs	r1, #0
 8005b90:	f001 f9a9 	bl	8006ee6 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	2388      	movs	r3, #136	; 0x88
 8005b98:	005b      	lsls	r3, r3, #1
 8005b9a:	2140      	movs	r1, #64	; 0x40
 8005b9c:	50d1      	str	r1, [r2, r3]
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	2340      	movs	r3, #64	; 0x40
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	2180      	movs	r1, #128	; 0x80
 8005ba6:	f001 f99e 	bl	8006ee6 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2240      	movs	r2, #64	; 0x40
 8005bae:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	23fe      	movs	r3, #254	; 0xfe
 8005bb4:	005b      	lsls	r3, r3, #1
 8005bb6:	2101      	movs	r1, #1
 8005bb8:	54d1      	strb	r1, [r2, r3]
  
  if (pdev->pClassData) 
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	2386      	movs	r3, #134	; 0x86
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	58d3      	ldr	r3, [r2, r3]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00a      	beq.n	8005bdc <USBD_LL_Reset+0x5c>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	2385      	movs	r3, #133	; 0x85
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	58d3      	ldr	r3, [r2, r3]
 8005bce:	685a      	ldr	r2, [r3, #4]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	b2d9      	uxtb	r1, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	0018      	movs	r0, r3
 8005bda:	4790      	blx	r2
 
  
  return USBD_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	0018      	movs	r0, r3
 8005be0:	46bd      	mov	sp, r7
 8005be2:	b002      	add	sp, #8
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b082      	sub	sp, #8
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
 8005bee:	000a      	movs	r2, r1
 8005bf0:	1cfb      	adds	r3, r7, #3
 8005bf2:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	1cfa      	adds	r2, r7, #3
 8005bf8:	7812      	ldrb	r2, [r2, #0]
 8005bfa:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	0018      	movs	r0, r3
 8005c00:	46bd      	mov	sp, r7
 8005c02:	b002      	add	sp, #8
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b082      	sub	sp, #8
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	23fe      	movs	r3, #254	; 0xfe
 8005c12:	005b      	lsls	r3, r3, #1
 8005c14:	5cd1      	ldrb	r1, [r2, r3]
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	23fe      	movs	r3, #254	; 0xfe
 8005c1a:	33ff      	adds	r3, #255	; 0xff
 8005c1c:	54d1      	strb	r1, [r2, r3]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	23fe      	movs	r3, #254	; 0xfe
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	2104      	movs	r1, #4
 8005c26:	54d1      	strb	r1, [r2, r3]
  return USBD_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	0018      	movs	r0, r3
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	b002      	add	sp, #8
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b082      	sub	sp, #8
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	23fe      	movs	r3, #254	; 0xfe
 8005c3e:	33ff      	adds	r3, #255	; 0xff
 8005c40:	5cd1      	ldrb	r1, [r2, r3]
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	23fe      	movs	r3, #254	; 0xfe
 8005c46:	005b      	lsls	r3, r3, #1
 8005c48:	54d1      	strb	r1, [r2, r3]
  return USBD_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	0018      	movs	r0, r3
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	b002      	add	sp, #8
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	23fe      	movs	r3, #254	; 0xfe
 8005c60:	005b      	lsls	r3, r3, #1
 8005c62:	5cd3      	ldrb	r3, [r2, r3]
 8005c64:	2b03      	cmp	r3, #3
 8005c66:	d10e      	bne.n	8005c86 <USBD_LL_SOF+0x32>
  {
    if(pdev->pClass->SOF != NULL)
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	2385      	movs	r3, #133	; 0x85
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	58d3      	ldr	r3, [r2, r3]
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d007      	beq.n	8005c86 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	2385      	movs	r3, #133	; 0x85
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	58d3      	ldr	r3, [r2, r3]
 8005c7e:	69db      	ldr	r3, [r3, #28]
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	0010      	movs	r0, r2
 8005c84:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	0018      	movs	r0, r3
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	b002      	add	sp, #8
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 8005c9a:	230f      	movs	r3, #15
 8005c9c:	18fb      	adds	r3, r7, r3
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	701a      	strb	r2, [r3, #0]
  
  switch (req->bRequest) 
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	785b      	ldrb	r3, [r3, #1]
 8005ca6:	2b09      	cmp	r3, #9
 8005ca8:	d835      	bhi.n	8005d16 <USBD_StdDevReq+0x86>
 8005caa:	009a      	lsls	r2, r3, #2
 8005cac:	4b21      	ldr	r3, [pc, #132]	; (8005d34 <USBD_StdDevReq+0xa4>)
 8005cae:	18d3      	adds	r3, r2, r3
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	469f      	mov	pc, r3
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8005cb4:	683a      	ldr	r2, [r7, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	0011      	movs	r1, r2
 8005cba:	0018      	movs	r0, r3
 8005cbc:	f000 f98a 	bl	8005fd4 <USBD_GetDescriptor>
    break;
 8005cc0:	e030      	b.n	8005d24 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8005cc2:	683a      	ldr	r2, [r7, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	0011      	movs	r1, r2
 8005cc8:	0018      	movs	r0, r3
 8005cca:	f000 fa8b 	bl	80061e4 <USBD_SetAddress>
    break;
 8005cce:	e029      	b.n	8005d24 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	0011      	movs	r1, r2
 8005cd6:	0018      	movs	r0, r3
 8005cd8:	f000 fad4 	bl	8006284 <USBD_SetConfig>
    break;
 8005cdc:	e022      	b.n	8005d24 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8005cde:	683a      	ldr	r2, [r7, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	0011      	movs	r1, r2
 8005ce4:	0018      	movs	r0, r3
 8005ce6:	f000 fb69 	bl	80063bc <USBD_GetConfig>
    break;
 8005cea:	e01b      	b.n	8005d24 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8005cec:	683a      	ldr	r2, [r7, #0]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	0011      	movs	r1, r2
 8005cf2:	0018      	movs	r0, r3
 8005cf4:	f000 fb9a 	bl	800642c <USBD_GetStatus>
    break;
 8005cf8:	e014      	b.n	8005d24 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	0011      	movs	r1, r2
 8005d00:	0018      	movs	r0, r3
 8005d02:	f000 fbc2 	bl	800648a <USBD_SetFeature>
    break;
 8005d06:	e00d      	b.n	8005d24 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8005d08:	683a      	ldr	r2, [r7, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	0011      	movs	r1, r2
 8005d0e:	0018      	movs	r0, r3
 8005d10:	f000 fbda 	bl	80064c8 <USBD_ClrFeature>
    break;
 8005d14:	e006      	b.n	8005d24 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	0011      	movs	r1, r2
 8005d1c:	0018      	movs	r0, r3
 8005d1e:	f000 fc3d 	bl	800659c <USBD_CtlError>
    break;
 8005d22:	46c0      	nop			; (mov r8, r8)
  }
  
  return ret;
 8005d24:	230f      	movs	r3, #15
 8005d26:	18fb      	adds	r3, r7, r3
 8005d28:	781b      	ldrb	r3, [r3, #0]
}
 8005d2a:	0018      	movs	r0, r3
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	b004      	add	sp, #16
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	46c0      	nop			; (mov r8, r8)
 8005d34:	08007a7c 	.word	0x08007a7c

08005d38 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005d38:	b590      	push	{r4, r7, lr}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 8005d42:	240f      	movs	r4, #15
 8005d44:	193b      	adds	r3, r7, r4
 8005d46:	2200      	movs	r2, #0
 8005d48:	701a      	strb	r2, [r3, #0]
  
  switch (pdev->dev_state) 
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	23fe      	movs	r3, #254	; 0xfe
 8005d4e:	005b      	lsls	r3, r3, #1
 8005d50:	5cd3      	ldrb	r3, [r2, r3]
 8005d52:	2b03      	cmp	r3, #3
 8005d54:	d121      	bne.n	8005d9a <USBD_StdItfReq+0x62>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	889b      	ldrh	r3, [r3, #4]
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d815      	bhi.n	8005d8c <USBD_StdItfReq+0x54>
    {
      pdev->pClass->Setup (pdev, req); 
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	2385      	movs	r3, #133	; 0x85
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	58d3      	ldr	r3, [r2, r3]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	6839      	ldr	r1, [r7, #0]
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	0010      	movs	r0, r2
 8005d70:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	88db      	ldrh	r3, [r3, #6]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d116      	bne.n	8005da8 <USBD_StdItfReq+0x70>
 8005d7a:	193b      	adds	r3, r7, r4
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d112      	bne.n	8005da8 <USBD_StdItfReq+0x70>
      {
         USBD_CtlSendStatus(pdev);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	0018      	movs	r0, r3
 8005d86:	f000 fcf2 	bl	800676e <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8005d8a:	e00d      	b.n	8005da8 <USBD_StdItfReq+0x70>
       USBD_CtlError(pdev , req);
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	0011      	movs	r1, r2
 8005d92:	0018      	movs	r0, r3
 8005d94:	f000 fc02 	bl	800659c <USBD_CtlError>
    break;
 8005d98:	e006      	b.n	8005da8 <USBD_StdItfReq+0x70>
    
  default:
     USBD_CtlError(pdev , req);
 8005d9a:	683a      	ldr	r2, [r7, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	0011      	movs	r1, r2
 8005da0:	0018      	movs	r0, r3
 8005da2:	f000 fbfb 	bl	800659c <USBD_CtlError>
    break;
 8005da6:	e000      	b.n	8005daa <USBD_StdItfReq+0x72>
    break;
 8005da8:	46c0      	nop			; (mov r8, r8)
  }
  return USBD_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	0018      	movs	r0, r3
 8005dae:	46bd      	mov	sp, r7
 8005db0:	b005      	add	sp, #20
 8005db2:	bd90      	pop	{r4, r7, pc}

08005db4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 8005dbe:	230f      	movs	r3, #15
 8005dc0:	18fb      	adds	r3, r7, r3
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	889a      	ldrh	r2, [r3, #4]
 8005dca:	230e      	movs	r3, #14
 8005dcc:	18fb      	adds	r3, r7, r3
 8005dce:	701a      	strb	r2, [r3, #0]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	001a      	movs	r2, r3
 8005dd6:	2360      	movs	r3, #96	; 0x60
 8005dd8:	4013      	ands	r3, r2
 8005dda:	2b20      	cmp	r3, #32
 8005ddc:	d10a      	bne.n	8005df4 <USBD_StdEPReq+0x40>
  {
    pdev->pClass->Setup (pdev, req);
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	2385      	movs	r3, #133	; 0x85
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	58d3      	ldr	r3, [r2, r3]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	6839      	ldr	r1, [r7, #0]
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	0010      	movs	r0, r2
 8005dee:	4798      	blx	r3
    
    return USBD_OK;
 8005df0:	2300      	movs	r3, #0
 8005df2:	e0eb      	b.n	8005fcc <USBD_StdEPReq+0x218>
  }
  
  switch (req->bRequest) 
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	785b      	ldrb	r3, [r3, #1]
 8005df8:	2b03      	cmp	r3, #3
 8005dfa:	d007      	beq.n	8005e0c <USBD_StdEPReq+0x58>
 8005dfc:	dd00      	ble.n	8005e00 <USBD_StdEPReq+0x4c>
 8005dfe:	e0e1      	b.n	8005fc4 <USBD_StdEPReq+0x210>
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d100      	bne.n	8005e06 <USBD_StdEPReq+0x52>
 8005e04:	e08b      	b.n	8005f1e <USBD_StdEPReq+0x16a>
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d045      	beq.n	8005e96 <USBD_StdEPReq+0xe2>
      break;
    }
    break;
    
  default:
    break;
 8005e0a:	e0db      	b.n	8005fc4 <USBD_StdEPReq+0x210>
    switch (pdev->dev_state) 
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	23fe      	movs	r3, #254	; 0xfe
 8005e10:	005b      	lsls	r3, r3, #1
 8005e12:	5cd3      	ldrb	r3, [r2, r3]
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d002      	beq.n	8005e1e <USBD_StdEPReq+0x6a>
 8005e18:	2b03      	cmp	r3, #3
 8005e1a:	d011      	beq.n	8005e40 <USBD_StdEPReq+0x8c>
 8005e1c:	e032      	b.n	8005e84 <USBD_StdEPReq+0xd0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8005e1e:	220e      	movs	r2, #14
 8005e20:	18bb      	adds	r3, r7, r2
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d034      	beq.n	8005e92 <USBD_StdEPReq+0xde>
 8005e28:	18bb      	adds	r3, r7, r2
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	2b80      	cmp	r3, #128	; 0x80
 8005e2e:	d030      	beq.n	8005e92 <USBD_StdEPReq+0xde>
        USBD_LL_StallEP(pdev , ep_addr);
 8005e30:	18bb      	adds	r3, r7, r2
 8005e32:	781a      	ldrb	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	0011      	movs	r1, r2
 8005e38:	0018      	movs	r0, r3
 8005e3a:	f001 f871 	bl	8006f20 <USBD_LL_StallEP>
      break;	
 8005e3e:	e028      	b.n	8005e92 <USBD_StdEPReq+0xde>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	885b      	ldrh	r3, [r3, #2]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d10f      	bne.n	8005e68 <USBD_StdEPReq+0xb4>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8005e48:	220e      	movs	r2, #14
 8005e4a:	18bb      	adds	r3, r7, r2
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00a      	beq.n	8005e68 <USBD_StdEPReq+0xb4>
 8005e52:	18bb      	adds	r3, r7, r2
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	2b80      	cmp	r3, #128	; 0x80
 8005e58:	d006      	beq.n	8005e68 <USBD_StdEPReq+0xb4>
          USBD_LL_StallEP(pdev , ep_addr);
 8005e5a:	18bb      	adds	r3, r7, r2
 8005e5c:	781a      	ldrb	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	0011      	movs	r1, r2
 8005e62:	0018      	movs	r0, r3
 8005e64:	f001 f85c 	bl	8006f20 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	2385      	movs	r3, #133	; 0x85
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	58d3      	ldr	r3, [r2, r3]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	6839      	ldr	r1, [r7, #0]
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	0010      	movs	r0, r2
 8005e78:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	0018      	movs	r0, r3
 8005e7e:	f000 fc76 	bl	800676e <USBD_CtlSendStatus>
      break;
 8005e82:	e007      	b.n	8005e94 <USBD_StdEPReq+0xe0>
      USBD_CtlError(pdev , req);
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	0011      	movs	r1, r2
 8005e8a:	0018      	movs	r0, r3
 8005e8c:	f000 fb86 	bl	800659c <USBD_CtlError>
      break;    
 8005e90:	e000      	b.n	8005e94 <USBD_StdEPReq+0xe0>
      break;	
 8005e92:	46c0      	nop			; (mov r8, r8)
    break;
 8005e94:	e097      	b.n	8005fc6 <USBD_StdEPReq+0x212>
    switch (pdev->dev_state) 
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	23fe      	movs	r3, #254	; 0xfe
 8005e9a:	005b      	lsls	r3, r3, #1
 8005e9c:	5cd3      	ldrb	r3, [r2, r3]
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d002      	beq.n	8005ea8 <USBD_StdEPReq+0xf4>
 8005ea2:	2b03      	cmp	r3, #3
 8005ea4:	d011      	beq.n	8005eca <USBD_StdEPReq+0x116>
 8005ea6:	e02f      	b.n	8005f08 <USBD_StdEPReq+0x154>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8005ea8:	220e      	movs	r2, #14
 8005eaa:	18bb      	adds	r3, r7, r2
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d031      	beq.n	8005f16 <USBD_StdEPReq+0x162>
 8005eb2:	18bb      	adds	r3, r7, r2
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	2b80      	cmp	r3, #128	; 0x80
 8005eb8:	d02d      	beq.n	8005f16 <USBD_StdEPReq+0x162>
        USBD_LL_StallEP(pdev , ep_addr);
 8005eba:	18bb      	adds	r3, r7, r2
 8005ebc:	781a      	ldrb	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	0011      	movs	r1, r2
 8005ec2:	0018      	movs	r0, r3
 8005ec4:	f001 f82c 	bl	8006f20 <USBD_LL_StallEP>
      break;	
 8005ec8:	e025      	b.n	8005f16 <USBD_StdEPReq+0x162>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	885b      	ldrh	r3, [r3, #2]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d123      	bne.n	8005f1a <USBD_StdEPReq+0x166>
        if ((ep_addr & 0x7F) != 0x00) 
 8005ed2:	210e      	movs	r1, #14
 8005ed4:	187b      	adds	r3, r7, r1
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	227f      	movs	r2, #127	; 0x7f
 8005eda:	4013      	ands	r3, r2
 8005edc:	d00f      	beq.n	8005efe <USBD_StdEPReq+0x14a>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8005ede:	187b      	adds	r3, r7, r1
 8005ee0:	781a      	ldrb	r2, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	0011      	movs	r1, r2
 8005ee6:	0018      	movs	r0, r3
 8005ee8:	f001 f827 	bl	8006f3a <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	2385      	movs	r3, #133	; 0x85
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	58d3      	ldr	r3, [r2, r3]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	6839      	ldr	r1, [r7, #0]
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	0010      	movs	r0, r2
 8005efc:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	0018      	movs	r0, r3
 8005f02:	f000 fc34 	bl	800676e <USBD_CtlSendStatus>
      break;
 8005f06:	e008      	b.n	8005f1a <USBD_StdEPReq+0x166>
      USBD_CtlError(pdev , req);
 8005f08:	683a      	ldr	r2, [r7, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	0011      	movs	r1, r2
 8005f0e:	0018      	movs	r0, r3
 8005f10:	f000 fb44 	bl	800659c <USBD_CtlError>
      break;    
 8005f14:	e002      	b.n	8005f1c <USBD_StdEPReq+0x168>
      break;	
 8005f16:	46c0      	nop			; (mov r8, r8)
 8005f18:	e055      	b.n	8005fc6 <USBD_StdEPReq+0x212>
      break;
 8005f1a:	46c0      	nop			; (mov r8, r8)
    break;
 8005f1c:	e053      	b.n	8005fc6 <USBD_StdEPReq+0x212>
    switch (pdev->dev_state) 
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	23fe      	movs	r3, #254	; 0xfe
 8005f22:	005b      	lsls	r3, r3, #1
 8005f24:	5cd3      	ldrb	r3, [r2, r3]
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d002      	beq.n	8005f30 <USBD_StdEPReq+0x17c>
 8005f2a:	2b03      	cmp	r3, #3
 8005f2c:	d00e      	beq.n	8005f4c <USBD_StdEPReq+0x198>
 8005f2e:	e040      	b.n	8005fb2 <USBD_StdEPReq+0x1fe>
      if ((ep_addr & 0x7F) != 0x00) 
 8005f30:	210e      	movs	r1, #14
 8005f32:	187b      	adds	r3, r7, r1
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	227f      	movs	r2, #127	; 0x7f
 8005f38:	4013      	ands	r3, r2
 8005f3a:	d041      	beq.n	8005fc0 <USBD_StdEPReq+0x20c>
        USBD_LL_StallEP(pdev , ep_addr);
 8005f3c:	187b      	adds	r3, r7, r1
 8005f3e:	781a      	ldrb	r2, [r3, #0]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	0011      	movs	r1, r2
 8005f44:	0018      	movs	r0, r3
 8005f46:	f000 ffeb 	bl	8006f20 <USBD_LL_StallEP>
      break;	
 8005f4a:	e039      	b.n	8005fc0 <USBD_StdEPReq+0x20c>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8005f4c:	220e      	movs	r2, #14
 8005f4e:	18bb      	adds	r3, r7, r2
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	b25b      	sxtb	r3, r3
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	da09      	bge.n	8005f6c <USBD_StdEPReq+0x1b8>
 8005f58:	18bb      	adds	r3, r7, r2
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	227f      	movs	r2, #127	; 0x7f
 8005f5e:	4013      	ands	r3, r2
 8005f60:	3301      	adds	r3, #1
 8005f62:	011b      	lsls	r3, r3, #4
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	18d3      	adds	r3, r2, r3
 8005f68:	3304      	adds	r3, #4
 8005f6a:	e009      	b.n	8005f80 <USBD_StdEPReq+0x1cc>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8005f6c:	230e      	movs	r3, #14
 8005f6e:	18fb      	adds	r3, r7, r3
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	227f      	movs	r2, #127	; 0x7f
 8005f74:	4013      	ands	r3, r2
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8005f76:	3310      	adds	r3, #16
 8005f78:	011b      	lsls	r3, r3, #4
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	18d3      	adds	r3, r2, r3
 8005f7e:	3304      	adds	r3, #4
 8005f80:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8005f82:	230e      	movs	r3, #14
 8005f84:	18fb      	adds	r3, r7, r3
 8005f86:	781a      	ldrb	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	0011      	movs	r1, r2
 8005f8c:	0018      	movs	r0, r3
 8005f8e:	f000 ffe1 	bl	8006f54 <USBD_LL_IsStallEP>
 8005f92:	1e03      	subs	r3, r0, #0
 8005f94:	d003      	beq.n	8005f9e <USBD_StdEPReq+0x1ea>
        pep->status = 0x0001;     
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	601a      	str	r2, [r3, #0]
 8005f9c:	e002      	b.n	8005fa4 <USBD_StdEPReq+0x1f0>
        pep->status = 0x0000;  
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 8005fa4:	68b9      	ldr	r1, [r7, #8]
      USBD_CtlSendData (pdev,
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2202      	movs	r2, #2
 8005faa:	0018      	movs	r0, r3
 8005fac:	f000 fb75 	bl	800669a <USBD_CtlSendData>
      break;
 8005fb0:	e007      	b.n	8005fc2 <USBD_StdEPReq+0x20e>
      USBD_CtlError(pdev , req);
 8005fb2:	683a      	ldr	r2, [r7, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	0011      	movs	r1, r2
 8005fb8:	0018      	movs	r0, r3
 8005fba:	f000 faef 	bl	800659c <USBD_CtlError>
      break;
 8005fbe:	e000      	b.n	8005fc2 <USBD_StdEPReq+0x20e>
      break;	
 8005fc0:	46c0      	nop			; (mov r8, r8)
    break;
 8005fc2:	e000      	b.n	8005fc6 <USBD_StdEPReq+0x212>
    break;
 8005fc4:	46c0      	nop			; (mov r8, r8)
  }
  return ret;
 8005fc6:	230f      	movs	r3, #15
 8005fc8:	18fb      	adds	r3, r7, r3
 8005fca:	781b      	ldrb	r3, [r3, #0]
}
 8005fcc:	0018      	movs	r0, r3
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	b004      	add	sp, #16
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	885b      	ldrh	r3, [r3, #2]
 8005fe2:	0a1b      	lsrs	r3, r3, #8
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	2b07      	cmp	r3, #7
 8005fe8:	d900      	bls.n	8005fec <USBD_GetDescriptor+0x18>
 8005fea:	e0ce      	b.n	800618a <USBD_GetDescriptor+0x1b6>
 8005fec:	009a      	lsls	r2, r3, #2
 8005fee:	4b7b      	ldr	r3, [pc, #492]	; (80061dc <USBD_GetDescriptor+0x208>)
 8005ff0:	18d3      	adds	r3, r2, r3
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	469f      	mov	pc, r3
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	2384      	movs	r3, #132	; 0x84
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	58d3      	ldr	r3, [r2, r3]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	7c12      	ldrb	r2, [r2, #16]
 8006004:	210a      	movs	r1, #10
 8006006:	1879      	adds	r1, r7, r1
 8006008:	0010      	movs	r0, r2
 800600a:	4798      	blx	r3
 800600c:	0003      	movs	r3, r0
 800600e:	60fb      	str	r3, [r7, #12]
    break;
 8006010:	e0c2      	b.n	8006198 <USBD_GetDescriptor+0x1c4>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	7c1b      	ldrb	r3, [r3, #16]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10f      	bne.n	800603a <USBD_GetDescriptor+0x66>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	2385      	movs	r3, #133	; 0x85
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	58d3      	ldr	r3, [r2, r3]
 8006022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006024:	220a      	movs	r2, #10
 8006026:	18ba      	adds	r2, r7, r2
 8006028:	0010      	movs	r0, r2
 800602a:	4798      	blx	r3
 800602c:	0003      	movs	r3, r0
 800602e:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	3301      	adds	r3, #1
 8006034:	2202      	movs	r2, #2
 8006036:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006038:	e0ae      	b.n	8006198 <USBD_GetDescriptor+0x1c4>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	2385      	movs	r3, #133	; 0x85
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	58d3      	ldr	r3, [r2, r3]
 8006042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006044:	220a      	movs	r2, #10
 8006046:	18ba      	adds	r2, r7, r2
 8006048:	0010      	movs	r0, r2
 800604a:	4798      	blx	r3
 800604c:	0003      	movs	r3, r0
 800604e:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	3301      	adds	r3, #1
 8006054:	2202      	movs	r2, #2
 8006056:	701a      	strb	r2, [r3, #0]
    break;
 8006058:	e09e      	b.n	8006198 <USBD_GetDescriptor+0x1c4>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	885b      	ldrh	r3, [r3, #2]
 800605e:	b2db      	uxtb	r3, r3
 8006060:	2b05      	cmp	r3, #5
 8006062:	d858      	bhi.n	8006116 <USBD_GetDescriptor+0x142>
 8006064:	009a      	lsls	r2, r3, #2
 8006066:	4b5e      	ldr	r3, [pc, #376]	; (80061e0 <USBD_GetDescriptor+0x20c>)
 8006068:	18d3      	adds	r3, r2, r3
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	469f      	mov	pc, r3
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	2384      	movs	r3, #132	; 0x84
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	58d3      	ldr	r3, [r2, r3]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	7c12      	ldrb	r2, [r2, #16]
 800607c:	210a      	movs	r1, #10
 800607e:	1879      	adds	r1, r7, r1
 8006080:	0010      	movs	r0, r2
 8006082:	4798      	blx	r3
 8006084:	0003      	movs	r3, r0
 8006086:	60fb      	str	r3, [r7, #12]
      break;
 8006088:	e04c      	b.n	8006124 <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	2384      	movs	r3, #132	; 0x84
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	58d3      	ldr	r3, [r2, r3]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	7c12      	ldrb	r2, [r2, #16]
 8006098:	210a      	movs	r1, #10
 800609a:	1879      	adds	r1, r7, r1
 800609c:	0010      	movs	r0, r2
 800609e:	4798      	blx	r3
 80060a0:	0003      	movs	r3, r0
 80060a2:	60fb      	str	r3, [r7, #12]
      break;
 80060a4:	e03e      	b.n	8006124 <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	2384      	movs	r3, #132	; 0x84
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	58d3      	ldr	r3, [r2, r3]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	7c12      	ldrb	r2, [r2, #16]
 80060b4:	210a      	movs	r1, #10
 80060b6:	1879      	adds	r1, r7, r1
 80060b8:	0010      	movs	r0, r2
 80060ba:	4798      	blx	r3
 80060bc:	0003      	movs	r3, r0
 80060be:	60fb      	str	r3, [r7, #12]
      break;
 80060c0:	e030      	b.n	8006124 <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	2384      	movs	r3, #132	; 0x84
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	58d3      	ldr	r3, [r2, r3]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	7c12      	ldrb	r2, [r2, #16]
 80060d0:	210a      	movs	r1, #10
 80060d2:	1879      	adds	r1, r7, r1
 80060d4:	0010      	movs	r0, r2
 80060d6:	4798      	blx	r3
 80060d8:	0003      	movs	r3, r0
 80060da:	60fb      	str	r3, [r7, #12]
      break;
 80060dc:	e022      	b.n	8006124 <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	2384      	movs	r3, #132	; 0x84
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	58d3      	ldr	r3, [r2, r3]
 80060e6:	695b      	ldr	r3, [r3, #20]
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	7c12      	ldrb	r2, [r2, #16]
 80060ec:	210a      	movs	r1, #10
 80060ee:	1879      	adds	r1, r7, r1
 80060f0:	0010      	movs	r0, r2
 80060f2:	4798      	blx	r3
 80060f4:	0003      	movs	r3, r0
 80060f6:	60fb      	str	r3, [r7, #12]
      break;
 80060f8:	e014      	b.n	8006124 <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	2384      	movs	r3, #132	; 0x84
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	58d3      	ldr	r3, [r2, r3]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	7c12      	ldrb	r2, [r2, #16]
 8006108:	210a      	movs	r1, #10
 800610a:	1879      	adds	r1, r7, r1
 800610c:	0010      	movs	r0, r2
 800610e:	4798      	blx	r3
 8006110:	0003      	movs	r3, r0
 8006112:	60fb      	str	r3, [r7, #12]
      break;
 8006114:	e006      	b.n	8006124 <USBD_GetDescriptor+0x150>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 8006116:	683a      	ldr	r2, [r7, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	0011      	movs	r1, r2
 800611c:	0018      	movs	r0, r3
 800611e:	f000 fa3d 	bl	800659c <USBD_CtlError>
      return;
 8006122:	e058      	b.n	80061d6 <USBD_GetDescriptor+0x202>
#endif   
    }
    break;
 8006124:	e038      	b.n	8006198 <USBD_GetDescriptor+0x1c4>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	7c1b      	ldrb	r3, [r3, #16]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10b      	bne.n	8006146 <USBD_GetDescriptor+0x172>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	2385      	movs	r3, #133	; 0x85
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	58d3      	ldr	r3, [r2, r3]
 8006136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006138:	220a      	movs	r2, #10
 800613a:	18ba      	adds	r2, r7, r2
 800613c:	0010      	movs	r0, r2
 800613e:	4798      	blx	r3
 8006140:	0003      	movs	r3, r0
 8006142:	60fb      	str	r3, [r7, #12]
      break;
 8006144:	e028      	b.n	8006198 <USBD_GetDescriptor+0x1c4>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8006146:	683a      	ldr	r2, [r7, #0]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	0011      	movs	r1, r2
 800614c:	0018      	movs	r0, r3
 800614e:	f000 fa25 	bl	800659c <USBD_CtlError>
      return;
 8006152:	e040      	b.n	80061d6 <USBD_GetDescriptor+0x202>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	7c1b      	ldrb	r3, [r3, #16]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10f      	bne.n	800617c <USBD_GetDescriptor+0x1a8>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	2385      	movs	r3, #133	; 0x85
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	58d3      	ldr	r3, [r2, r3]
 8006164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006166:	220a      	movs	r2, #10
 8006168:	18ba      	adds	r2, r7, r2
 800616a:	0010      	movs	r0, r2
 800616c:	4798      	blx	r3
 800616e:	0003      	movs	r3, r0
 8006170:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	3301      	adds	r3, #1
 8006176:	2207      	movs	r2, #7
 8006178:	701a      	strb	r2, [r3, #0]
      break; 
 800617a:	e00d      	b.n	8006198 <USBD_GetDescriptor+0x1c4>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800617c:	683a      	ldr	r2, [r7, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	0011      	movs	r1, r2
 8006182:	0018      	movs	r0, r3
 8006184:	f000 fa0a 	bl	800659c <USBD_CtlError>
      return;
 8006188:	e025      	b.n	80061d6 <USBD_GetDescriptor+0x202>
    }

  default: 
     USBD_CtlError(pdev , req);
 800618a:	683a      	ldr	r2, [r7, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	0011      	movs	r1, r2
 8006190:	0018      	movs	r0, r3
 8006192:	f000 fa03 	bl	800659c <USBD_CtlError>
    return;
 8006196:	e01e      	b.n	80061d6 <USBD_GetDescriptor+0x202>
  }
  
  if((len != 0)&& (req->wLength != 0))
 8006198:	210a      	movs	r1, #10
 800619a:	187b      	adds	r3, r7, r1
 800619c:	881b      	ldrh	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d019      	beq.n	80061d6 <USBD_GetDescriptor+0x202>
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	88db      	ldrh	r3, [r3, #6]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d015      	beq.n	80061d6 <USBD_GetDescriptor+0x202>
  {
    
    len = MIN(len , req->wLength);
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	88da      	ldrh	r2, [r3, #6]
 80061ae:	187b      	adds	r3, r7, r1
 80061b0:	881b      	ldrh	r3, [r3, #0]
 80061b2:	1c18      	adds	r0, r3, #0
 80061b4:	1c11      	adds	r1, r2, #0
 80061b6:	b28a      	uxth	r2, r1
 80061b8:	b283      	uxth	r3, r0
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d900      	bls.n	80061c0 <USBD_GetDescriptor+0x1ec>
 80061be:	1c01      	adds	r1, r0, #0
 80061c0:	b28a      	uxth	r2, r1
 80061c2:	210a      	movs	r1, #10
 80061c4:	187b      	adds	r3, r7, r1
 80061c6:	801a      	strh	r2, [r3, #0]
    
    USBD_CtlSendData (pdev, 
 80061c8:	187b      	adds	r3, r7, r1
 80061ca:	881a      	ldrh	r2, [r3, #0]
 80061cc:	68f9      	ldr	r1, [r7, #12]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	0018      	movs	r0, r3
 80061d2:	f000 fa62 	bl	800669a <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 80061d6:	46bd      	mov	sp, r7
 80061d8:	b004      	add	sp, #16
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	08007aa4 	.word	0x08007aa4
 80061e0:	08007ac4 	.word	0x08007ac4

080061e4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 80061e4:	b590      	push	{r4, r7, lr}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	889b      	ldrh	r3, [r3, #4]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d13a      	bne.n	800626c <USBD_SetAddress+0x88>
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	88db      	ldrh	r3, [r3, #6]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d136      	bne.n	800626c <USBD_SetAddress+0x88>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	885b      	ldrh	r3, [r3, #2]
 8006202:	b2da      	uxtb	r2, r3
 8006204:	230f      	movs	r3, #15
 8006206:	18fb      	adds	r3, r7, r3
 8006208:	217f      	movs	r1, #127	; 0x7f
 800620a:	400a      	ands	r2, r1
 800620c:	701a      	strb	r2, [r3, #0]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	23fe      	movs	r3, #254	; 0xfe
 8006212:	005b      	lsls	r3, r3, #1
 8006214:	5cd3      	ldrb	r3, [r2, r3]
 8006216:	2b03      	cmp	r3, #3
 8006218:	d106      	bne.n	8006228 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev , req);
 800621a:	683a      	ldr	r2, [r7, #0]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	0011      	movs	r1, r2
 8006220:	0018      	movs	r0, r3
 8006222:	f000 f9bb 	bl	800659c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8006226:	e028      	b.n	800627a <USBD_SetAddress+0x96>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	240f      	movs	r4, #15
 800622c:	1939      	adds	r1, r7, r4
 800622e:	23ff      	movs	r3, #255	; 0xff
 8006230:	005b      	lsls	r3, r3, #1
 8006232:	7809      	ldrb	r1, [r1, #0]
 8006234:	54d1      	strb	r1, [r2, r3]
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8006236:	193b      	adds	r3, r7, r4
 8006238:	781a      	ldrb	r2, [r3, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	0011      	movs	r1, r2
 800623e:	0018      	movs	r0, r3
 8006240:	f000 fea1 	bl	8006f86 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	0018      	movs	r0, r3
 8006248:	f000 fa91 	bl	800676e <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 800624c:	193b      	adds	r3, r7, r4
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d005      	beq.n	8006260 <USBD_SetAddress+0x7c>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	23fe      	movs	r3, #254	; 0xfe
 8006258:	005b      	lsls	r3, r3, #1
 800625a:	2102      	movs	r1, #2
 800625c:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800625e:	e00c      	b.n	800627a <USBD_SetAddress+0x96>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	23fe      	movs	r3, #254	; 0xfe
 8006264:	005b      	lsls	r3, r3, #1
 8006266:	2101      	movs	r1, #1
 8006268:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800626a:	e006      	b.n	800627a <USBD_SetAddress+0x96>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 800626c:	683a      	ldr	r2, [r7, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	0011      	movs	r1, r2
 8006272:	0018      	movs	r0, r3
 8006274:	f000 f992 	bl	800659c <USBD_CtlError>
  } 
}
 8006278:	46c0      	nop			; (mov r8, r8)
 800627a:	46c0      	nop			; (mov r8, r8)
 800627c:	46bd      	mov	sp, r7
 800627e:	b005      	add	sp, #20
 8006280:	bd90      	pop	{r4, r7, pc}
	...

08006284 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	885b      	ldrh	r3, [r3, #2]
 8006292:	b2da      	uxtb	r2, r3
 8006294:	4b48      	ldr	r3, [pc, #288]	; (80063b8 <USBD_SetConfig+0x134>)
 8006296:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8006298:	4b47      	ldr	r3, [pc, #284]	; (80063b8 <USBD_SetConfig+0x134>)
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d906      	bls.n	80062ae <USBD_SetConfig+0x2a>
  {            
     USBD_CtlError(pdev , req);                              
 80062a0:	683a      	ldr	r2, [r7, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	0011      	movs	r1, r2
 80062a6:	0018      	movs	r0, r3
 80062a8:	f000 f978 	bl	800659c <USBD_CtlError>
 80062ac:	e081      	b.n	80063b2 <USBD_SetConfig+0x12e>
  } 
  else 
  {
    switch (pdev->dev_state) 
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	23fe      	movs	r3, #254	; 0xfe
 80062b2:	005b      	lsls	r3, r3, #1
 80062b4:	5cd3      	ldrb	r3, [r2, r3]
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d002      	beq.n	80062c0 <USBD_SetConfig+0x3c>
 80062ba:	2b03      	cmp	r3, #3
 80062bc:	d029      	beq.n	8006312 <USBD_SetConfig+0x8e>
 80062be:	e071      	b.n	80063a4 <USBD_SetConfig+0x120>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 80062c0:	4b3d      	ldr	r3, [pc, #244]	; (80063b8 <USBD_SetConfig+0x134>)
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d01f      	beq.n	8006308 <USBD_SetConfig+0x84>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 80062c8:	4b3b      	ldr	r3, [pc, #236]	; (80063b8 <USBD_SetConfig+0x134>)
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	001a      	movs	r2, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	23fe      	movs	r3, #254	; 0xfe
 80062d6:	005b      	lsls	r3, r3, #1
 80062d8:	2103      	movs	r1, #3
 80062da:	54d1      	strb	r1, [r2, r3]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80062dc:	4b36      	ldr	r3, [pc, #216]	; (80063b8 <USBD_SetConfig+0x134>)
 80062de:	781a      	ldrb	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	0011      	movs	r1, r2
 80062e4:	0018      	movs	r0, r3
 80062e6:	f7ff faa4 	bl	8005832 <USBD_SetClassConfig>
 80062ea:	0003      	movs	r3, r0
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d106      	bne.n	80062fe <USBD_SetConfig+0x7a>
        {
          USBD_CtlError(pdev , req);  
 80062f0:	683a      	ldr	r2, [r7, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	0011      	movs	r1, r2
 80062f6:	0018      	movs	r0, r3
 80062f8:	f000 f950 	bl	800659c <USBD_CtlError>
          return;
 80062fc:	e059      	b.n	80063b2 <USBD_SetConfig+0x12e>
        }
        USBD_CtlSendStatus(pdev);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	0018      	movs	r0, r3
 8006302:	f000 fa34 	bl	800676e <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 8006306:	e054      	b.n	80063b2 <USBD_SetConfig+0x12e>
         USBD_CtlSendStatus(pdev);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	0018      	movs	r0, r3
 800630c:	f000 fa2f 	bl	800676e <USBD_CtlSendStatus>
      break;
 8006310:	e04f      	b.n	80063b2 <USBD_SetConfig+0x12e>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8006312:	4b29      	ldr	r3, [pc, #164]	; (80063b8 <USBD_SetConfig+0x134>)
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d115      	bne.n	8006346 <USBD_SetConfig+0xc2>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	23fe      	movs	r3, #254	; 0xfe
 800631e:	005b      	lsls	r3, r3, #1
 8006320:	2102      	movs	r1, #2
 8006322:	54d1      	strb	r1, [r2, r3]
        pdev->dev_config = cfgidx;          
 8006324:	4b24      	ldr	r3, [pc, #144]	; (80063b8 <USBD_SetConfig+0x134>)
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	001a      	movs	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800632e:	4b22      	ldr	r3, [pc, #136]	; (80063b8 <USBD_SetConfig+0x134>)
 8006330:	781a      	ldrb	r2, [r3, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	0011      	movs	r1, r2
 8006336:	0018      	movs	r0, r3
 8006338:	f7ff faa2 	bl	8005880 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	0018      	movs	r0, r3
 8006340:	f000 fa15 	bl	800676e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8006344:	e035      	b.n	80063b2 <USBD_SetConfig+0x12e>
      else  if (cfgidx != pdev->dev_config) 
 8006346:	4b1c      	ldr	r3, [pc, #112]	; (80063b8 <USBD_SetConfig+0x134>)
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	001a      	movs	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	429a      	cmp	r2, r3
 8006352:	d022      	beq.n	800639a <USBD_SetConfig+0x116>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	b2da      	uxtb	r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	0011      	movs	r1, r2
 800635e:	0018      	movs	r0, r3
 8006360:	f7ff fa8e 	bl	8005880 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006364:	4b14      	ldr	r3, [pc, #80]	; (80063b8 <USBD_SetConfig+0x134>)
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	001a      	movs	r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800636e:	4b12      	ldr	r3, [pc, #72]	; (80063b8 <USBD_SetConfig+0x134>)
 8006370:	781a      	ldrb	r2, [r3, #0]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	0011      	movs	r1, r2
 8006376:	0018      	movs	r0, r3
 8006378:	f7ff fa5b 	bl	8005832 <USBD_SetClassConfig>
 800637c:	0003      	movs	r3, r0
 800637e:	2b02      	cmp	r3, #2
 8006380:	d106      	bne.n	8006390 <USBD_SetConfig+0x10c>
          USBD_CtlError(pdev , req);  
 8006382:	683a      	ldr	r2, [r7, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	0011      	movs	r1, r2
 8006388:	0018      	movs	r0, r3
 800638a:	f000 f907 	bl	800659c <USBD_CtlError>
          return;
 800638e:	e010      	b.n	80063b2 <USBD_SetConfig+0x12e>
        USBD_CtlSendStatus(pdev);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	0018      	movs	r0, r3
 8006394:	f000 f9eb 	bl	800676e <USBD_CtlSendStatus>
      break;
 8006398:	e00b      	b.n	80063b2 <USBD_SetConfig+0x12e>
        USBD_CtlSendStatus(pdev);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	0018      	movs	r0, r3
 800639e:	f000 f9e6 	bl	800676e <USBD_CtlSendStatus>
      break;
 80063a2:	e006      	b.n	80063b2 <USBD_SetConfig+0x12e>
      
    default:					
       USBD_CtlError(pdev , req);                     
 80063a4:	683a      	ldr	r2, [r7, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	0011      	movs	r1, r2
 80063aa:	0018      	movs	r0, r3
 80063ac:	f000 f8f6 	bl	800659c <USBD_CtlError>
      break;
 80063b0:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 80063b2:	46bd      	mov	sp, r7
 80063b4:	b002      	add	sp, #8
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	200001a1 	.word	0x200001a1

080063bc <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	88db      	ldrh	r3, [r3, #6]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d006      	beq.n	80063dc <USBD_GetConfig+0x20>
  {                   
     USBD_CtlError(pdev , req);
 80063ce:	683a      	ldr	r2, [r7, #0]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	0011      	movs	r1, r2
 80063d4:	0018      	movs	r0, r3
 80063d6:	f000 f8e1 	bl	800659c <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80063da:	e023      	b.n	8006424 <USBD_GetConfig+0x68>
    switch (pdev->dev_state )  
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	23fe      	movs	r3, #254	; 0xfe
 80063e0:	005b      	lsls	r3, r3, #1
 80063e2:	5cd3      	ldrb	r3, [r2, r3]
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d002      	beq.n	80063ee <USBD_GetConfig+0x32>
 80063e8:	2b03      	cmp	r3, #3
 80063ea:	d00c      	beq.n	8006406 <USBD_GetConfig+0x4a>
 80063ec:	e013      	b.n	8006416 <USBD_GetConfig+0x5a>
      pdev->dev_default_config = 0;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	3308      	adds	r3, #8
 80063f8:	0019      	movs	r1, r3
      USBD_CtlSendData (pdev, 
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2201      	movs	r2, #1
 80063fe:	0018      	movs	r0, r3
 8006400:	f000 f94b 	bl	800669a <USBD_CtlSendData>
      break;
 8006404:	e00e      	b.n	8006424 <USBD_GetConfig+0x68>
                        (uint8_t *)&pdev->dev_config,
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	1d19      	adds	r1, r3, #4
      USBD_CtlSendData (pdev, 
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	0018      	movs	r0, r3
 8006410:	f000 f943 	bl	800669a <USBD_CtlSendData>
      break;
 8006414:	e006      	b.n	8006424 <USBD_GetConfig+0x68>
       USBD_CtlError(pdev , req);
 8006416:	683a      	ldr	r2, [r7, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	0011      	movs	r1, r2
 800641c:	0018      	movs	r0, r3
 800641e:	f000 f8bd 	bl	800659c <USBD_CtlError>
      break;
 8006422:	46c0      	nop			; (mov r8, r8)
}
 8006424:	46c0      	nop			; (mov r8, r8)
 8006426:	46bd      	mov	sp, r7
 8006428:	b002      	add	sp, #8
 800642a:	bd80      	pop	{r7, pc}

0800642c <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	23fe      	movs	r3, #254	; 0xfe
 800643a:	005b      	lsls	r3, r3, #1
 800643c:	5cd3      	ldrb	r3, [r2, r3]
 800643e:	3b02      	subs	r3, #2
 8006440:	2b01      	cmp	r3, #1
 8006442:	d817      	bhi.n	8006474 <USBD_GetStatus+0x48>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	2381      	movs	r3, #129	; 0x81
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	58d3      	ldr	r3, [r2, r3]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d005      	beq.n	8006462 <USBD_GetStatus+0x36>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	2202      	movs	r2, #2
 800645c:	431a      	orrs	r2, r3
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	330c      	adds	r3, #12
 8006466:	0019      	movs	r1, r3
    USBD_CtlSendData (pdev, 
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2202      	movs	r2, #2
 800646c:	0018      	movs	r0, r3
 800646e:	f000 f914 	bl	800669a <USBD_CtlSendData>
                      2);
    break;
 8006472:	e006      	b.n	8006482 <USBD_GetStatus+0x56>
    
  default :
    USBD_CtlError(pdev , req);                        
 8006474:	683a      	ldr	r2, [r7, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	0011      	movs	r1, r2
 800647a:	0018      	movs	r0, r3
 800647c:	f000 f88e 	bl	800659c <USBD_CtlError>
    break;
 8006480:	46c0      	nop			; (mov r8, r8)
  }
}
 8006482:	46c0      	nop			; (mov r8, r8)
 8006484:	46bd      	mov	sp, r7
 8006486:	b002      	add	sp, #8
 8006488:	bd80      	pop	{r7, pc}

0800648a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b082      	sub	sp, #8
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
 8006492:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	885b      	ldrh	r3, [r3, #2]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d111      	bne.n	80064c0 <USBD_SetFeature+0x36>
  {
    pdev->dev_remote_wakeup = 1;  
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	2381      	movs	r3, #129	; 0x81
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	2101      	movs	r1, #1
 80064a4:	50d1      	str	r1, [r2, r3]
    pdev->pClass->Setup (pdev, req);   
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	2385      	movs	r3, #133	; 0x85
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	58d3      	ldr	r3, [r2, r3]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	6839      	ldr	r1, [r7, #0]
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	0010      	movs	r0, r2
 80064b6:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	0018      	movs	r0, r3
 80064bc:	f000 f957 	bl	800676e <USBD_CtlSendStatus>
  }

}
 80064c0:	46c0      	nop			; (mov r8, r8)
 80064c2:	46bd      	mov	sp, r7
 80064c4:	b002      	add	sp, #8
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	23fe      	movs	r3, #254	; 0xfe
 80064d6:	005b      	lsls	r3, r3, #1
 80064d8:	5cd3      	ldrb	r3, [r2, r3]
 80064da:	3b02      	subs	r3, #2
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d816      	bhi.n	800650e <USBD_ClrFeature+0x46>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	885b      	ldrh	r3, [r3, #2]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d119      	bne.n	800651c <USBD_ClrFeature+0x54>
    {
      pdev->dev_remote_wakeup = 0; 
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	2381      	movs	r3, #129	; 0x81
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	2100      	movs	r1, #0
 80064f0:	50d1      	str	r1, [r2, r3]
      pdev->pClass->Setup (pdev, req);   
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	2385      	movs	r3, #133	; 0x85
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	58d3      	ldr	r3, [r2, r3]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	6839      	ldr	r1, [r7, #0]
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	0010      	movs	r0, r2
 8006502:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	0018      	movs	r0, r3
 8006508:	f000 f931 	bl	800676e <USBD_CtlSendStatus>
    }
    break;
 800650c:	e006      	b.n	800651c <USBD_ClrFeature+0x54>
    
  default :
     USBD_CtlError(pdev , req);
 800650e:	683a      	ldr	r2, [r7, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	0011      	movs	r1, r2
 8006514:	0018      	movs	r0, r3
 8006516:	f000 f841 	bl	800659c <USBD_CtlError>
    break;
 800651a:	e000      	b.n	800651e <USBD_ClrFeature+0x56>
    break;
 800651c:	46c0      	nop			; (mov r8, r8)
  }
}
 800651e:	46c0      	nop			; (mov r8, r8)
 8006520:	46bd      	mov	sp, r7
 8006522:	b002      	add	sp, #8
 8006524:	bd80      	pop	{r7, pc}

08006526 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b082      	sub	sp, #8
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
 800652e:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	781a      	ldrb	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	785a      	ldrb	r2, [r3, #1]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	3302      	adds	r3, #2
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	b29a      	uxth	r2, r3
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	3303      	adds	r3, #3
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	b29b      	uxth	r3, r3
 8006550:	021b      	lsls	r3, r3, #8
 8006552:	b29b      	uxth	r3, r3
 8006554:	18d3      	adds	r3, r2, r3
 8006556:	b29a      	uxth	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	3304      	adds	r3, #4
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	b29a      	uxth	r2, r3
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	3305      	adds	r3, #5
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	b29b      	uxth	r3, r3
 800656c:	021b      	lsls	r3, r3, #8
 800656e:	b29b      	uxth	r3, r3
 8006570:	18d3      	adds	r3, r2, r3
 8006572:	b29a      	uxth	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	3306      	adds	r3, #6
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	b29a      	uxth	r2, r3
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	3307      	adds	r3, #7
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	b29b      	uxth	r3, r3
 8006588:	021b      	lsls	r3, r3, #8
 800658a:	b29b      	uxth	r3, r3
 800658c:	18d3      	adds	r3, r2, r3
 800658e:	b29a      	uxth	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	80da      	strh	r2, [r3, #6]

}
 8006594:	46c0      	nop			; (mov r8, r8)
 8006596:	46bd      	mov	sp, r7
 8006598:	b002      	add	sp, #8
 800659a:	bd80      	pop	{r7, pc}

0800659c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2180      	movs	r1, #128	; 0x80
 80065aa:	0018      	movs	r0, r3
 80065ac:	f000 fcb8 	bl	8006f20 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2100      	movs	r1, #0
 80065b4:	0018      	movs	r0, r3
 80065b6:	f000 fcb3 	bl	8006f20 <USBD_LL_StallEP>
}
 80065ba:	46c0      	nop			; (mov r8, r8)
 80065bc:	46bd      	mov	sp, r7
 80065be:	b002      	add	sp, #8
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80065c2:	b590      	push	{r4, r7, lr}
 80065c4:	b087      	sub	sp, #28
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	60f8      	str	r0, [r7, #12]
 80065ca:	60b9      	str	r1, [r7, #8]
 80065cc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 80065ce:	2417      	movs	r4, #23
 80065d0:	193b      	adds	r3, r7, r4
 80065d2:	2200      	movs	r2, #0
 80065d4:	701a      	strb	r2, [r3, #0]
  
  if (desc != NULL) 
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d03d      	beq.n	8006658 <USBD_GetString+0x96>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	0018      	movs	r0, r3
 80065e0:	f000 f83e 	bl	8006660 <USBD_GetLen>
 80065e4:	0003      	movs	r3, r0
 80065e6:	3301      	adds	r3, #1
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	18db      	adds	r3, r3, r3
 80065ec:	b29a      	uxth	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	8819      	ldrh	r1, [r3, #0]
 80065f6:	193b      	adds	r3, r7, r4
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	193a      	adds	r2, r7, r4
 80065fc:	1c58      	adds	r0, r3, #1
 80065fe:	7010      	strb	r0, [r2, #0]
 8006600:	001a      	movs	r2, r3
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	189b      	adds	r3, r3, r2
 8006606:	b2ca      	uxtb	r2, r1
 8006608:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800660a:	193b      	adds	r3, r7, r4
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	193a      	adds	r2, r7, r4
 8006610:	1c59      	adds	r1, r3, #1
 8006612:	7011      	strb	r1, [r2, #0]
 8006614:	001a      	movs	r2, r3
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	189b      	adds	r3, r3, r2
 800661a:	2203      	movs	r2, #3
 800661c:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 800661e:	e017      	b.n	8006650 <USBD_GetString+0x8e>
    {
      unicode[idx++] = *desc++;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	1c5a      	adds	r2, r3, #1
 8006624:	60fa      	str	r2, [r7, #12]
 8006626:	2417      	movs	r4, #23
 8006628:	193a      	adds	r2, r7, r4
 800662a:	7812      	ldrb	r2, [r2, #0]
 800662c:	1939      	adds	r1, r7, r4
 800662e:	1c50      	adds	r0, r2, #1
 8006630:	7008      	strb	r0, [r1, #0]
 8006632:	0011      	movs	r1, r2
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	1852      	adds	r2, r2, r1
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 800663c:	193b      	adds	r3, r7, r4
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	193a      	adds	r2, r7, r4
 8006642:	1c59      	adds	r1, r3, #1
 8006644:	7011      	strb	r1, [r2, #0]
 8006646:	001a      	movs	r2, r3
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	189b      	adds	r3, r3, r2
 800664c:	2200      	movs	r2, #0
 800664e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1e3      	bne.n	8006620 <USBD_GetString+0x5e>
    }
  } 
}
 8006658:	46c0      	nop			; (mov r8, r8)
 800665a:	46bd      	mov	sp, r7
 800665c:	b007      	add	sp, #28
 800665e:	bd90      	pop	{r4, r7, pc}

08006660 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8006668:	230f      	movs	r3, #15
 800666a:	18fb      	adds	r3, r7, r3
 800666c:	2200      	movs	r2, #0
 800666e:	701a      	strb	r2, [r3, #0]

    while (*buf != '\0') 
 8006670:	e008      	b.n	8006684 <USBD_GetLen+0x24>
    {
        len++;
 8006672:	210f      	movs	r1, #15
 8006674:	187b      	adds	r3, r7, r1
 8006676:	781a      	ldrb	r2, [r3, #0]
 8006678:	187b      	adds	r3, r7, r1
 800667a:	3201      	adds	r2, #1
 800667c:	701a      	strb	r2, [r3, #0]
        buf++;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	3301      	adds	r3, #1
 8006682:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d1f2      	bne.n	8006672 <USBD_GetLen+0x12>
    }

    return len;
 800668c:	230f      	movs	r3, #15
 800668e:	18fb      	adds	r3, r7, r3
 8006690:	781b      	ldrb	r3, [r3, #0]
}
 8006692:	0018      	movs	r0, r3
 8006694:	46bd      	mov	sp, r7
 8006696:	b004      	add	sp, #16
 8006698:	bd80      	pop	{r7, pc}

0800669a <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b084      	sub	sp, #16
 800669e:	af00      	add	r7, sp, #0
 80066a0:	60f8      	str	r0, [r7, #12]
 80066a2:	60b9      	str	r1, [r7, #8]
 80066a4:	1dbb      	adds	r3, r7, #6
 80066a6:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	23fa      	movs	r3, #250	; 0xfa
 80066ac:	005b      	lsls	r3, r3, #1
 80066ae:	2102      	movs	r1, #2
 80066b0:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 80066b2:	1dbb      	adds	r3, r7, #6
 80066b4:	881a      	ldrh	r2, [r3, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 80066ba:	1dbb      	adds	r3, r7, #6
 80066bc:	881a      	ldrh	r2, [r3, #0]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80066c2:	1dbb      	adds	r3, r7, #6
 80066c4:	881b      	ldrh	r3, [r3, #0]
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	2100      	movs	r1, #0
 80066cc:	f000 fc68 	bl	8006fa0 <USBD_LL_Transmit>
  
  return USBD_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	0018      	movs	r0, r3
 80066d4:	46bd      	mov	sp, r7
 80066d6:	b004      	add	sp, #16
 80066d8:	bd80      	pop	{r7, pc}

080066da <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b084      	sub	sp, #16
 80066de:	af00      	add	r7, sp, #0
 80066e0:	60f8      	str	r0, [r7, #12]
 80066e2:	60b9      	str	r1, [r7, #8]
 80066e4:	1dbb      	adds	r3, r7, #6
 80066e6:	801a      	strh	r2, [r3, #0]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 80066e8:	1dbb      	adds	r3, r7, #6
 80066ea:	881b      	ldrh	r3, [r3, #0]
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	2100      	movs	r1, #0
 80066f2:	f000 fc55 	bl	8006fa0 <USBD_LL_Transmit>
  
  return USBD_OK;
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	0018      	movs	r0, r3
 80066fa:	46bd      	mov	sp, r7
 80066fc:	b004      	add	sp, #16
 80066fe:	bd80      	pop	{r7, pc}

08006700 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	1dbb      	adds	r3, r7, #6
 800670c:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	23fa      	movs	r3, #250	; 0xfa
 8006712:	005b      	lsls	r3, r3, #1
 8006714:	2103      	movs	r1, #3
 8006716:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8006718:	1dbb      	adds	r3, r7, #6
 800671a:	8819      	ldrh	r1, [r3, #0]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	2384      	movs	r3, #132	; 0x84
 8006720:	005b      	lsls	r3, r3, #1
 8006722:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8006724:	1dbb      	adds	r3, r7, #6
 8006726:	8819      	ldrh	r1, [r3, #0]
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	2386      	movs	r3, #134	; 0x86
 800672c:	005b      	lsls	r3, r3, #1
 800672e:	50d1      	str	r1, [r2, r3]
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8006730:	1dbb      	adds	r3, r7, #6
 8006732:	881b      	ldrh	r3, [r3, #0]
 8006734:	68ba      	ldr	r2, [r7, #8]
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	2100      	movs	r1, #0
 800673a:	f000 fc3e 	bl	8006fba <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	0018      	movs	r0, r3
 8006742:	46bd      	mov	sp, r7
 8006744:	b004      	add	sp, #16
 8006746:	bd80      	pop	{r7, pc}

08006748 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	1dbb      	adds	r3, r7, #6
 8006754:	801a      	strh	r2, [r3, #0]

  USBD_LL_PrepareReceive (pdev,
 8006756:	1dbb      	adds	r3, r7, #6
 8006758:	881b      	ldrh	r3, [r3, #0]
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	2100      	movs	r1, #0
 8006760:	f000 fc2b 	bl	8006fba <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	0018      	movs	r0, r3
 8006768:	46bd      	mov	sp, r7
 800676a:	b004      	add	sp, #16
 800676c:	bd80      	pop	{r7, pc}

0800676e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 800676e:	b580      	push	{r7, lr}
 8006770:	b082      	sub	sp, #8
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	23fa      	movs	r3, #250	; 0xfa
 800677a:	005b      	lsls	r3, r3, #1
 800677c:	2104      	movs	r1, #4
 800677e:	50d1      	str	r1, [r2, r3]
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	2300      	movs	r3, #0
 8006784:	2200      	movs	r2, #0
 8006786:	2100      	movs	r1, #0
 8006788:	f000 fc0a 	bl	8006fa0 <USBD_LL_Transmit>
  
  return USBD_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	0018      	movs	r0, r3
 8006790:	46bd      	mov	sp, r7
 8006792:	b002      	add	sp, #8
 8006794:	bd80      	pop	{r7, pc}

08006796 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b082      	sub	sp, #8
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	23fa      	movs	r3, #250	; 0xfa
 80067a2:	005b      	lsls	r3, r3, #1
 80067a4:	2105      	movs	r1, #5
 80067a6:	50d1      	str	r1, [r2, r3]
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	2300      	movs	r3, #0
 80067ac:	2200      	movs	r2, #0
 80067ae:	2100      	movs	r1, #0
 80067b0:	f000 fc03 	bl	8006fba <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	0018      	movs	r0, r3
 80067b8:	46bd      	mov	sp, r7
 80067ba:	b002      	add	sp, #8
 80067bc:	bd80      	pop	{r7, pc}

080067be <RebootToBootloader>:

#include "stm32f0xx_hal.h"
#include "usb_device.h"

//call this at any time to initiate a reboot into bootloader
void RebootToBootloader(){
 80067be:	b500      	push	{lr}
 80067c0:	b087      	sub	sp, #28


    FLASH_OBProgramInitTypeDef OBParam;

    HAL_FLASHEx_OBGetConfig(&OBParam);
 80067c2:	4668      	mov	r0, sp
 80067c4:	f7fb f842 	bl	800184c <HAL_FLASHEx_OBGetConfig>

    OBParam.OptionType = OPTIONBYTE_USER;
 80067c8:	2304      	movs	r3, #4
 80067ca:	9300      	str	r3, [sp, #0]
    /*Reset NBOOT0 and BOOT_SEL,  see: RM 2.5 Boot configuration*/
    OBParam.USERConfig = 0x77; //Sorry for magic number :)
 80067cc:	3373      	adds	r3, #115	; 0x73
 80067ce:	466a      	mov	r2, sp
 80067d0:	7353      	strb	r3, [r2, #13]

    HAL_FLASH_Unlock();
 80067d2:	f7fa fe83 	bl	80014dc <HAL_FLASH_Unlock>
    HAL_FLASH_OB_Unlock();
 80067d6:	f7fa fea9 	bl	800152c <HAL_FLASH_OB_Unlock>

    HAL_FLASHEx_OBErase();
 80067da:	f7fa ff57 	bl	800168c <HAL_FLASHEx_OBErase>

    HAL_FLASHEx_OBProgram(&OBParam);
 80067de:	4668      	mov	r0, sp
 80067e0:	f7fa ffa2 	bl	8001728 <HAL_FLASHEx_OBProgram>

    HAL_FLASH_OB_Lock();
 80067e4:	f7fa febc 	bl	8001560 <HAL_FLASH_OB_Lock>
    HAL_FLASH_Lock();
 80067e8:	f7fa fe92 	bl	8001510 <HAL_FLASH_Lock>

    HAL_FLASH_OB_Launch();
 80067ec:	f7fa fec8 	bl	8001580 <HAL_FLASH_OB_Launch>
}
 80067f0:	b007      	add	sp, #28
 80067f2:	bd00      	pop	{pc}

080067f4 <bootloaderSwitcher>:

//turns off BOOT0 pin
void bootloaderSwitcher(){
 80067f4:	b500      	push	{lr}
 80067f6:	b087      	sub	sp, #28
    FLASH_OBProgramInitTypeDef OBParam;

    HAL_FLASHEx_OBGetConfig(&OBParam);
 80067f8:	4668      	mov	r0, sp
 80067fa:	f7fb f827 	bl	800184c <HAL_FLASHEx_OBGetConfig>

    if(OBParam.USERConfig != 0x7F)
 80067fe:	466b      	mov	r3, sp
 8006800:	7b5b      	ldrb	r3, [r3, #13]
 8006802:	2b7f      	cmp	r3, #127	; 0x7f
 8006804:	d101      	bne.n	800680a <bootloaderSwitcher+0x16>
        HAL_FLASHEx_OBErase();
        HAL_FLASHEx_OBProgram(&OBParam);
        HAL_FLASH_OB_Lock();
        HAL_FLASH_OB_Launch();
    }
}
 8006806:	b007      	add	sp, #28
 8006808:	bd00      	pop	{pc}
        OBParam.OptionType = OPTIONBYTE_USER;
 800680a:	2304      	movs	r3, #4
 800680c:	9300      	str	r3, [sp, #0]
        OBParam.USERConfig = 0x7F;
 800680e:	337b      	adds	r3, #123	; 0x7b
 8006810:	466a      	mov	r2, sp
 8006812:	7353      	strb	r3, [r2, #13]
        HAL_FLASH_Unlock();
 8006814:	f7fa fe62 	bl	80014dc <HAL_FLASH_Unlock>
        HAL_FLASH_OB_Unlock();
 8006818:	f7fa fe88 	bl	800152c <HAL_FLASH_OB_Unlock>
        HAL_FLASHEx_OBErase();
 800681c:	f7fa ff36 	bl	800168c <HAL_FLASHEx_OBErase>
        HAL_FLASHEx_OBProgram(&OBParam);
 8006820:	4668      	mov	r0, sp
 8006822:	f7fa ff81 	bl	8001728 <HAL_FLASHEx_OBProgram>
        HAL_FLASH_OB_Lock();
 8006826:	f7fa fe9b 	bl	8001560 <HAL_FLASH_OB_Lock>
        HAL_FLASH_OB_Launch();
 800682a:	f7fa fea9 	bl	8001580 <HAL_FLASH_OB_Launch>
}
 800682e:	e7ea      	b.n	8006806 <bootloaderSwitcher+0x12>

08006830 <HAL_CAN_ErrorCallback>:
  /* USER CODE END 3 */

}

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8006830:	b510      	push	{r4, lr}
	HAL_CAN_Receive_IT(hcan, CAN_FIFO0);
 8006832:	2100      	movs	r1, #0
 8006834:	f7fa f910 	bl	8000a58 <HAL_CAN_Receive_IT>
}
 8006838:	bd10      	pop	{r4, pc}

0800683a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800683a:	b500      	push	{lr}
 800683c:	b099      	sub	sp, #100	; 0x64
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI;
 800683e:	2328      	movs	r3, #40	; 0x28
 8006840:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8006842:	3b27      	subs	r3, #39	; 0x27
 8006844:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8006846:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8006848:	2300      	movs	r3, #0
 800684a:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800684c:	a80b      	add	r0, sp, #44	; 0x2c
 800684e:	f7fd fca7 	bl	80041a0 <HAL_RCC_OscConfig>
 8006852:	2800      	cmp	r0, #0
 8006854:	d129      	bne.n	80068aa <SystemClock_Config+0x70>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006856:	2307      	movs	r3, #7
 8006858:	9307      	str	r3, [sp, #28]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800685a:	3b04      	subs	r3, #4
 800685c:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800685e:	2300      	movs	r3, #0
 8006860:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006862:	930a      	str	r3, [sp, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8006864:	2101      	movs	r1, #1
 8006866:	a807      	add	r0, sp, #28
 8006868:	f7fd fd8a 	bl	8004380 <HAL_RCC_ClockConfig>
 800686c:	2800      	cmp	r0, #0
 800686e:	d11d      	bne.n	80068ac <SystemClock_Config+0x72>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8006870:	2380      	movs	r3, #128	; 0x80
 8006872:	029b      	lsls	r3, r3, #10
 8006874:	9301      	str	r3, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8006876:	2300      	movs	r3, #0
 8006878:	9306      	str	r3, [sp, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800687a:	a801      	add	r0, sp, #4
 800687c:	f7fd ff2a 	bl	80046d4 <HAL_RCCEx_PeriphCLKConfig>
 8006880:	2800      	cmp	r0, #0
 8006882:	d114      	bne.n	80068ae <SystemClock_Config+0x74>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8006884:	f7fd ff06 	bl	8004694 <HAL_RCC_GetHCLKFreq>
 8006888:	21fa      	movs	r1, #250	; 0xfa
 800688a:	0089      	lsls	r1, r1, #2
 800688c:	f7f9 fc3c 	bl	8000108 <__udivsi3>
 8006890:	f7fa fdf1 	bl	8001476 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8006894:	2004      	movs	r0, #4
 8006896:	f7fa fdfb 	bl	8001490 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800689a:	2001      	movs	r0, #1
 800689c:	2200      	movs	r2, #0
 800689e:	2100      	movs	r1, #0
 80068a0:	4240      	negs	r0, r0
 80068a2:	f7fa fdb3 	bl	800140c <HAL_NVIC_SetPriority>
}
 80068a6:	b019      	add	sp, #100	; 0x64
 80068a8:	bd00      	pop	{pc}
  */
void _Error_Handler(char *file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80068aa:	e7fe      	b.n	80068aa <SystemClock_Config+0x70>
 80068ac:	e7fe      	b.n	80068ac <SystemClock_Config+0x72>
 80068ae:	e7fe      	b.n	80068ae <SystemClock_Config+0x74>

080068b0 <main>:
{
 80068b0:	b570      	push	{r4, r5, r6, lr}
 80068b2:	b088      	sub	sp, #32
	serialNumber = TYPE_ID | (((*uid) << 8) & 0xFFFFFF00);
 80068b4:	4b5b      	ldr	r3, [pc, #364]	; (8006a24 <main+0x174>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	021b      	lsls	r3, r3, #8
 80068bc:	2216      	movs	r2, #22
 80068be:	4313      	orrs	r3, r2
 80068c0:	4a59      	ldr	r2, [pc, #356]	; (8006a28 <main+0x178>)
 80068c2:	6013      	str	r3, [r2, #0]
	bootloaderSwitcher();
 80068c4:	f7ff ff96 	bl	80067f4 <bootloaderSwitcher>
  HAL_Init();
 80068c8:	f7f9 fcaa 	bl	8000220 <HAL_Init>
  SystemClock_Config();
 80068cc:	f7ff ffb5 	bl	800683a <SystemClock_Config>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80068d0:	4b56      	ldr	r3, [pc, #344]	; (8006a2c <main+0x17c>)
 80068d2:	6959      	ldr	r1, [r3, #20]
 80068d4:	2080      	movs	r0, #128	; 0x80
 80068d6:	03c0      	lsls	r0, r0, #15
 80068d8:	4301      	orrs	r1, r0
 80068da:	6159      	str	r1, [r3, #20]
 80068dc:	695a      	ldr	r2, [r3, #20]
 80068de:	4002      	ands	r2, r0
 80068e0:	9200      	str	r2, [sp, #0]
 80068e2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80068e4:	6959      	ldr	r1, [r3, #20]
 80068e6:	2080      	movs	r0, #128	; 0x80
 80068e8:	0280      	lsls	r0, r0, #10
 80068ea:	4301      	orrs	r1, r0
 80068ec:	6159      	str	r1, [r3, #20]
 80068ee:	695a      	ldr	r2, [r3, #20]
 80068f0:	4002      	ands	r2, r0
 80068f2:	9201      	str	r2, [sp, #4]
 80068f4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80068f6:	695a      	ldr	r2, [r3, #20]
 80068f8:	2180      	movs	r1, #128	; 0x80
 80068fa:	02c9      	lsls	r1, r1, #11
 80068fc:	430a      	orrs	r2, r1
 80068fe:	615a      	str	r2, [r3, #20]
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	400b      	ands	r3, r1
 8006904:	9302      	str	r3, [sp, #8]
 8006906:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(CAN_MOD_GPIO_Port, CAN_MOD_Pin, GPIO_PIN_RESET);
 8006908:	4e49      	ldr	r6, [pc, #292]	; (8006a30 <main+0x180>)
 800690a:	2200      	movs	r2, #0
 800690c:	2101      	movs	r1, #1
 800690e:	0030      	movs	r0, r6
 8006910:	f7fb fafa 	bl	8001f08 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = CAN_MOD_Pin;
 8006914:	2501      	movs	r5, #1
 8006916:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006918:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800691a:	2400      	movs	r4, #0
 800691c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800691e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(CAN_MOD_GPIO_Port, &GPIO_InitStruct);
 8006920:	a903      	add	r1, sp, #12
 8006922:	0030      	movs	r0, r6
 8006924:	f7fb f984 	bl	8001c30 <HAL_GPIO_Init>
  hcan.Instance = CAN;
 8006928:	4842      	ldr	r0, [pc, #264]	; (8006a34 <main+0x184>)
 800692a:	4b43      	ldr	r3, [pc, #268]	; (8006a38 <main+0x188>)
 800692c:	6003      	str	r3, [r0, #0]
  hcan.Init.Prescaler = 3;
 800692e:	2303      	movs	r3, #3
 8006930:	6043      	str	r3, [r0, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8006932:	6084      	str	r4, [r0, #8]
  hcan.Init.SJW = CAN_SJW_2TQ;
 8006934:	2380      	movs	r3, #128	; 0x80
 8006936:	045b      	lsls	r3, r3, #17
 8006938:	60c3      	str	r3, [r0, #12]
  hcan.Init.BS1 = CAN_BS1_11TQ;
 800693a:	23a0      	movs	r3, #160	; 0xa0
 800693c:	031b      	lsls	r3, r3, #12
 800693e:	6103      	str	r3, [r0, #16]
  hcan.Init.BS2 = CAN_BS2_4TQ;
 8006940:	23c0      	movs	r3, #192	; 0xc0
 8006942:	039b      	lsls	r3, r3, #14
 8006944:	6143      	str	r3, [r0, #20]
  hcan.Init.TTCM = DISABLE;
 8006946:	6184      	str	r4, [r0, #24]
  hcan.Init.ABOM = ENABLE;
 8006948:	61c5      	str	r5, [r0, #28]
  hcan.Init.AWUM = DISABLE;
 800694a:	6204      	str	r4, [r0, #32]
  hcan.Init.NART = DISABLE;
 800694c:	6244      	str	r4, [r0, #36]	; 0x24
  hcan.Init.RFLM = DISABLE;
 800694e:	6284      	str	r4, [r0, #40]	; 0x28
  hcan.Init.TXFP = DISABLE;
 8006950:	62c4      	str	r4, [r0, #44]	; 0x2c
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8006952:	f7f9 fcab 	bl	80002ac <HAL_CAN_Init>
 8006956:	2800      	cmp	r0, #0
 8006958:	d146      	bne.n	80069e8 <main+0x138>
  huart2.Instance = USART2;
 800695a:	4838      	ldr	r0, [pc, #224]	; (8006a3c <main+0x18c>)
 800695c:	4b38      	ldr	r3, [pc, #224]	; (8006a40 <main+0x190>)
 800695e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8006960:	23e1      	movs	r3, #225	; 0xe1
 8006962:	025b      	lsls	r3, r3, #9
 8006964:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006966:	2300      	movs	r3, #0
 8006968:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800696a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800696c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800696e:	220c      	movs	r2, #12
 8006970:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006972:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006974:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006976:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006978:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800697a:	f7fd ff99 	bl	80048b0 <HAL_UART_Init>
 800697e:	2800      	cmp	r0, #0
 8006980:	d133      	bne.n	80069ea <main+0x13a>
  MX_USB_DEVICE_Init();
 8006982:	f000 f95f 	bl	8006c44 <MX_USB_DEVICE_Init>
  hiwdg.Instance = IWDG;
 8006986:	482f      	ldr	r0, [pc, #188]	; (8006a44 <main+0x194>)
 8006988:	4b2f      	ldr	r3, [pc, #188]	; (8006a48 <main+0x198>)
 800698a:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 800698c:	2304      	movs	r3, #4
 800698e:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Window = 4095;
 8006990:	4b2e      	ldr	r3, [pc, #184]	; (8006a4c <main+0x19c>)
 8006992:	60c3      	str	r3, [r0, #12]
  hiwdg.Init.Reload = 4095;
 8006994:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8006996:	f7fb fad5 	bl	8001f44 <HAL_IWDG_Init>
 800699a:	2800      	cmp	r0, #0
 800699c:	d126      	bne.n	80069ec <main+0x13c>
	hcan.pTxMsg = &CanTxBuffer;
 800699e:	4c25      	ldr	r4, [pc, #148]	; (8006a34 <main+0x184>)
 80069a0:	4b2b      	ldr	r3, [pc, #172]	; (8006a50 <main+0x1a0>)
 80069a2:	6323      	str	r3, [r4, #48]	; 0x30
	hcan.pRxMsg = &CanRxBuffer;
 80069a4:	4b2b      	ldr	r3, [pc, #172]	; (8006a54 <main+0x1a4>)
 80069a6:	6363      	str	r3, [r4, #52]	; 0x34
	canRxFlags.flags.byte = 0;
 80069a8:	4b2b      	ldr	r3, [pc, #172]	; (8006a58 <main+0x1a8>)
 80069aa:	2200      	movs	r2, #0
 80069ac:	701a      	strb	r2, [r3, #0]
		slcanClearAllFilters();
 80069ae:	f000 fefd 	bl	80077ac <slcanClearAllFilters>
		HAL_NVIC_SetPriority(CEC_CAN_IRQn, 2, 2);
 80069b2:	2202      	movs	r2, #2
 80069b4:	2102      	movs	r1, #2
 80069b6:	201e      	movs	r0, #30
 80069b8:	f7fa fd28 	bl	800140c <HAL_NVIC_SetPriority>
		HAL_CAN_Receive_IT(&hcan, CAN_FIFO0);
 80069bc:	2100      	movs	r1, #0
 80069be:	0020      	movs	r0, r4
 80069c0:	f7fa f84a 	bl	8000a58 <HAL_CAN_Receive_IT>
		HAL_UART_Receive_IT(&huart2, &Uart2RxFifo, UART_RX_FIFO_SIZE);
 80069c4:	2201      	movs	r2, #1
 80069c6:	4925      	ldr	r1, [pc, #148]	; (8006a5c <main+0x1ac>)
 80069c8:	481c      	ldr	r0, [pc, #112]	; (8006a3c <main+0x18c>)
 80069ca:	f7fe f86d 	bl	8004aa8 <HAL_UART_Receive_IT>
		HAL_NVIC_SetPriority(USART2_IRQn, 3, 3);
 80069ce:	2203      	movs	r2, #3
 80069d0:	2103      	movs	r1, #3
 80069d2:	201c      	movs	r0, #28
 80069d4:	f7fa fd1a 	bl	800140c <HAL_NVIC_SetPriority>
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80069d8:	4b21      	ldr	r3, [pc, #132]	; (8006a60 <main+0x1b0>)
 80069da:	2280      	movs	r2, #128	; 0x80
 80069dc:	0552      	lsls	r2, r2, #21
 80069de:	601a      	str	r2, [r3, #0]
		slCanCheckCommand(command);
 80069e0:	4e20      	ldr	r6, [pc, #128]	; (8006a64 <main+0x1b4>)
		if (canRxFlags.flags.byte != 0) {
 80069e2:	4d1d      	ldr	r5, [pc, #116]	; (8006a58 <main+0x1a8>)
			slcanReciveCanFrame(hcan.pRxMsg);
 80069e4:	4c13      	ldr	r4, [pc, #76]	; (8006a34 <main+0x184>)
}
 80069e6:	e014      	b.n	8006a12 <main+0x162>
  while(1)
 80069e8:	e7fe      	b.n	80069e8 <main+0x138>
 80069ea:	e7fe      	b.n	80069ea <main+0x13a>
 80069ec:	e7fe      	b.n	80069ec <main+0x13c>
			slcanReciveCanFrame(hcan.pRxMsg);
 80069ee:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80069f0:	f000 fe82 	bl	80076f8 <slcanReciveCanFrame>
			canRxFlags.flags.fifo1 = 0;
 80069f4:	4a18      	ldr	r2, [pc, #96]	; (8006a58 <main+0x1a8>)
 80069f6:	7813      	ldrb	r3, [r2, #0]
 80069f8:	2101      	movs	r1, #1
 80069fa:	438b      	bics	r3, r1
 80069fc:	7013      	strb	r3, [r2, #0]
			HAL_CAN_Receive_IT(&hcan, CAN_FIFO0);
 80069fe:	2100      	movs	r1, #0
 8006a00:	0020      	movs	r0, r4
 8006a02:	f7fa f829 	bl	8000a58 <HAL_CAN_Receive_IT>
			USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006a06:	4818      	ldr	r0, [pc, #96]	; (8006a68 <main+0x1b8>)
 8006a08:	f7fe fe7e 	bl	8005708 <USBD_CDC_ReceivePacket>
		HAL_IWDG_Refresh(&hiwdg);
 8006a0c:	480d      	ldr	r0, [pc, #52]	; (8006a44 <main+0x194>)
 8006a0e:	f7fb fae3 	bl	8001fd8 <HAL_IWDG_Refresh>
		slCanCheckCommand(command);
 8006a12:	0030      	movs	r0, r6
 8006a14:	f000 fc0e 	bl	8007234 <slCanCheckCommand>
		slcanOutputFlush();
 8006a18:	f000 fbb8 	bl	800718c <slcanOutputFlush>
		if (canRxFlags.flags.byte != 0) {
 8006a1c:	782b      	ldrb	r3, [r5, #0]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1e5      	bne.n	80069ee <main+0x13e>
 8006a22:	e7f3      	b.n	8006a0c <main+0x15c>
 8006a24:	20000110 	.word	0x20000110
 8006a28:	200002b0 	.word	0x200002b0
 8006a2c:	40021000 	.word	0x40021000
 8006a30:	48001400 	.word	0x48001400
 8006a34:	200001ec 	.word	0x200001ec
 8006a38:	40006400 	.word	0x40006400
 8006a3c:	20000240 	.word	0x20000240
 8006a40:	40004400 	.word	0x40004400
 8006a44:	20000230 	.word	0x20000230
 8006a48:	40003000 	.word	0x40003000
 8006a4c:	00000fff 	.word	0x00000fff
 8006a50:	200001c8 	.word	0x200001c8
 8006a54:	200001a4 	.word	0x200001a4
 8006a58:	200001e8 	.word	0x200001e8
 8006a5c:	200001e4 	.word	0x200001e4
 8006a60:	e000e100 	.word	0xe000e100
 8006a64:	20000c18 	.word	0x20000c18
 8006a68:	200002b4 	.word	0x200002b4

08006a6c <HAL_CAN_RxCpltCallback>:
	canRxFlags.flags.fifo1 = 1;
 8006a6c:	4a02      	ldr	r2, [pc, #8]	; (8006a78 <HAL_CAN_RxCpltCallback+0xc>)
 8006a6e:	7813      	ldrb	r3, [r2, #0]
 8006a70:	2101      	movs	r1, #1
 8006a72:	430b      	orrs	r3, r1
 8006a74:	7013      	strb	r3, [r2, #0]
}
 8006a76:	4770      	bx	lr
 8006a78:	200001e8 	.word	0x200001e8

08006a7c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart) {
 8006a7c:	b570      	push	{r4, r5, r6, lr}
 8006a7e:	0004      	movs	r4, r0
	slCanProccesInput(Uart2RxFifo);
 8006a80:	4d09      	ldr	r5, [pc, #36]	; (8006aa8 <HAL_UART_RxCpltCallback+0x2c>)
 8006a82:	7828      	ldrb	r0, [r5, #0]
 8006a84:	f000 fbb2 	bl	80071ec <slCanProccesInput>
	__HAL_UART_FLUSH_DRREGISTER(huart);
 8006a88:	6822      	ldr	r2, [r4, #0]
 8006a8a:	6993      	ldr	r3, [r2, #24]
 8006a8c:	2108      	movs	r1, #8
 8006a8e:	430b      	orrs	r3, r1
 8006a90:	6193      	str	r3, [r2, #24]
 8006a92:	6822      	ldr	r2, [r4, #0]
 8006a94:	6993      	ldr	r3, [r2, #24]
 8006a96:	3108      	adds	r1, #8
 8006a98:	430b      	orrs	r3, r1
 8006a9a:	6193      	str	r3, [r2, #24]
	HAL_UART_Receive_IT(huart, &Uart2RxFifo, UART_RX_FIFO_SIZE);
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	0029      	movs	r1, r5
 8006aa0:	0020      	movs	r0, r4
 8006aa2:	f7fe f801 	bl	8004aa8 <HAL_UART_Receive_IT>
}
 8006aa6:	bd70      	pop	{r4, r5, r6, pc}
 8006aa8:	200001e4 	.word	0x200001e4

08006aac <_Error_Handler>:
  while(1)
 8006aac:	e7fe      	b.n	8006aac <_Error_Handler>
	...

08006ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006ab0:	b500      	push	{lr}
 8006ab2:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ab4:	4b12      	ldr	r3, [pc, #72]	; (8006b00 <HAL_MspInit+0x50>)
 8006ab6:	6999      	ldr	r1, [r3, #24]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	4311      	orrs	r1, r2
 8006abc:	6199      	str	r1, [r3, #24]
 8006abe:	6999      	ldr	r1, [r3, #24]
 8006ac0:	400a      	ands	r2, r1
 8006ac2:	9200      	str	r2, [sp, #0]
 8006ac4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006ac6:	69da      	ldr	r2, [r3, #28]
 8006ac8:	2180      	movs	r1, #128	; 0x80
 8006aca:	0549      	lsls	r1, r1, #21
 8006acc:	430a      	orrs	r2, r1
 8006ace:	61da      	str	r2, [r3, #28]
 8006ad0:	69db      	ldr	r3, [r3, #28]
 8006ad2:	400b      	ands	r3, r1
 8006ad4:	9301      	str	r3, [sp, #4]
 8006ad6:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8006ad8:	2005      	movs	r0, #5
 8006ada:	2200      	movs	r2, #0
 8006adc:	2100      	movs	r1, #0
 8006ade:	4240      	negs	r0, r0
 8006ae0:	f7fa fc94 	bl	800140c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8006ae4:	2002      	movs	r0, #2
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	2100      	movs	r1, #0
 8006aea:	4240      	negs	r0, r0
 8006aec:	f7fa fc8e 	bl	800140c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8006af0:	2001      	movs	r0, #1
 8006af2:	2200      	movs	r2, #0
 8006af4:	2100      	movs	r1, #0
 8006af6:	4240      	negs	r0, r0
 8006af8:	f7fa fc88 	bl	800140c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006afc:	b003      	add	sp, #12
 8006afe:	bd00      	pop	{pc}
 8006b00:	40021000 	.word	0x40021000

08006b04 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8006b04:	b500      	push	{lr}
 8006b06:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcan->Instance==CAN)
 8006b08:	4b0f      	ldr	r3, [pc, #60]	; (8006b48 <HAL_CAN_MspInit+0x44>)
 8006b0a:	6802      	ldr	r2, [r0, #0]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d001      	beq.n	8006b14 <HAL_CAN_MspInit+0x10>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8006b10:	b007      	add	sp, #28
 8006b12:	bd00      	pop	{pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 8006b14:	4a0d      	ldr	r2, [pc, #52]	; (8006b4c <HAL_CAN_MspInit+0x48>)
 8006b16:	69d1      	ldr	r1, [r2, #28]
 8006b18:	2080      	movs	r0, #128	; 0x80
 8006b1a:	0480      	lsls	r0, r0, #18
 8006b1c:	4301      	orrs	r1, r0
 8006b1e:	61d1      	str	r1, [r2, #28]
 8006b20:	69d3      	ldr	r3, [r2, #28]
 8006b22:	4003      	ands	r3, r0
 8006b24:	9300      	str	r3, [sp, #0]
 8006b26:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006b28:	23c0      	movs	r3, #192	; 0xc0
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b2e:	2302      	movs	r3, #2
 8006b30:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b32:	2300      	movs	r3, #0
 8006b34:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006b36:	3303      	adds	r3, #3
 8006b38:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b3e:	a901      	add	r1, sp, #4
 8006b40:	4803      	ldr	r0, [pc, #12]	; (8006b50 <HAL_CAN_MspInit+0x4c>)
 8006b42:	f7fb f875 	bl	8001c30 <HAL_GPIO_Init>
}
 8006b46:	e7e3      	b.n	8006b10 <HAL_CAN_MspInit+0xc>
 8006b48:	40006400 	.word	0x40006400
 8006b4c:	40021000 	.word	0x40021000
 8006b50:	48000400 	.word	0x48000400

08006b54 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006b54:	b500      	push	{lr}
 8006b56:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8006b58:	4b0f      	ldr	r3, [pc, #60]	; (8006b98 <HAL_UART_MspInit+0x44>)
 8006b5a:	6802      	ldr	r2, [r0, #0]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d001      	beq.n	8006b64 <HAL_UART_MspInit+0x10>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006b60:	b007      	add	sp, #28
 8006b62:	bd00      	pop	{pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8006b64:	4a0d      	ldr	r2, [pc, #52]	; (8006b9c <HAL_UART_MspInit+0x48>)
 8006b66:	69d1      	ldr	r1, [r2, #28]
 8006b68:	2080      	movs	r0, #128	; 0x80
 8006b6a:	0280      	lsls	r0, r0, #10
 8006b6c:	4301      	orrs	r1, r0
 8006b6e:	61d1      	str	r1, [r2, #28]
 8006b70:	69d3      	ldr	r3, [r2, #28]
 8006b72:	4003      	ands	r3, r0
 8006b74:	9300      	str	r3, [sp, #0]
 8006b76:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006b78:	230c      	movs	r3, #12
 8006b7a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b7c:	3b0a      	subs	r3, #10
 8006b7e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b80:	2300      	movs	r3, #0
 8006b82:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006b84:	3303      	adds	r3, #3
 8006b86:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8006b88:	3b02      	subs	r3, #2
 8006b8a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b8c:	2090      	movs	r0, #144	; 0x90
 8006b8e:	a901      	add	r1, sp, #4
 8006b90:	05c0      	lsls	r0, r0, #23
 8006b92:	f7fb f84d 	bl	8001c30 <HAL_GPIO_Init>
}
 8006b96:	e7e3      	b.n	8006b60 <HAL_UART_MspInit+0xc>
 8006b98:	40004400 	.word	0x40004400
 8006b9c:	40021000 	.word	0x40021000

08006ba0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006ba0:	4770      	bx	lr

08006ba2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006ba2:	e7fe      	b.n	8006ba2 <HardFault_Handler>

08006ba4 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8006ba4:	4770      	bx	lr

08006ba6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006ba6:	4770      	bx	lr

08006ba8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8006ba8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006baa:	f7f9 fb69 	bl	8000280 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8006bae:	f7fa fc89 	bl	80014c4 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006bb2:	bd10      	pop	{r4, pc}

08006bb4 <USB_IRQHandler>:

/**
* @brief This function handles USB global Interrupt / USB wake-up interrupt through EXTI line 18.
*/
void USB_IRQHandler(void)
{
 8006bb4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8006bb6:	4802      	ldr	r0, [pc, #8]	; (8006bc0 <USB_IRQHandler+0xc>)
 8006bb8:	f7fb fb26 	bl	8002208 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8006bbc:	bd10      	pop	{r4, pc}
 8006bbe:	46c0      	nop			; (mov r8, r8)
 8006bc0:	200005d8 	.word	0x200005d8

08006bc4 <CEC_CAN_IRQHandler>:

/* USER CODE BEGIN 1 */
extern CAN_HandleTypeDef hcan;
void CEC_CAN_IRQHandler(void)
{
 8006bc4:	b510      	push	{r4, lr}
	HAL_CAN_IRQHandler(&hcan);
 8006bc6:	4802      	ldr	r0, [pc, #8]	; (8006bd0 <CEC_CAN_IRQHandler+0xc>)
 8006bc8:	f7fa f80a 	bl	8000be0 <HAL_CAN_IRQHandler>
}
 8006bcc:	bd10      	pop	{r4, pc}
 8006bce:	46c0      	nop			; (mov r8, r8)
 8006bd0:	200001ec 	.word	0x200001ec

08006bd4 <USART2_IRQHandler>:

extern UART_HandleTypeDef huart2;
void USART2_IRQHandler(void)
{
 8006bd4:	b510      	push	{r4, lr}
	UART_HandleTypeDef * huart = &huart2;
//	uint16_t uhMask = huart->Mask;
//	huart->rx = huart->Instance->RDR & (uint8_t)uhMask;
//	HAL_UART_RxCpltCallback(&huart2);
	UART_Receive_IT(huart);
 8006bd6:	4802      	ldr	r0, [pc, #8]	; (8006be0 <USART2_IRQHandler+0xc>)
 8006bd8:	f7fe facc 	bl	8005174 <UART_Receive_IT>

}
 8006bdc:	bd10      	pop	{r4, pc}
 8006bde:	46c0      	nop			; (mov r8, r8)
 8006be0:	20000240 	.word	0x20000240

08006be4 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8006be4:	4b11      	ldr	r3, [pc, #68]	; (8006c2c <SystemInit+0x48>)
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	2101      	movs	r1, #1
 8006bea:	430a      	orrs	r2, r1
 8006bec:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8006bee:	685a      	ldr	r2, [r3, #4]
 8006bf0:	480f      	ldr	r0, [pc, #60]	; (8006c30 <SystemInit+0x4c>)
 8006bf2:	4002      	ands	r2, r0
 8006bf4:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	480e      	ldr	r0, [pc, #56]	; (8006c34 <SystemInit+0x50>)
 8006bfa:	4002      	ands	r2, r0
 8006bfc:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	480d      	ldr	r0, [pc, #52]	; (8006c38 <SystemInit+0x54>)
 8006c02:	4002      	ands	r2, r0
 8006c04:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8006c06:	685a      	ldr	r2, [r3, #4]
 8006c08:	480c      	ldr	r0, [pc, #48]	; (8006c3c <SystemInit+0x58>)
 8006c0a:	4002      	ands	r2, r0
 8006c0c:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8006c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c10:	200f      	movs	r0, #15
 8006c12:	4382      	bics	r2, r0
 8006c14:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
#elif defined (STM32F042x6) || defined (STM32F048xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFE2CU;
 8006c16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c18:	4809      	ldr	r0, [pc, #36]	; (8006c40 <SystemInit+0x5c>)
 8006c1a:	4002      	ands	r2, r0
 8006c1c:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8006c1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c20:	438a      	bics	r2, r1
 8006c22:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8006c24:	2200      	movs	r2, #0
 8006c26:	609a      	str	r2, [r3, #8]

}
 8006c28:	4770      	bx	lr
 8006c2a:	46c0      	nop			; (mov r8, r8)
 8006c2c:	40021000 	.word	0x40021000
 8006c30:	08ffb80c 	.word	0x08ffb80c
 8006c34:	fef6ffff 	.word	0xfef6ffff
 8006c38:	fffbffff 	.word	0xfffbffff
 8006c3c:	ffc0ffff 	.word	0xffc0ffff
 8006c40:	fffffe2c 	.word	0xfffffe2c

08006c44 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006c44:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8006c46:	4c09      	ldr	r4, [pc, #36]	; (8006c6c <MX_USB_DEVICE_Init+0x28>)
 8006c48:	2200      	movs	r2, #0
 8006c4a:	4909      	ldr	r1, [pc, #36]	; (8006c70 <MX_USB_DEVICE_Init+0x2c>)
 8006c4c:	0020      	movs	r0, r4
 8006c4e:	f7fe fd89 	bl	8005764 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 8006c52:	4908      	ldr	r1, [pc, #32]	; (8006c74 <MX_USB_DEVICE_Init+0x30>)
 8006c54:	0020      	movs	r0, r4
 8006c56:	f7fe fdb6 	bl	80057c6 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8006c5a:	4907      	ldr	r1, [pc, #28]	; (8006c78 <MX_USB_DEVICE_Init+0x34>)
 8006c5c:	0020      	movs	r0, r4
 8006c5e:	f7fe fcd7 	bl	8005610 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 8006c62:	0020      	movs	r0, r4
 8006c64:	f7fe fdcf 	bl	8005806 <USBD_Start>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006c68:	bd10      	pop	{r4, pc}
 8006c6a:	46c0      	nop			; (mov r8, r8)
 8006c6c:	200002b4 	.word	0x200002b4
 8006c70:	20000128 	.word	0x20000128
 8006c74:	2000000c 	.word	0x2000000c
 8006c78:	20000118 	.word	0x20000118

08006c7c <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8006c7c:	2000      	movs	r0, #0
 8006c7e:	4770      	bx	lr

08006c80 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006c80:	b570      	push	{r4, r5, r6, lr}
 8006c82:	0005      	movs	r5, r0
 8006c84:	000e      	movs	r6, r1
  /* USER CODE BEGIN 6 */
 uint32_t i;
 for (i =0; i != *Len; i++)
 8006c86:	680b      	ldr	r3, [r1, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d015      	beq.n	8006cb8 <CDC_Receive_FS+0x38>
 8006c8c:	2400      	movs	r4, #0
 8006c8e:	e006      	b.n	8006c9e <CDC_Receive_FS+0x1e>
		 {
			 slCanCheckCommand(command);
		 }
	 } else  /* for open state proceed is done in interrupt */
	 {
		 slCanProccesInput(Buf[i]);
 8006c90:	5d28      	ldrb	r0, [r5, r4]
 8006c92:	f000 faab 	bl	80071ec <slCanProccesInput>
 for (i =0; i != *Len; i++)
 8006c96:	3401      	adds	r4, #1
 8006c98:	6833      	ldr	r3, [r6, #0]
 8006c9a:	42a3      	cmp	r3, r4
 8006c9c:	d00c      	beq.n	8006cb8 <CDC_Receive_FS+0x38>
	 if (slcan_getState() == STATE_CONFIG)  /* for config state proceed multiple commands in interrupt*/
 8006c9e:	f000 fd25 	bl	80076ec <slcan_getState>
 8006ca2:	2800      	cmp	r0, #0
 8006ca4:	d1f4      	bne.n	8006c90 <CDC_Receive_FS+0x10>
		 if (slCanProccesInput(Buf[i]))
 8006ca6:	5d28      	ldrb	r0, [r5, r4]
 8006ca8:	f000 faa0 	bl	80071ec <slCanProccesInput>
 8006cac:	2800      	cmp	r0, #0
 8006cae:	d0f2      	beq.n	8006c96 <CDC_Receive_FS+0x16>
			 slCanCheckCommand(command);
 8006cb0:	4806      	ldr	r0, [pc, #24]	; (8006ccc <CDC_Receive_FS+0x4c>)
 8006cb2:	f000 fabf 	bl	8007234 <slCanCheckCommand>
 8006cb6:	e7ee      	b.n	8006c96 <CDC_Receive_FS+0x16>
	 }
 }

 USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006cb8:	4c05      	ldr	r4, [pc, #20]	; (8006cd0 <CDC_Receive_FS+0x50>)
 8006cba:	0029      	movs	r1, r5
 8006cbc:	0020      	movs	r0, r4
 8006cbe:	f7fe fcde 	bl	800567e <USBD_CDC_SetRxBuffer>
 USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006cc2:	0020      	movs	r0, r4
 8006cc4:	f7fe fd20 	bl	8005708 <USBD_CDC_ReceivePacket>

 return (USBD_OK);
  /* USER CODE END 6 */
}
 8006cc8:	2000      	movs	r0, #0
 8006cca:	bd70      	pop	{r4, r5, r6, pc}
 8006ccc:	20000c18 	.word	0x20000c18
 8006cd0:	200002b4 	.word	0x200002b4

08006cd4 <CDC_Control_FS>:
{
 8006cd4:	b510      	push	{r4, lr}
  switch (cmd)
 8006cd6:	2822      	cmp	r0, #34	; 0x22
 8006cd8:	d001      	beq.n	8006cde <CDC_Control_FS+0xa>
}
 8006cda:	2000      	movs	r0, #0
 8006cdc:	bd10      	pop	{r4, pc}
	  slcanClose();
 8006cde:	f000 fa4b 	bl	8007178 <slcanClose>
    break;
 8006ce2:	e7fa      	b.n	8006cda <CDC_Control_FS+0x6>

08006ce4 <CDC_Init_FS>:
{
 8006ce4:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006ce6:	4c06      	ldr	r4, [pc, #24]	; (8006d00 <CDC_Init_FS+0x1c>)
 8006ce8:	2200      	movs	r2, #0
 8006cea:	4906      	ldr	r1, [pc, #24]	; (8006d04 <CDC_Init_FS+0x20>)
 8006cec:	0020      	movs	r0, r4
 8006cee:	f7fe fcaa 	bl	8005646 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006cf2:	4905      	ldr	r1, [pc, #20]	; (8006d08 <CDC_Init_FS+0x24>)
 8006cf4:	0020      	movs	r0, r4
 8006cf6:	f7fe fcc2 	bl	800567e <USBD_CDC_SetRxBuffer>
}
 8006cfa:	2000      	movs	r0, #0
 8006cfc:	bd10      	pop	{r4, pc}
 8006cfe:	46c0      	nop			; (mov r8, r8)
 8006d00:	200002b4 	.word	0x200002b4
 8006d04:	20000558 	.word	0x20000558
 8006d08:	200004d8 	.word	0x200004d8

08006d0c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006d0c:	b510      	push	{r4, lr}
 8006d0e:	0003      	movs	r3, r0
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006d10:	4c09      	ldr	r4, [pc, #36]	; (8006d38 <CDC_Transmit_FS+0x2c>)
 8006d12:	2086      	movs	r0, #134	; 0x86
 8006d14:	0080      	lsls	r0, r0, #2
 8006d16:	5824      	ldr	r4, [r4, r0]
  if (hcdc->TxState != 0){
 8006d18:	3804      	subs	r0, #4
 8006d1a:	5824      	ldr	r4, [r4, r0]
    return USBD_BUSY;
 8006d1c:	2001      	movs	r0, #1
  if (hcdc->TxState != 0){
 8006d1e:	2c00      	cmp	r4, #0
 8006d20:	d000      	beq.n	8006d24 <CDC_Transmit_FS+0x18>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 8006d22:	bd10      	pop	{r4, pc}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006d24:	4c04      	ldr	r4, [pc, #16]	; (8006d38 <CDC_Transmit_FS+0x2c>)
 8006d26:	000a      	movs	r2, r1
 8006d28:	0019      	movs	r1, r3
 8006d2a:	0020      	movs	r0, r4
 8006d2c:	f7fe fc8b 	bl	8005646 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006d30:	0020      	movs	r0, r4
 8006d32:	f7fe fcb8 	bl	80056a6 <USBD_CDC_TransmitPacket>
  return result;
 8006d36:	e7f4      	b.n	8006d22 <CDC_Transmit_FS+0x16>
 8006d38:	200002b4 	.word	0x200002b4

08006d3c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006d3c:	b500      	push	{lr}
 8006d3e:	b083      	sub	sp, #12
  if(pcdHandle->Instance==USB)
 8006d40:	4b0c      	ldr	r3, [pc, #48]	; (8006d74 <HAL_PCD_MspInit+0x38>)
 8006d42:	6802      	ldr	r2, [r0, #0]
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d001      	beq.n	8006d4c <HAL_PCD_MspInit+0x10>
    HAL_NVIC_EnableIRQ(USB_IRQn);
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006d48:	b003      	add	sp, #12
 8006d4a:	bd00      	pop	{pc}
    __HAL_RCC_USB_CLK_ENABLE();
 8006d4c:	4a0a      	ldr	r2, [pc, #40]	; (8006d78 <HAL_PCD_MspInit+0x3c>)
 8006d4e:	69d1      	ldr	r1, [r2, #28]
 8006d50:	2080      	movs	r0, #128	; 0x80
 8006d52:	0400      	lsls	r0, r0, #16
 8006d54:	4301      	orrs	r1, r0
 8006d56:	61d1      	str	r1, [r2, #28]
 8006d58:	69d3      	ldr	r3, [r2, #28]
 8006d5a:	4003      	ands	r3, r0
 8006d5c:	9301      	str	r3, [sp, #4]
 8006d5e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8006d60:	2200      	movs	r2, #0
 8006d62:	2100      	movs	r1, #0
 8006d64:	201f      	movs	r0, #31
 8006d66:	f7fa fb51 	bl	800140c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8006d6a:	201f      	movs	r0, #31
 8006d6c:	f7fa fb63 	bl	8001436 <HAL_NVIC_EnableIRQ>
}
 8006d70:	e7ea      	b.n	8006d48 <HAL_PCD_MspInit+0xc>
 8006d72:	46c0      	nop			; (mov r8, r8)
 8006d74:	40005c00 	.word	0x40005c00
 8006d78:	40021000 	.word	0x40021000

08006d7c <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8006d7c:	b510      	push	{r4, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006d7e:	0001      	movs	r1, r0
 8006d80:	31ed      	adds	r1, #237	; 0xed
 8006d82:	31ff      	adds	r1, #255	; 0xff
 8006d84:	2387      	movs	r3, #135	; 0x87
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	58c0      	ldr	r0, [r0, r3]
 8006d8a:	f7fe fd8f 	bl	80058ac <USBD_LL_SetupStage>
}
 8006d8e:	bd10      	pop	{r4, pc}

08006d90 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8006d90:	b510      	push	{r4, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006d92:	00cb      	lsls	r3, r1, #3
 8006d94:	1a5b      	subs	r3, r3, r1
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	18c3      	adds	r3, r0, r3
 8006d9a:	3319      	adds	r3, #25
 8006d9c:	33ff      	adds	r3, #255	; 0xff
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	2387      	movs	r3, #135	; 0x87
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	58c0      	ldr	r0, [r0, r3]
 8006da6:	f7fe fddf 	bl	8005968 <USBD_LL_DataOutStage>
}
 8006daa:	bd10      	pop	{r4, pc}

08006dac <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8006dac:	b510      	push	{r4, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006dae:	00cb      	lsls	r3, r1, #3
 8006db0:	1a5b      	subs	r3, r3, r1
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	18c3      	adds	r3, r0, r3
 8006db6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006db8:	2387      	movs	r3, #135	; 0x87
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	58c0      	ldr	r0, [r0, r3]
 8006dbe:	f7fe fe3c 	bl	8005a3a <USBD_LL_DataInStage>
}
 8006dc2:	bd10      	pop	{r4, pc}

08006dc4 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8006dc4:	b510      	push	{r4, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006dc6:	2387      	movs	r3, #135	; 0x87
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	58c0      	ldr	r0, [r0, r3]
 8006dcc:	f7fe ff42 	bl	8005c54 <USBD_LL_SOF>
}
 8006dd0:	bd10      	pop	{r4, pc}

08006dd2 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8006dd2:	b570      	push	{r4, r5, r6, lr}
 8006dd4:	0004      	movs	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006dd6:	2587      	movs	r5, #135	; 0x87
 8006dd8:	00ad      	lsls	r5, r5, #2
 8006dda:	2101      	movs	r1, #1
 8006ddc:	5940      	ldr	r0, [r0, r5]
 8006dde:	f7fe ff02 	bl	8005be6 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006de2:	5960      	ldr	r0, [r4, r5]
 8006de4:	f7fe fecc 	bl	8005b80 <USBD_LL_Reset>
}
 8006de8:	bd70      	pop	{r4, r5, r6, pc}
	...

08006dec <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8006dec:	b510      	push	{r4, lr}
 8006dee:	0004      	movs	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006df0:	2387      	movs	r3, #135	; 0x87
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	58c0      	ldr	r0, [r0, r3]
 8006df6:	f7fe ff06 	bl	8005c06 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006dfa:	69a3      	ldr	r3, [r4, #24]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d004      	beq.n	8006e0a <HAL_PCD_SuspendCallback+0x1e>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006e00:	4a02      	ldr	r2, [pc, #8]	; (8006e0c <HAL_PCD_SuspendCallback+0x20>)
 8006e02:	6913      	ldr	r3, [r2, #16]
 8006e04:	2106      	movs	r1, #6
 8006e06:	430b      	orrs	r3, r1
 8006e08:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006e0a:	bd10      	pop	{r4, pc}
 8006e0c:	e000ed00 	.word	0xe000ed00

08006e10 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8006e10:	b510      	push	{r4, lr}
 8006e12:	0004      	movs	r4, r0
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8006e14:	6983      	ldr	r3, [r0, #24]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d105      	bne.n	8006e26 <HAL_PCD_ResumeCallback+0x16>
    /* Reset SLEEPDEEP bit of Cortex System Control Register */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));   
    SystemClockConfig_Resume(); 
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006e1a:	2387      	movs	r3, #135	; 0x87
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	58e0      	ldr	r0, [r4, r3]
 8006e20:	f7fe ff07 	bl	8005c32 <USBD_LL_Resume>
}
 8006e24:	bd10      	pop	{r4, pc}
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));   
 8006e26:	4a04      	ldr	r2, [pc, #16]	; (8006e38 <HAL_PCD_ResumeCallback+0x28>)
 8006e28:	6913      	ldr	r3, [r2, #16]
 8006e2a:	2106      	movs	r1, #6
 8006e2c:	438b      	bics	r3, r1
 8006e2e:	6113      	str	r3, [r2, #16]
  * @param  None
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 8006e30:	f7ff fd03 	bl	800683a <SystemClock_Config>
}
 8006e34:	e7f1      	b.n	8006e1a <HAL_PCD_ResumeCallback+0xa>
 8006e36:	46c0      	nop			; (mov r8, r8)
 8006e38:	e000ed00 	.word	0xe000ed00

08006e3c <USBD_LL_Init>:
{
 8006e3c:	b570      	push	{r4, r5, r6, lr}
 8006e3e:	0004      	movs	r4, r0
  hpcd_USB_FS.pData = pdev;
 8006e40:	481f      	ldr	r0, [pc, #124]	; (8006ec0 <USBD_LL_Init+0x84>)
 8006e42:	2387      	movs	r3, #135	; 0x87
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	50c4      	str	r4, [r0, r3]
  pdev->pData = &hpcd_USB_FS;
 8006e48:	3304      	adds	r3, #4
 8006e4a:	50e0      	str	r0, [r4, r3]
  hpcd_USB_FS.Instance = USB;
 8006e4c:	4b1d      	ldr	r3, [pc, #116]	; (8006ec4 <USBD_LL_Init+0x88>)
 8006e4e:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006e50:	2308      	movs	r3, #8
 8006e52:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006e54:	2202      	movs	r2, #2
 8006e56:	6082      	str	r2, [r0, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	60c3      	str	r3, [r0, #12]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006e5c:	6102      	str	r2, [r0, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006e5e:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006e60:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006e62:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006e64:	f7fb f8c8 	bl	8001ff8 <HAL_PCD_Init>
 8006e68:	2800      	cmp	r0, #0
 8006e6a:	d123      	bne.n	8006eb4 <USBD_LL_Init+0x78>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006e6c:	2588      	movs	r5, #136	; 0x88
 8006e6e:	00ad      	lsls	r5, r5, #2
 8006e70:	2318      	movs	r3, #24
 8006e72:	2200      	movs	r2, #0
 8006e74:	2100      	movs	r1, #0
 8006e76:	5960      	ldr	r0, [r4, r5]
 8006e78:	f7fd f944 	bl	8004104 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006e7c:	2358      	movs	r3, #88	; 0x58
 8006e7e:	2200      	movs	r2, #0
 8006e80:	2180      	movs	r1, #128	; 0x80
 8006e82:	5960      	ldr	r0, [r4, r5]
 8006e84:	f7fd f93e 	bl	8004104 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006e88:	23c0      	movs	r3, #192	; 0xc0
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	2181      	movs	r1, #129	; 0x81
 8006e8e:	5960      	ldr	r0, [r4, r5]
 8006e90:	f7fd f938 	bl	8004104 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006e94:	2388      	movs	r3, #136	; 0x88
 8006e96:	005b      	lsls	r3, r3, #1
 8006e98:	2200      	movs	r2, #0
 8006e9a:	2101      	movs	r1, #1
 8006e9c:	5960      	ldr	r0, [r4, r5]
 8006e9e:	f7fd f931 	bl	8004104 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006ea2:	2380      	movs	r3, #128	; 0x80
 8006ea4:	5960      	ldr	r0, [r4, r5]
 8006ea6:	005b      	lsls	r3, r3, #1
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	2182      	movs	r1, #130	; 0x82
 8006eac:	f7fd f92a 	bl	8004104 <HAL_PCDEx_PMAConfig>
}
 8006eb0:	2000      	movs	r0, #0
 8006eb2:	bd70      	pop	{r4, r5, r6, pc}
    _Error_Handler(__FILE__, __LINE__);
 8006eb4:	219a      	movs	r1, #154	; 0x9a
 8006eb6:	0049      	lsls	r1, r1, #1
 8006eb8:	4803      	ldr	r0, [pc, #12]	; (8006ec8 <USBD_LL_Init+0x8c>)
 8006eba:	f7ff fdf7 	bl	8006aac <_Error_Handler>
 8006ebe:	e7d5      	b.n	8006e6c <USBD_LL_Init+0x30>
 8006ec0:	200005d8 	.word	0x200005d8
 8006ec4:	40005c00 	.word	0x40005c00
 8006ec8:	08007af4 	.word	0x08007af4

08006ecc <USBD_LL_Start>:
{
 8006ecc:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8006ece:	2388      	movs	r3, #136	; 0x88
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	58c0      	ldr	r0, [r0, r3]
 8006ed4:	f7fb f980 	bl	80021d8 <HAL_PCD_Start>
  switch (hal_status) {
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	d003      	beq.n	8006ee4 <USBD_LL_Start+0x18>
      usb_status = USBD_BUSY;
 8006edc:	3802      	subs	r0, #2
 8006ede:	1e43      	subs	r3, r0, #1
 8006ee0:	4198      	sbcs	r0, r3
 8006ee2:	3001      	adds	r0, #1
}
 8006ee4:	bd10      	pop	{r4, pc}

08006ee6 <USBD_LL_OpenEP>:
{
 8006ee6:	b510      	push	{r4, lr}
 8006ee8:	0014      	movs	r4, r2
 8006eea:	001a      	movs	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006eec:	2388      	movs	r3, #136	; 0x88
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	58c0      	ldr	r0, [r0, r3]
 8006ef2:	0023      	movs	r3, r4
 8006ef4:	f7fb fade 	bl	80024b4 <HAL_PCD_EP_Open>
  switch (hal_status) {
 8006ef8:	2800      	cmp	r0, #0
 8006efa:	d003      	beq.n	8006f04 <USBD_LL_OpenEP+0x1e>
      usb_status = USBD_BUSY;
 8006efc:	3802      	subs	r0, #2
 8006efe:	1e43      	subs	r3, r0, #1
 8006f00:	4198      	sbcs	r0, r3
 8006f02:	3001      	adds	r0, #1
}
 8006f04:	bd10      	pop	{r4, pc}

08006f06 <USBD_LL_CloseEP>:
{
 8006f06:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006f08:	2388      	movs	r3, #136	; 0x88
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	58c0      	ldr	r0, [r0, r3]
 8006f0e:	f7fb fe4d 	bl	8002bac <HAL_PCD_EP_Close>
  switch (hal_status) {
 8006f12:	2800      	cmp	r0, #0
 8006f14:	d003      	beq.n	8006f1e <USBD_LL_CloseEP+0x18>
      usb_status = USBD_BUSY;
 8006f16:	3802      	subs	r0, #2
 8006f18:	1e43      	subs	r3, r0, #1
 8006f1a:	4198      	sbcs	r0, r3
 8006f1c:	3001      	adds	r0, #1
}
 8006f1e:	bd10      	pop	{r4, pc}

08006f20 <USBD_LL_StallEP>:
{
 8006f20:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006f22:	2388      	movs	r3, #136	; 0x88
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	58c0      	ldr	r0, [r0, r3]
 8006f28:	f7fc fb6a 	bl	8003600 <HAL_PCD_EP_SetStall>
  switch (hal_status) {
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	d003      	beq.n	8006f38 <USBD_LL_StallEP+0x18>
      usb_status = USBD_BUSY;
 8006f30:	3802      	subs	r0, #2
 8006f32:	1e43      	subs	r3, r0, #1
 8006f34:	4198      	sbcs	r0, r3
 8006f36:	3001      	adds	r0, #1
}
 8006f38:	bd10      	pop	{r4, pc}

08006f3a <USBD_LL_ClearStallEP>:
{
 8006f3a:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8006f3c:	2388      	movs	r3, #136	; 0x88
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	58c0      	ldr	r0, [r0, r3]
 8006f42:	f7fc fc0f 	bl	8003764 <HAL_PCD_EP_ClrStall>
  switch (hal_status) {
 8006f46:	2800      	cmp	r0, #0
 8006f48:	d003      	beq.n	8006f52 <USBD_LL_ClearStallEP+0x18>
      usb_status = USBD_BUSY;
 8006f4a:	3802      	subs	r0, #2
 8006f4c:	1e43      	subs	r3, r0, #1
 8006f4e:	4198      	sbcs	r0, r3
 8006f50:	3001      	adds	r0, #1
}
 8006f52:	bd10      	pop	{r4, pc}

08006f54 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006f54:	2388      	movs	r3, #136	; 0x88
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	58c3      	ldr	r3, [r0, r3]
  if((ep_addr & 0x80) == 0x80)
 8006f5a:	b24a      	sxtb	r2, r1
 8006f5c:	2a00      	cmp	r2, #0
 8006f5e:	db09      	blt.n	8006f74 <USBD_LL_IsStallEP+0x20>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006f60:	227f      	movs	r2, #127	; 0x7f
 8006f62:	4011      	ands	r1, r2
 8006f64:	00ca      	lsls	r2, r1, #3
 8006f66:	1a51      	subs	r1, r2, r1
 8006f68:	0089      	lsls	r1, r1, #2
 8006f6a:	185b      	adds	r3, r3, r1
 8006f6c:	330b      	adds	r3, #11
 8006f6e:	33ff      	adds	r3, #255	; 0xff
 8006f70:	7818      	ldrb	r0, [r3, #0]
}
 8006f72:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006f74:	227f      	movs	r2, #127	; 0x7f
 8006f76:	4011      	ands	r1, r2
 8006f78:	00ca      	lsls	r2, r1, #3
 8006f7a:	1a51      	subs	r1, r2, r1
 8006f7c:	0089      	lsls	r1, r1, #2
 8006f7e:	185b      	adds	r3, r3, r1
 8006f80:	332a      	adds	r3, #42	; 0x2a
 8006f82:	7818      	ldrb	r0, [r3, #0]
 8006f84:	e7f5      	b.n	8006f72 <USBD_LL_IsStallEP+0x1e>

08006f86 <USBD_LL_SetUSBAddress>:
{
 8006f86:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006f88:	2388      	movs	r3, #136	; 0x88
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	58c0      	ldr	r0, [r0, r3]
 8006f8e:	f7fb fa63 	bl	8002458 <HAL_PCD_SetAddress>
  switch (hal_status) {
 8006f92:	2800      	cmp	r0, #0
 8006f94:	d003      	beq.n	8006f9e <USBD_LL_SetUSBAddress+0x18>
      usb_status = USBD_BUSY;
 8006f96:	3802      	subs	r0, #2
 8006f98:	1e43      	subs	r3, r0, #1
 8006f9a:	4198      	sbcs	r0, r3
 8006f9c:	3001      	adds	r0, #1
}
 8006f9e:	bd10      	pop	{r4, pc}

08006fa0 <USBD_LL_Transmit>:
{
 8006fa0:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006fa2:	2488      	movs	r4, #136	; 0x88
 8006fa4:	00a4      	lsls	r4, r4, #2
 8006fa6:	5900      	ldr	r0, [r0, r4]
 8006fa8:	f7fc f97a 	bl	80032a0 <HAL_PCD_EP_Transmit>
  switch (hal_status) {
 8006fac:	2800      	cmp	r0, #0
 8006fae:	d003      	beq.n	8006fb8 <USBD_LL_Transmit+0x18>
      usb_status = USBD_BUSY;
 8006fb0:	3802      	subs	r0, #2
 8006fb2:	1e43      	subs	r3, r0, #1
 8006fb4:	4198      	sbcs	r0, r3
 8006fb6:	3001      	adds	r0, #1
}
 8006fb8:	bd10      	pop	{r4, pc}

08006fba <USBD_LL_PrepareReceive>:
{
 8006fba:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006fbc:	2488      	movs	r4, #136	; 0x88
 8006fbe:	00a4      	lsls	r4, r4, #2
 8006fc0:	5900      	ldr	r0, [r0, r4]
 8006fc2:	f7fb ffdd 	bl	8002f80 <HAL_PCD_EP_Receive>
  switch (hal_status) {
 8006fc6:	2800      	cmp	r0, #0
 8006fc8:	d003      	beq.n	8006fd2 <USBD_LL_PrepareReceive+0x18>
      usb_status = USBD_BUSY;
 8006fca:	3802      	subs	r0, #2
 8006fcc:	1e43      	subs	r3, r0, #1
 8006fce:	4198      	sbcs	r0, r3
 8006fd0:	3001      	adds	r0, #1
}
 8006fd2:	bd10      	pop	{r4, pc}

08006fd4 <USBD_LL_GetRxDataSize>:
{
 8006fd4:	b510      	push	{r4, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006fd6:	2388      	movs	r3, #136	; 0x88
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	58c0      	ldr	r0, [r0, r3]
 8006fdc:	f7fc f946 	bl	800326c <HAL_PCD_EP_GetRxCount>
}
 8006fe0:	bd10      	pop	{r4, pc}
	...

08006fe4 <USBD_static_malloc>:
}
 8006fe4:	4800      	ldr	r0, [pc, #0]	; (8006fe8 <USBD_static_malloc+0x4>)
 8006fe6:	4770      	bx	lr
 8006fe8:	200007f8 	.word	0x200007f8

08006fec <USBD_static_free>:
}
 8006fec:	4770      	bx	lr
	...

08006ff0 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8006ff0:	2312      	movs	r3, #18
 8006ff2:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8006ff4:	4800      	ldr	r0, [pc, #0]	; (8006ff8 <USBD_FS_DeviceDescriptor+0x8>)
 8006ff6:	4770      	bx	lr
 8006ff8:	20000144 	.word	0x20000144

08006ffc <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8006ffc:	2304      	movs	r3, #4
 8006ffe:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8007000:	4800      	ldr	r0, [pc, #0]	; (8007004 <USBD_FS_LangIDStrDescriptor+0x8>)
 8007002:	4770      	bx	lr
 8007004:	20000158 	.word	0x20000158

08007008 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007008:	b510      	push	{r4, lr}
 800700a:	000a      	movs	r2, r1
  if(speed == 0)
 800700c:	2800      	cmp	r0, #0
 800700e:	d105      	bne.n	800701c <USBD_FS_ProductStrDescriptor+0x14>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007010:	4905      	ldr	r1, [pc, #20]	; (8007028 <USBD_FS_ProductStrDescriptor+0x20>)
 8007012:	4806      	ldr	r0, [pc, #24]	; (800702c <USBD_FS_ProductStrDescriptor+0x24>)
 8007014:	f7ff fad5 	bl	80065c2 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8007018:	4803      	ldr	r0, [pc, #12]	; (8007028 <USBD_FS_ProductStrDescriptor+0x20>)
 800701a:	bd10      	pop	{r4, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800701c:	4902      	ldr	r1, [pc, #8]	; (8007028 <USBD_FS_ProductStrDescriptor+0x20>)
 800701e:	4803      	ldr	r0, [pc, #12]	; (800702c <USBD_FS_ProductStrDescriptor+0x24>)
 8007020:	f7ff facf 	bl	80065c2 <USBD_GetString>
 8007024:	e7f8      	b.n	8007018 <USBD_FS_ProductStrDescriptor+0x10>
 8007026:	46c0      	nop			; (mov r8, r8)
 8007028:	20000a18 	.word	0x20000a18
 800702c:	08007b08 	.word	0x08007b08

08007030 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007030:	b510      	push	{r4, lr}
 8007032:	000a      	movs	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007034:	4c03      	ldr	r4, [pc, #12]	; (8007044 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8007036:	0021      	movs	r1, r4
 8007038:	4803      	ldr	r0, [pc, #12]	; (8007048 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800703a:	f7ff fac2 	bl	80065c2 <USBD_GetString>
  return USBD_StrDesc;
}
 800703e:	0020      	movs	r0, r4
 8007040:	bd10      	pop	{r4, pc}
 8007042:	46c0      	nop			; (mov r8, r8)
 8007044:	20000a18 	.word	0x20000a18
 8007048:	08007b20 	.word	0x08007b20

0800704c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800704c:	b510      	push	{r4, lr}
 800704e:	000a      	movs	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8007050:	2800      	cmp	r0, #0
 8007052:	d105      	bne.n	8007060 <USBD_FS_SerialStrDescriptor+0x14>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8007054:	4905      	ldr	r1, [pc, #20]	; (800706c <USBD_FS_SerialStrDescriptor+0x20>)
 8007056:	4806      	ldr	r0, [pc, #24]	; (8007070 <USBD_FS_SerialStrDescriptor+0x24>)
 8007058:	f7ff fab3 	bl	80065c2 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800705c:	4803      	ldr	r0, [pc, #12]	; (800706c <USBD_FS_SerialStrDescriptor+0x20>)
 800705e:	bd10      	pop	{r4, pc}
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8007060:	4902      	ldr	r1, [pc, #8]	; (800706c <USBD_FS_SerialStrDescriptor+0x20>)
 8007062:	4803      	ldr	r0, [pc, #12]	; (8007070 <USBD_FS_SerialStrDescriptor+0x24>)
 8007064:	f7ff faad 	bl	80065c2 <USBD_GetString>
 8007068:	e7f8      	b.n	800705c <USBD_FS_SerialStrDescriptor+0x10>
 800706a:	46c0      	nop			; (mov r8, r8)
 800706c:	20000a18 	.word	0x20000a18
 8007070:	08007b2c 	.word	0x08007b2c

08007074 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007074:	b510      	push	{r4, lr}
 8007076:	000a      	movs	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8007078:	2800      	cmp	r0, #0
 800707a:	d105      	bne.n	8007088 <USBD_FS_ConfigStrDescriptor+0x14>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800707c:	4905      	ldr	r1, [pc, #20]	; (8007094 <USBD_FS_ConfigStrDescriptor+0x20>)
 800707e:	4806      	ldr	r0, [pc, #24]	; (8007098 <USBD_FS_ConfigStrDescriptor+0x24>)
 8007080:	f7ff fa9f 	bl	80065c2 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8007084:	4803      	ldr	r0, [pc, #12]	; (8007094 <USBD_FS_ConfigStrDescriptor+0x20>)
 8007086:	bd10      	pop	{r4, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007088:	4902      	ldr	r1, [pc, #8]	; (8007094 <USBD_FS_ConfigStrDescriptor+0x20>)
 800708a:	4803      	ldr	r0, [pc, #12]	; (8007098 <USBD_FS_ConfigStrDescriptor+0x24>)
 800708c:	f7ff fa99 	bl	80065c2 <USBD_GetString>
 8007090:	e7f8      	b.n	8007084 <USBD_FS_ConfigStrDescriptor+0x10>
 8007092:	46c0      	nop			; (mov r8, r8)
 8007094:	20000a18 	.word	0x20000a18
 8007098:	08007b3c 	.word	0x08007b3c

0800709c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800709c:	b510      	push	{r4, lr}
 800709e:	000a      	movs	r2, r1
  if(speed == 0)
 80070a0:	2800      	cmp	r0, #0
 80070a2:	d105      	bne.n	80070b0 <USBD_FS_InterfaceStrDescriptor+0x14>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80070a4:	4905      	ldr	r1, [pc, #20]	; (80070bc <USBD_FS_InterfaceStrDescriptor+0x20>)
 80070a6:	4806      	ldr	r0, [pc, #24]	; (80070c0 <USBD_FS_InterfaceStrDescriptor+0x24>)
 80070a8:	f7ff fa8b 	bl	80065c2 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 80070ac:	4803      	ldr	r0, [pc, #12]	; (80070bc <USBD_FS_InterfaceStrDescriptor+0x20>)
 80070ae:	bd10      	pop	{r4, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80070b0:	4902      	ldr	r1, [pc, #8]	; (80070bc <USBD_FS_InterfaceStrDescriptor+0x20>)
 80070b2:	4803      	ldr	r0, [pc, #12]	; (80070c0 <USBD_FS_InterfaceStrDescriptor+0x24>)
 80070b4:	f7ff fa85 	bl	80065c2 <USBD_GetString>
 80070b8:	e7f8      	b.n	80070ac <USBD_FS_InterfaceStrDescriptor+0x10>
 80070ba:	46c0      	nop			; (mov r8, r8)
 80070bc:	20000a18 	.word	0x20000a18
 80070c0:	08007b48 	.word	0x08007b48

080070c4 <slcanSetOutputChar>:
  * @param  c - data to add
  * @retval None
  */
static void slcanSetOutputChar(uint8_t c)
{
	if (sl_frame_len < sizeof(sl_frame))
 80070c4:	4b07      	ldr	r3, [pc, #28]	; (80070e4 <slcanSetOutputChar+0x20>)
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b1f      	cmp	r3, #31
 80070cc:	d808      	bhi.n	80070e0 <slcanSetOutputChar+0x1c>
	{
		sl_frame[sl_frame_len] = c;
 80070ce:	4a05      	ldr	r2, [pc, #20]	; (80070e4 <slcanSetOutputChar+0x20>)
 80070d0:	7813      	ldrb	r3, [r2, #0]
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	4904      	ldr	r1, [pc, #16]	; (80070e8 <slcanSetOutputChar+0x24>)
 80070d6:	54c8      	strb	r0, [r1, r3]
		sl_frame_len ++;
 80070d8:	7813      	ldrb	r3, [r2, #0]
 80070da:	3301      	adds	r3, #1
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	7013      	strb	r3, [r2, #0]
	}
}
 80070e0:	4770      	bx	lr
 80070e2:	46c0      	nop			; (mov r8, r8)
 80070e4:	20000d04 	.word	0x20000d04
 80070e8:	20000ce4 	.word	0x20000ce4

080070ec <slCanSendNibble>:
  * @brief  Add given nible value as hexadecimal string to bufferr
  * @param  c - data to add
  * @retval None
  */
static void slCanSendNibble(uint8_t ch)
{
 80070ec:	b510      	push	{r4, lr}
	ch = ch > 9 ? ch - 10 + 'A' : ch + '0';
 80070ee:	2809      	cmp	r0, #9
 80070f0:	d904      	bls.n	80070fc <slCanSendNibble+0x10>
 80070f2:	3037      	adds	r0, #55	; 0x37
 80070f4:	b2c0      	uxtb	r0, r0
	slcanSetOutputChar(ch);
 80070f6:	f7ff ffe5 	bl	80070c4 <slcanSetOutputChar>
}
 80070fa:	bd10      	pop	{r4, pc}
	ch = ch > 9 ? ch - 10 + 'A' : ch + '0';
 80070fc:	3030      	adds	r0, #48	; 0x30
 80070fe:	b2c0      	uxtb	r0, r0
 8007100:	e7f9      	b.n	80070f6 <slCanSendNibble+0xa>

08007102 <slcanSetOutputAsHex>:
/**
  * @brief  Add given byte value as hexadecimal string to buffer
  * @param  value - data to add
  * @retval None
  */
static void slcanSetOutputAsHex(uint8_t ch) {
 8007102:	b510      	push	{r4, lr}
 8007104:	0004      	movs	r4, r0
	slCanSendNibble(ch >> 4);
 8007106:	0900      	lsrs	r0, r0, #4
 8007108:	f7ff fff0 	bl	80070ec <slCanSendNibble>
	slCanSendNibble(ch & 0x0F);
 800710c:	200f      	movs	r0, #15
 800710e:	4020      	ands	r0, r4
 8007110:	f7ff ffec 	bl	80070ec <slCanSendNibble>
}
 8007114:	bd10      	pop	{r4, pc}

08007116 <parseHex>:
  * @param  canmsg - line Input string
  * 		len    - of characters to interpret
  * 		value  - Pointer to variable for the resulting decoded value
  * @retval 0 on error, 1 on success
  */
static uint8_t parseHex(uint8_t* line, uint8_t len, uint32_t* value) {
 8007116:	b530      	push	{r4, r5, lr}
    *value = 0;
 8007118:	2300      	movs	r3, #0
 800711a:	6013      	str	r3, [r2, #0]
    while (len--) {
 800711c:	2900      	cmp	r1, #0
 800711e:	d027      	beq.n	8007170 <parseHex+0x5a>
 8007120:	0004      	movs	r4, r0
 8007122:	1840      	adds	r0, r0, r1
 8007124:	b2c5      	uxtb	r5, r0
 8007126:	e00a      	b.n	800713e <parseHex+0x28>
        if (*line == 0) return 0;
        *value <<= 4;
        if ((*line >= '0') && (*line <= '9')) {
           *value += *line - '0';
        } else if ((*line >= 'A') && (*line <= 'F')) {
 8007128:	0008      	movs	r0, r1
 800712a:	3841      	subs	r0, #65	; 0x41
 800712c:	2805      	cmp	r0, #5
 800712e:	d815      	bhi.n	800715c <parseHex+0x46>
           *value += *line - 'A' + 10;
 8007130:	3b37      	subs	r3, #55	; 0x37
 8007132:	185b      	adds	r3, r3, r1
 8007134:	6013      	str	r3, [r2, #0]
        } else if ((*line >= 'a') && (*line <= 'f')) {
           *value += *line - 'a' + 10;
        } else return 0;
        line++;
 8007136:	3401      	adds	r4, #1
    while (len--) {
 8007138:	b2e3      	uxtb	r3, r4
 800713a:	429d      	cmp	r5, r3
 800713c:	d016      	beq.n	800716c <parseHex+0x56>
        if (*line == 0) return 0;
 800713e:	7820      	ldrb	r0, [r4, #0]
 8007140:	2800      	cmp	r0, #0
 8007142:	d014      	beq.n	800716e <parseHex+0x58>
        *value <<= 4;
 8007144:	6813      	ldr	r3, [r2, #0]
 8007146:	011b      	lsls	r3, r3, #4
 8007148:	6013      	str	r3, [r2, #0]
        if ((*line >= '0') && (*line <= '9')) {
 800714a:	7821      	ldrb	r1, [r4, #0]
 800714c:	0008      	movs	r0, r1
 800714e:	3830      	subs	r0, #48	; 0x30
 8007150:	2809      	cmp	r0, #9
 8007152:	d8e9      	bhi.n	8007128 <parseHex+0x12>
           *value += *line - '0';
 8007154:	3b30      	subs	r3, #48	; 0x30
 8007156:	185b      	adds	r3, r3, r1
 8007158:	6013      	str	r3, [r2, #0]
 800715a:	e7ec      	b.n	8007136 <parseHex+0x20>
        } else if ((*line >= 'a') && (*line <= 'f')) {
 800715c:	0008      	movs	r0, r1
 800715e:	3861      	subs	r0, #97	; 0x61
 8007160:	2805      	cmp	r0, #5
 8007162:	d807      	bhi.n	8007174 <parseHex+0x5e>
           *value += *line - 'a' + 10;
 8007164:	3b57      	subs	r3, #87	; 0x57
 8007166:	185b      	adds	r3, r3, r1
 8007168:	6013      	str	r3, [r2, #0]
 800716a:	e7e4      	b.n	8007136 <parseHex+0x20>
    }
    return 1;
 800716c:	2001      	movs	r0, #1
}
 800716e:	bd30      	pop	{r4, r5, pc}
    return 1;
 8007170:	2001      	movs	r0, #1
 8007172:	e7fc      	b.n	800716e <parseHex+0x58>
        } else return 0;
 8007174:	2000      	movs	r0, #0
 8007176:	e7fa      	b.n	800716e <parseHex+0x58>

08007178 <slcanClose>:
{
 8007178:	b510      	push	{r4, lr}
	HAL_NVIC_DisableIRQ(CEC_CAN_IRQn);
 800717a:	201e      	movs	r0, #30
 800717c:	f7fa f96b 	bl	8001456 <HAL_NVIC_DisableIRQ>
	state = STATE_CONFIG;
 8007180:	4b01      	ldr	r3, [pc, #4]	; (8007188 <slcanClose+0x10>)
 8007182:	2200      	movs	r2, #0
 8007184:	701a      	strb	r2, [r3, #0]
}
 8007186:	bd10      	pop	{r4, pc}
 8007188:	20000d05 	.word	0x20000d05

0800718c <slcanOutputFlush>:
{
 800718c:	b570      	push	{r4, r5, r6, lr}
	if (sl_frame_len > 0)
 800718e:	4b13      	ldr	r3, [pc, #76]	; (80071dc <slcanOutputFlush+0x50>)
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d019      	beq.n	80071ca <slcanOutputFlush+0x3e>
		if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED) // use auxiliary uart only if usb not connected
 8007196:	4a12      	ldr	r2, [pc, #72]	; (80071e0 <slcanOutputFlush+0x54>)
 8007198:	23fe      	movs	r3, #254	; 0xfe
 800719a:	005b      	lsls	r3, r3, #1
 800719c:	5cd3      	ldrb	r3, [r2, r3]
 800719e:	2b03      	cmp	r3, #3
 80071a0:	d114      	bne.n	80071cc <slcanOutputFlush+0x40>
			while (((USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData)->TxState){;} //should change by hardware
 80071a2:	4a0f      	ldr	r2, [pc, #60]	; (80071e0 <slcanOutputFlush+0x54>)
 80071a4:	2386      	movs	r3, #134	; 0x86
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	58d1      	ldr	r1, [r2, r3]
 80071aa:	2285      	movs	r2, #133	; 0x85
 80071ac:	0092      	lsls	r2, r2, #2
 80071ae:	588b      	ldr	r3, [r1, r2]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1fc      	bne.n	80071ae <slcanOutputFlush+0x22>
			while (CDC_Transmit_FS(sl_frame, sl_frame_len) != USBD_OK);
 80071b4:	4d09      	ldr	r5, [pc, #36]	; (80071dc <slcanOutputFlush+0x50>)
 80071b6:	4c0b      	ldr	r4, [pc, #44]	; (80071e4 <slcanOutputFlush+0x58>)
 80071b8:	7829      	ldrb	r1, [r5, #0]
 80071ba:	0020      	movs	r0, r4
 80071bc:	f7ff fda6 	bl	8006d0c <CDC_Transmit_FS>
 80071c0:	2800      	cmp	r0, #0
 80071c2:	d1f9      	bne.n	80071b8 <slcanOutputFlush+0x2c>
		sl_frame_len = 0;
 80071c4:	4b05      	ldr	r3, [pc, #20]	; (80071dc <slcanOutputFlush+0x50>)
 80071c6:	2200      	movs	r2, #0
 80071c8:	701a      	strb	r2, [r3, #0]
}
 80071ca:	bd70      	pop	{r4, r5, r6, pc}
			HAL_UART_Transmit(&huart2,sl_frame,sl_frame_len,100); //ll todo figure out time
 80071cc:	4b03      	ldr	r3, [pc, #12]	; (80071dc <slcanOutputFlush+0x50>)
 80071ce:	781a      	ldrb	r2, [r3, #0]
 80071d0:	2364      	movs	r3, #100	; 0x64
 80071d2:	4904      	ldr	r1, [pc, #16]	; (80071e4 <slcanOutputFlush+0x58>)
 80071d4:	4804      	ldr	r0, [pc, #16]	; (80071e8 <slcanOutputFlush+0x5c>)
 80071d6:	f7fd fbc3 	bl	8004960 <HAL_UART_Transmit>
 80071da:	e7f3      	b.n	80071c4 <slcanOutputFlush+0x38>
 80071dc:	20000d04 	.word	0x20000d04
 80071e0:	200002b4 	.word	0x200002b4
 80071e4:	20000ce4 	.word	0x20000ce4
 80071e8:	20000240 	.word	0x20000240

080071ec <slCanProccesInput>:
{
 80071ec:	b570      	push	{r4, r5, r6, lr}
    if (ch == SLCAN_CR) {
 80071ee:	280d      	cmp	r0, #13
 80071f0:	d00c      	beq.n	800720c <slCanProccesInput+0x20>
    } else if (ch != SLCAN_LR) {
 80071f2:	280a      	cmp	r0, #10
 80071f4:	d015      	beq.n	8007222 <slCanProccesInput+0x36>
        line[linepos] = ch;
 80071f6:	4b0c      	ldr	r3, [pc, #48]	; (8007228 <slCanProccesInput+0x3c>)
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	4a0c      	ldr	r2, [pc, #48]	; (800722c <slCanProccesInput+0x40>)
 80071fc:	54d0      	strb	r0, [r2, r3]
    return 0;
 80071fe:	2000      	movs	r0, #0
        if (linepos < LINE_MAXLEN - 1) linepos++;
 8007200:	2b62      	cmp	r3, #98	; 0x62
 8007202:	d80f      	bhi.n	8007224 <slCanProccesInput+0x38>
 8007204:	3301      	adds	r3, #1
 8007206:	4a08      	ldr	r2, [pc, #32]	; (8007228 <slCanProccesInput+0x3c>)
 8007208:	7013      	strb	r3, [r2, #0]
 800720a:	e00b      	b.n	8007224 <slCanProccesInput+0x38>
        line[linepos] = 0;
 800720c:	4c06      	ldr	r4, [pc, #24]	; (8007228 <slCanProccesInput+0x3c>)
 800720e:	7822      	ldrb	r2, [r4, #0]
 8007210:	4906      	ldr	r1, [pc, #24]	; (800722c <slCanProccesInput+0x40>)
 8007212:	2500      	movs	r5, #0
 8007214:	548d      	strb	r5, [r1, r2]
        memcpy(command,line,linepos);
 8007216:	4806      	ldr	r0, [pc, #24]	; (8007230 <slCanProccesInput+0x44>)
 8007218:	f000 fc0a 	bl	8007a30 <memcpy>
        linepos = 0;
 800721c:	7025      	strb	r5, [r4, #0]
        return 1;
 800721e:	2001      	movs	r0, #1
 8007220:	e000      	b.n	8007224 <slCanProccesInput+0x38>
    return 0;
 8007222:	2000      	movs	r0, #0
}
 8007224:	bd70      	pop	{r4, r5, r6, pc}
 8007226:	46c0      	nop			; (mov r8, r8)
 8007228:	20000ce0 	.word	0x20000ce0
 800722c:	20000c7c 	.word	0x20000c7c
 8007230:	20000c18 	.word	0x20000c18

08007234 <slCanCheckCommand>:
 * @brief  Parse given command line
 * @param  line Line string to parse
 * @retval None
 */
uint8_t slCanCheckCommand(uint8_t *line)
{
 8007234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007236:	46c6      	mov	lr, r8
 8007238:	b500      	push	{lr}
 800723a:	b094      	sub	sp, #80	; 0x50
 800723c:	0004      	movs	r4, r0
	uint8_t result = SLCAN_BELL;
	if (line[0] == 0)
 800723e:	7800      	ldrb	r0, [r0, #0]
 8007240:	2800      	cmp	r0, #0
 8007242:	d100      	bne.n	8007246 <slCanCheckCommand+0x12>
 8007244:	e248      	b.n	80076d8 <slCanCheckCommand+0x4a4>
	{
		return 0;
	}
    switch (line[0]) {
 8007246:	0003      	movs	r3, r0
 8007248:	3b43      	subs	r3, #67	; 0x43
 800724a:	b2da      	uxtb	r2, r3
 800724c:	2a33      	cmp	r2, #51	; 0x33
 800724e:	d900      	bls.n	8007252 <slCanCheckCommand+0x1e>
 8007250:	e23b      	b.n	80076ca <slCanCheckCommand+0x496>
 8007252:	0093      	lsls	r3, r2, #2
 8007254:	4ad6      	ldr	r2, [pc, #856]	; (80075b0 <slCanCheckCommand+0x37c>)
 8007256:	58d3      	ldr	r3, [r2, r3]
 8007258:	469f      	mov	pc, r3
    	case 'a':
    	{
    		if (terminator == SLCAN_CR)
 800725a:	4bd6      	ldr	r3, [pc, #856]	; (80075b4 <slCanCheckCommand+0x380>)
 800725c:	781d      	ldrb	r5, [r3, #0]
    			terminator = SLCAN_LR;
    		else
    			terminator = SLCAN_CR;
 800725e:	3d0d      	subs	r5, #13
 8007260:	426b      	negs	r3, r5
 8007262:	415d      	adcs	r5, r3
 8007264:	426d      	negs	r5, r5
 8007266:	2302      	movs	r3, #2
 8007268:	439d      	bics	r5, r3
 800726a:	350d      	adds	r5, #13
 800726c:	4bd1      	ldr	r3, [pc, #836]	; (80075b4 <slCanCheckCommand+0x380>)
 800726e:	701d      	strb	r5, [r3, #0]
    		result = terminator;
    		break;
 8007270:	e22c      	b.n	80076cc <slCanCheckCommand+0x498>
    	}
        case 'S': // Setup with standard CAN bitrates
            if (state == STATE_CONFIG)
 8007272:	4bd1      	ldr	r3, [pc, #836]	; (80075b8 <slCanCheckCommand+0x384>)
 8007274:	781b      	ldrb	r3, [r3, #0]
	uint8_t result = SLCAN_BELL;
 8007276:	2507      	movs	r5, #7
            if (state == STATE_CONFIG)
 8007278:	2b00      	cmp	r3, #0
 800727a:	d000      	beq.n	800727e <slCanCheckCommand+0x4a>
 800727c:	e226      	b.n	80076cc <slCanCheckCommand+0x498>
            {
                switch (line[1]) {
 800727e:	7863      	ldrb	r3, [r4, #1]
 8007280:	3b30      	subs	r3, #48	; 0x30
 8007282:	b2da      	uxtb	r2, r3
 8007284:	2a09      	cmp	r2, #9
 8007286:	d900      	bls.n	800728a <slCanCheckCommand+0x56>
 8007288:	e22a      	b.n	80076e0 <slCanCheckCommand+0x4ac>
 800728a:	0093      	lsls	r3, r2, #2
 800728c:	4acb      	ldr	r2, [pc, #812]	; (80075bc <slCanCheckCommand+0x388>)
 800728e:	58d3      	ldr	r3, [r2, r3]
 8007290:	469f      	mov	pc, r3
                    case '0': slcanSetCANBaudRate(CAN_BR_10K);  result = terminator; break;
 8007292:	2000      	movs	r0, #0
 8007294:	f000 fb2a 	bl	80078ec <slcanSetCANBaudRate>
 8007298:	4bc6      	ldr	r3, [pc, #792]	; (80075b4 <slCanCheckCommand+0x380>)
 800729a:	781d      	ldrb	r5, [r3, #0]
 800729c:	e216      	b.n	80076cc <slCanCheckCommand+0x498>
                    case '1': slcanSetCANBaudRate(CAN_BR_20K);  result = terminator; break;
 800729e:	2001      	movs	r0, #1
 80072a0:	f000 fb24 	bl	80078ec <slcanSetCANBaudRate>
 80072a4:	4bc3      	ldr	r3, [pc, #780]	; (80075b4 <slCanCheckCommand+0x380>)
 80072a6:	781d      	ldrb	r5, [r3, #0]
 80072a8:	e210      	b.n	80076cc <slCanCheckCommand+0x498>
                    case '2': slcanSetCANBaudRate(CAN_BR_50K);  result = terminator; break;
 80072aa:	2002      	movs	r0, #2
 80072ac:	f000 fb1e 	bl	80078ec <slcanSetCANBaudRate>
 80072b0:	4bc0      	ldr	r3, [pc, #768]	; (80075b4 <slCanCheckCommand+0x380>)
 80072b2:	781d      	ldrb	r5, [r3, #0]
 80072b4:	e20a      	b.n	80076cc <slCanCheckCommand+0x498>
                    case '3': slcanSetCANBaudRate(CAN_BR_100K); result = terminator; break;
 80072b6:	2003      	movs	r0, #3
 80072b8:	f000 fb18 	bl	80078ec <slcanSetCANBaudRate>
 80072bc:	4bbd      	ldr	r3, [pc, #756]	; (80075b4 <slCanCheckCommand+0x380>)
 80072be:	781d      	ldrb	r5, [r3, #0]
 80072c0:	e204      	b.n	80076cc <slCanCheckCommand+0x498>
                    case '4': slcanSetCANBaudRate(CAN_BR_125K); result = terminator; break;
 80072c2:	2004      	movs	r0, #4
 80072c4:	f000 fb12 	bl	80078ec <slcanSetCANBaudRate>
 80072c8:	4bba      	ldr	r3, [pc, #744]	; (80075b4 <slCanCheckCommand+0x380>)
 80072ca:	781d      	ldrb	r5, [r3, #0]
 80072cc:	e1fe      	b.n	80076cc <slCanCheckCommand+0x498>
                    case '5': slcanSetCANBaudRate(CAN_BR_250K); result = terminator; break;
 80072ce:	2005      	movs	r0, #5
 80072d0:	f000 fb0c 	bl	80078ec <slcanSetCANBaudRate>
 80072d4:	4bb7      	ldr	r3, [pc, #732]	; (80075b4 <slCanCheckCommand+0x380>)
 80072d6:	781d      	ldrb	r5, [r3, #0]
 80072d8:	e1f8      	b.n	80076cc <slCanCheckCommand+0x498>
                    case '6': slcanSetCANBaudRate(CAN_BR_500K); result = terminator; break;
 80072da:	2006      	movs	r0, #6
 80072dc:	f000 fb06 	bl	80078ec <slcanSetCANBaudRate>
 80072e0:	4bb4      	ldr	r3, [pc, #720]	; (80075b4 <slCanCheckCommand+0x380>)
 80072e2:	781d      	ldrb	r5, [r3, #0]
 80072e4:	e1f2      	b.n	80076cc <slCanCheckCommand+0x498>
                    case '7': slcanSetCANBaudRate(CAN_BR_800K); result = terminator; break;
 80072e6:	2007      	movs	r0, #7
 80072e8:	f000 fb00 	bl	80078ec <slcanSetCANBaudRate>
 80072ec:	4bb1      	ldr	r3, [pc, #708]	; (80075b4 <slCanCheckCommand+0x380>)
 80072ee:	781d      	ldrb	r5, [r3, #0]
 80072f0:	e1ec      	b.n	80076cc <slCanCheckCommand+0x498>
                    case '8': slcanSetCANBaudRate(CAN_BR_1M);   result = terminator; break;
 80072f2:	2008      	movs	r0, #8
 80072f4:	f000 fafa 	bl	80078ec <slcanSetCANBaudRate>
 80072f8:	4bae      	ldr	r3, [pc, #696]	; (80075b4 <slCanCheckCommand+0x380>)
 80072fa:	781d      	ldrb	r5, [r3, #0]
 80072fc:	e1e6      	b.n	80076cc <slCanCheckCommand+0x498>
                    case '9': slcanSetCANBaudRate(CAN_BR_83K);   result = terminator; break;
 80072fe:	2024      	movs	r0, #36	; 0x24
 8007300:	f000 faf4 	bl	80078ec <slcanSetCANBaudRate>
 8007304:	4bab      	ldr	r3, [pc, #684]	; (80075b4 <slCanCheckCommand+0x380>)
 8007306:	781d      	ldrb	r5, [r3, #0]
 8007308:	e1e0      	b.n	80076cc <slCanCheckCommand+0x498>
            }
            break;

        case 'G': // Read given MCP2515 register
        case 'W':
			result = terminator;
 800730a:	4baa      	ldr	r3, [pc, #680]	; (80075b4 <slCanCheckCommand+0x380>)
 800730c:	781d      	ldrb	r5, [r3, #0]
			break;
 800730e:	e1dd      	b.n	80076cc <slCanCheckCommand+0x498>

        case 's': // Setup with user defined timing settings for CNF1/CNF2/CNF3
            if (state == STATE_CONFIG)
 8007310:	4ba9      	ldr	r3, [pc, #676]	; (80075b8 <slCanCheckCommand+0x384>)
 8007312:	781b      	ldrb	r3, [r3, #0]
	uint8_t result = SLCAN_BELL;
 8007314:	2507      	movs	r5, #7
            if (state == STATE_CONFIG)
 8007316:	2b00      	cmp	r3, #0
 8007318:	d000      	beq.n	800731c <slCanCheckCommand+0xe8>
 800731a:	e1d7      	b.n	80076cc <slCanCheckCommand+0x498>
            {
                uint32_t sjw, bs1, bs2, pre;
                if (parseHex(&line[1], 2, &sjw) && parseHex(&line[3], 2, &bs1) &&
 800731c:	1c60      	adds	r0, r4, #1
 800731e:	aa07      	add	r2, sp, #28
 8007320:	2102      	movs	r1, #2
 8007322:	f7ff fef8 	bl	8007116 <parseHex>
 8007326:	2800      	cmp	r0, #0
 8007328:	d100      	bne.n	800732c <slCanCheckCommand+0xf8>
 800732a:	e1cf      	b.n	80076cc <slCanCheckCommand+0x498>
 800732c:	1ce0      	adds	r0, r4, #3
 800732e:	aa08      	add	r2, sp, #32
 8007330:	2102      	movs	r1, #2
 8007332:	f7ff fef0 	bl	8007116 <parseHex>
 8007336:	2800      	cmp	r0, #0
 8007338:	d100      	bne.n	800733c <slCanCheckCommand+0x108>
 800733a:	e1c7      	b.n	80076cc <slCanCheckCommand+0x498>
                		parseHex(&line[5], 2, &bs2) && parseHex(&line[7], 4, &pre) ) {
 800733c:	1d60      	adds	r0, r4, #5
 800733e:	aa09      	add	r2, sp, #36	; 0x24
 8007340:	2102      	movs	r1, #2
 8007342:	f7ff fee8 	bl	8007116 <parseHex>
                if (parseHex(&line[1], 2, &sjw) && parseHex(&line[3], 2, &bs1) &&
 8007346:	2800      	cmp	r0, #0
 8007348:	d100      	bne.n	800734c <slCanCheckCommand+0x118>
 800734a:	e1bf      	b.n	80076cc <slCanCheckCommand+0x498>
                		parseHex(&line[5], 2, &bs2) && parseHex(&line[7], 4, &pre) ) {
 800734c:	1960      	adds	r0, r4, r5
 800734e:	aa0a      	add	r2, sp, #40	; 0x28
 8007350:	2104      	movs	r1, #4
 8007352:	f7ff fee0 	bl	8007116 <parseHex>
 8007356:	2800      	cmp	r0, #0
 8007358:	d100      	bne.n	800735c <slCanCheckCommand+0x128>
 800735a:	e1b7      	b.n	80076cc <slCanCheckCommand+0x498>

                	hcan.Init.SJW = sjw;
 800735c:	4b98      	ldr	r3, [pc, #608]	; (80075c0 <slCanCheckCommand+0x38c>)
 800735e:	9a07      	ldr	r2, [sp, #28]
 8007360:	60da      	str	r2, [r3, #12]
                	hcan.Init.BS1 = bs1;
 8007362:	9a08      	ldr	r2, [sp, #32]
 8007364:	611a      	str	r2, [r3, #16]
                	hcan.Init.BS2 = bs2;
 8007366:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007368:	615a      	str	r2, [r3, #20]
                	hcan.Init.Prescaler = pre;
 800736a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800736c:	605a      	str	r2, [r3, #4]
                	CANInit();
 800736e:	f000 fa0b 	bl	8007788 <CANInit>
                    result = terminator;
 8007372:	4b90      	ldr	r3, [pc, #576]	; (80075b4 <slCanCheckCommand+0x380>)
 8007374:	781d      	ldrb	r5, [r3, #0]
 8007376:	e1a9      	b.n	80076cc <slCanCheckCommand+0x498>
            }
            break;
        case 'V': // Get hardware version
            {

                slcanSetOutputChar('V');
 8007378:	2056      	movs	r0, #86	; 0x56
 800737a:	f7ff fea3 	bl	80070c4 <slcanSetOutputChar>
                slcanSetOutputAsHex(VERSION_HARDWARE_MAJOR);
 800737e:	2001      	movs	r0, #1
 8007380:	f7ff febf 	bl	8007102 <slcanSetOutputAsHex>
                slcanSetOutputAsHex(VERSION_HARDWARE_MINOR);
 8007384:	2001      	movs	r0, #1
 8007386:	f7ff febc 	bl	8007102 <slcanSetOutputAsHex>
                result = terminator;
 800738a:	4b8a      	ldr	r3, [pc, #552]	; (80075b4 <slCanCheckCommand+0x380>)
 800738c:	781d      	ldrb	r5, [r3, #0]
            }
            break;
 800738e:	e19d      	b.n	80076cc <slCanCheckCommand+0x498>
        case 'v': // Get firmware version
            {

                slcanSetOutputChar('v');
 8007390:	2076      	movs	r0, #118	; 0x76
 8007392:	f7ff fe97 	bl	80070c4 <slcanSetOutputChar>
                slcanSetOutputAsHex(VERSION_FIRMWARE_MAJOR);
 8007396:	2003      	movs	r0, #3
 8007398:	f7ff feb3 	bl	8007102 <slcanSetOutputAsHex>
                slcanSetOutputAsHex(VERSION_FIRMWARE_MINOR);
 800739c:	2003      	movs	r0, #3
 800739e:	f7ff feb0 	bl	8007102 <slcanSetOutputAsHex>
                result = terminator;
 80073a2:	4b84      	ldr	r3, [pc, #528]	; (80075b4 <slCanCheckCommand+0x380>)
 80073a4:	781d      	ldrb	r5, [r3, #0]
            }
            break;
 80073a6:	e191      	b.n	80076cc <slCanCheckCommand+0x498>
        case 'N': // Get serial number
            {
                slcanSetOutputChar('N');
 80073a8:	204e      	movs	r0, #78	; 0x4e
 80073aa:	f7ff fe8b 	bl	80070c4 <slcanSetOutputChar>
                slcanSetOutputAsHex((uint8_t)(serialNumber));
 80073ae:	4d85      	ldr	r5, [pc, #532]	; (80075c4 <slCanCheckCommand+0x390>)
 80073b0:	6828      	ldr	r0, [r5, #0]
 80073b2:	b2c0      	uxtb	r0, r0
 80073b4:	f7ff fea5 	bl	8007102 <slcanSetOutputAsHex>
                slcanSetOutputAsHex((uint8_t)(serialNumber>>8));
 80073b8:	6828      	ldr	r0, [r5, #0]
 80073ba:	1200      	asrs	r0, r0, #8
 80073bc:	b2c0      	uxtb	r0, r0
 80073be:	f7ff fea0 	bl	8007102 <slcanSetOutputAsHex>
                slcanSetOutputAsHex((uint8_t)(serialNumber>>16));
 80073c2:	6828      	ldr	r0, [r5, #0]
 80073c4:	1400      	asrs	r0, r0, #16
 80073c6:	b2c0      	uxtb	r0, r0
 80073c8:	f7ff fe9b 	bl	8007102 <slcanSetOutputAsHex>
                slcanSetOutputAsHex((uint8_t)(serialNumber>>24));
 80073cc:	6828      	ldr	r0, [r5, #0]
 80073ce:	0e00      	lsrs	r0, r0, #24
 80073d0:	f7ff fe97 	bl	8007102 <slcanSetOutputAsHex>
                result = terminator;
 80073d4:	4b77      	ldr	r3, [pc, #476]	; (80075b4 <slCanCheckCommand+0x380>)
 80073d6:	781d      	ldrb	r5, [r3, #0]
            }
            break;
 80073d8:	e178      	b.n	80076cc <slCanCheckCommand+0x498>
        case 'o':
        case 'O': // Open CAN channel
//            if (state == STATE_CONFIG)
            {
            	hcan.Init.Mode = CAN_MODE_NORMAL;
 80073da:	4b79      	ldr	r3, [pc, #484]	; (80075c0 <slCanCheckCommand+0x38c>)
 80073dc:	2200      	movs	r2, #0
 80073de:	609a      	str	r2, [r3, #8]

            	if(CANInit() == HAL_OK)
 80073e0:	f000 f9d2 	bl	8007788 <CANInit>
	uint8_t result = SLCAN_BELL;
 80073e4:	2507      	movs	r5, #7
            	if(CANInit() == HAL_OK)
 80073e6:	2800      	cmp	r0, #0
 80073e8:	d000      	beq.n	80073ec <slCanCheckCommand+0x1b8>
 80073ea:	e16f      	b.n	80076cc <slCanCheckCommand+0x498>
            	{
					HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 80073ec:	301e      	adds	r0, #30
 80073ee:	f7fa f822 	bl	8001436 <HAL_NVIC_EnableIRQ>
	//                clock_reset();
					state = STATE_OPEN;
 80073f2:	4b71      	ldr	r3, [pc, #452]	; (80075b8 <slCanCheckCommand+0x384>)
 80073f4:	2202      	movs	r2, #2
 80073f6:	701a      	strb	r2, [r3, #0]
					result = terminator;
 80073f8:	4b6e      	ldr	r3, [pc, #440]	; (80075b4 <slCanCheckCommand+0x380>)
 80073fa:	781d      	ldrb	r5, [r3, #0]
 80073fc:	e166      	b.n	80076cc <slCanCheckCommand+0x498>
            }
            break;
        case 'l': // Loop-back mode
//            if (state == STATE_CONFIG)
            {
            	hcan.Init.Mode = CAN_MODE_LOOPBACK;
 80073fe:	4b70      	ldr	r3, [pc, #448]	; (80075c0 <slCanCheckCommand+0x38c>)
 8007400:	2280      	movs	r2, #128	; 0x80
 8007402:	05d2      	lsls	r2, r2, #23
 8007404:	609a      	str	r2, [r3, #8]
            	HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8007406:	201e      	movs	r0, #30
 8007408:	f7fa f815 	bl	8001436 <HAL_NVIC_EnableIRQ>
            	CANInit();
 800740c:	f000 f9bc 	bl	8007788 <CANInit>
                state = STATE_OPEN;
 8007410:	4b69      	ldr	r3, [pc, #420]	; (80075b8 <slCanCheckCommand+0x384>)
 8007412:	2202      	movs	r2, #2
 8007414:	701a      	strb	r2, [r3, #0]
                result = terminator;
 8007416:	4b67      	ldr	r3, [pc, #412]	; (80075b4 <slCanCheckCommand+0x380>)
 8007418:	781d      	ldrb	r5, [r3, #0]
            }
            break;
 800741a:	e157      	b.n	80076cc <slCanCheckCommand+0x498>
        case 'L': // Open CAN channel in listen-only mode
            if (state == STATE_CONFIG)
 800741c:	4b66      	ldr	r3, [pc, #408]	; (80075b8 <slCanCheckCommand+0x384>)
 800741e:	781b      	ldrb	r3, [r3, #0]
	uint8_t result = SLCAN_BELL;
 8007420:	2507      	movs	r5, #7
            if (state == STATE_CONFIG)
 8007422:	2b00      	cmp	r3, #0
 8007424:	d000      	beq.n	8007428 <slCanCheckCommand+0x1f4>
 8007426:	e151      	b.n	80076cc <slCanCheckCommand+0x498>
            {
            	hcan.Init.Mode = CAN_MODE_SILENT;
 8007428:	4b65      	ldr	r3, [pc, #404]	; (80075c0 <slCanCheckCommand+0x38c>)
 800742a:	2280      	movs	r2, #128	; 0x80
 800742c:	0612      	lsls	r2, r2, #24
 800742e:	609a      	str	r2, [r3, #8]
            	HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8007430:	201e      	movs	r0, #30
 8007432:	f7fa f800 	bl	8001436 <HAL_NVIC_EnableIRQ>
            	CANInit();
 8007436:	f000 f9a7 	bl	8007788 <CANInit>
                state = STATE_LISTEN;
 800743a:	4b5f      	ldr	r3, [pc, #380]	; (80075b8 <slCanCheckCommand+0x384>)
 800743c:	2201      	movs	r2, #1
 800743e:	701a      	strb	r2, [r3, #0]
                result = terminator;
 8007440:	4b5c      	ldr	r3, [pc, #368]	; (80075b4 <slCanCheckCommand+0x380>)
 8007442:	781d      	ldrb	r5, [r3, #0]
 8007444:	e142      	b.n	80076cc <slCanCheckCommand+0x498>
            }
            break;
        case 'C': // Close CAN channel
//            if (state != STATE_CONFIG)
            {
            	HAL_NVIC_DisableIRQ(CEC_CAN_IRQn);
 8007446:	201e      	movs	r0, #30
 8007448:	f7fa f805 	bl	8001456 <HAL_NVIC_DisableIRQ>
//            	dataToSend = 0;
//            	todo into slleep
                state = STATE_CONFIG;
 800744c:	4b5a      	ldr	r3, [pc, #360]	; (80075b8 <slCanCheckCommand+0x384>)
 800744e:	2200      	movs	r2, #0
 8007450:	701a      	strb	r2, [r3, #0]
                result = terminator;
 8007452:	4b58      	ldr	r3, [pc, #352]	; (80075b4 <slCanCheckCommand+0x380>)
 8007454:	781d      	ldrb	r5, [r3, #0]
            }
            break;
 8007456:	e139      	b.n	80076cc <slCanCheckCommand+0x498>
        case 'r': // Transmit standard RTR (11 bit) frame
        case 'R': // Transmit extended RTR (29 bit) frame
        case 't': // Transmit standard (11 bit) frame
        case 'T': // Transmit extended (29 bit) frame
            if (state == STATE_OPEN)
 8007458:	4b57      	ldr	r3, [pc, #348]	; (80075b8 <slCanCheckCommand+0x384>)
 800745a:	781b      	ldrb	r3, [r3, #0]
	uint8_t result = SLCAN_BELL;
 800745c:	2507      	movs	r5, #7
            if (state == STATE_OPEN)
 800745e:	2b02      	cmp	r3, #2
 8007460:	d000      	beq.n	8007464 <slCanCheckCommand+0x230>
 8007462:	e133      	b.n	80076cc <slCanCheckCommand+0x498>
    if ((line[0] == 'r') || (line[0] == 'R'))
 8007464:	331e      	adds	r3, #30
 8007466:	4398      	bics	r0, r3
 8007468:	2852      	cmp	r0, #82	; 0x52
 800746a:	d004      	beq.n	8007476 <slCanCheckCommand+0x242>
    	hcan.pTxMsg->RTR = CAN_RTR_DATA;
 800746c:	4b54      	ldr	r3, [pc, #336]	; (80075c0 <slCanCheckCommand+0x38c>)
 800746e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007470:	2200      	movs	r2, #0
 8007472:	60da      	str	r2, [r3, #12]
 8007474:	e003      	b.n	800747e <slCanCheckCommand+0x24a>
    	hcan.pTxMsg->RTR = CAN_RTR_REMOTE;
 8007476:	4b52      	ldr	r3, [pc, #328]	; (80075c0 <slCanCheckCommand+0x38c>)
 8007478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800747a:	2202      	movs	r2, #2
 800747c:	60da      	str	r2, [r3, #12]
    if (line[0] < 'Z') {
 800747e:	7823      	ldrb	r3, [r4, #0]
 8007480:	2b59      	cmp	r3, #89	; 0x59
 8007482:	d853      	bhi.n	800752c <slCanCheckCommand+0x2f8>
        if (!parseHex(&line[1], idlen, &temp)) return 0;
 8007484:	1c60      	adds	r0, r4, #1
 8007486:	aa0a      	add	r2, sp, #40	; 0x28
 8007488:	2108      	movs	r1, #8
 800748a:	f7ff fe44 	bl	8007116 <parseHex>
 800748e:	2800      	cmp	r0, #0
 8007490:	d043      	beq.n	800751a <slCanCheckCommand+0x2e6>
        hcan.pTxMsg->IDE = CAN_ID_EXT;
 8007492:	4b4b      	ldr	r3, [pc, #300]	; (80075c0 <slCanCheckCommand+0x38c>)
 8007494:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007496:	2104      	movs	r1, #4
 8007498:	6091      	str	r1, [r2, #8]
        hcan.pTxMsg->ExtId = temp;
 800749a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800749c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800749e:	605a      	str	r2, [r3, #4]
    	idlen = 8;
 80074a0:	2608      	movs	r6, #8
    if (!parseHex(&line[1 + idlen], 1, &temp)) return 0;
 80074a2:	1c70      	adds	r0, r6, #1
 80074a4:	1820      	adds	r0, r4, r0
 80074a6:	aa0a      	add	r2, sp, #40	; 0x28
 80074a8:	2101      	movs	r1, #1
 80074aa:	f7ff fe34 	bl	8007116 <parseHex>
 80074ae:	2800      	cmp	r0, #0
 80074b0:	d033      	beq.n	800751a <slCanCheckCommand+0x2e6>
    hcan.pTxMsg->DLC = temp;
 80074b2:	4b43      	ldr	r3, [pc, #268]	; (80075c0 <slCanCheckCommand+0x38c>)
 80074b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80074b8:	6111      	str	r1, [r2, #16]
    if (hcan.pTxMsg->RTR == CAN_RTR_DATA) {
 80074ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074bc:	68dd      	ldr	r5, [r3, #12]
 80074be:	2d00      	cmp	r5, #0
 80074c0:	d11c      	bne.n	80074fc <slCanCheckCommand+0x2c8>
        uint8_t length = hcan.pTxMsg->DLC;
 80074c2:	7c1b      	ldrb	r3, [r3, #16]
        if (length > 8) length = 8;
 80074c4:	1c1f      	adds	r7, r3, #0
 80074c6:	2b08      	cmp	r3, #8
 80074c8:	d900      	bls.n	80074cc <slCanCheckCommand+0x298>
 80074ca:	2708      	movs	r7, #8
 80074cc:	b2ff      	uxtb	r7, r7
        for (i = 0; i < length; i++) {
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d014      	beq.n	80074fc <slCanCheckCommand+0x2c8>
 80074d2:	3602      	adds	r6, #2
 80074d4:	19a6      	adds	r6, r4, r6
            hcan.pTxMsg->Data[i] = temp;
 80074d6:	4b3a      	ldr	r3, [pc, #232]	; (80075c0 <slCanCheckCommand+0x38c>)
 80074d8:	4698      	mov	r8, r3
            if (!parseHex(&line[idlen + 2 + i*2], 2, &temp)) return 0;
 80074da:	aa0a      	add	r2, sp, #40	; 0x28
 80074dc:	2102      	movs	r1, #2
 80074de:	0030      	movs	r0, r6
 80074e0:	f7ff fe19 	bl	8007116 <parseHex>
 80074e4:	2800      	cmp	r0, #0
 80074e6:	d018      	beq.n	800751a <slCanCheckCommand+0x2e6>
            hcan.pTxMsg->Data[i] = temp;
 80074e8:	4643      	mov	r3, r8
 80074ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ec:	195b      	adds	r3, r3, r5
 80074ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074f0:	751a      	strb	r2, [r3, #20]
        for (i = 0; i < length; i++) {
 80074f2:	3501      	adds	r5, #1
 80074f4:	3602      	adds	r6, #2
 80074f6:	b2eb      	uxtb	r3, r5
 80074f8:	42bb      	cmp	r3, r7
 80074fa:	d3ee      	bcc.n	80074da <slCanCheckCommand+0x2a6>
    HAL_NVIC_DisableIRQ(CEC_CAN_IRQn);
 80074fc:	201e      	movs	r0, #30
 80074fe:	f7f9 ffaa 	bl	8001456 <HAL_NVIC_DisableIRQ>
    tr = HAL_CAN_Transmit(&hcan, 0);
 8007502:	2100      	movs	r1, #0
 8007504:	482e      	ldr	r0, [pc, #184]	; (80075c0 <slCanCheckCommand+0x38c>)
 8007506:	f7f9 f8e3 	bl	80006d0 <HAL_CAN_Transmit>
 800750a:	0006      	movs	r6, r0
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 800750c:	201e      	movs	r0, #30
 800750e:	f7f9 ff92 	bl	8001436 <HAL_NVIC_EnableIRQ>
	uint8_t result = SLCAN_BELL;
 8007512:	2507      	movs	r5, #7
            {
                if (transmitStd(line) == HAL_OK) {
 8007514:	2e00      	cmp	r6, #0
 8007516:	d000      	beq.n	800751a <slCanCheckCommand+0x2e6>
 8007518:	e0d8      	b.n	80076cc <slCanCheckCommand+0x498>
                    if (line[0] < 'Z') slcanSetOutputChar('Z');
 800751a:	7823      	ldrb	r3, [r4, #0]
 800751c:	2b59      	cmp	r3, #89	; 0x59
 800751e:	d815      	bhi.n	800754c <slCanCheckCommand+0x318>
 8007520:	205a      	movs	r0, #90	; 0x5a
 8007522:	f7ff fdcf 	bl	80070c4 <slcanSetOutputChar>
                    else slcanSetOutputChar('z');
                    result = terminator;
 8007526:	4b23      	ldr	r3, [pc, #140]	; (80075b4 <slCanCheckCommand+0x380>)
 8007528:	781d      	ldrb	r5, [r3, #0]
 800752a:	e0cf      	b.n	80076cc <slCanCheckCommand+0x498>
    	if (!parseHex(&line[1], idlen, &temp)) return 0;
 800752c:	1c60      	adds	r0, r4, #1
 800752e:	aa0a      	add	r2, sp, #40	; 0x28
 8007530:	2103      	movs	r1, #3
 8007532:	f7ff fdf0 	bl	8007116 <parseHex>
 8007536:	2800      	cmp	r0, #0
 8007538:	d0ef      	beq.n	800751a <slCanCheckCommand+0x2e6>
		hcan.pTxMsg->IDE = CAN_ID_STD;
 800753a:	4b21      	ldr	r3, [pc, #132]	; (80075c0 <slCanCheckCommand+0x38c>)
 800753c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800753e:	2100      	movs	r1, #0
 8007540:	6091      	str	r1, [r2, #8]
		hcan.pTxMsg->StdId = temp;
 8007542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007544:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007546:	601a      	str	r2, [r3, #0]
    	idlen = 3;
 8007548:	2603      	movs	r6, #3
 800754a:	e7aa      	b.n	80074a2 <slCanCheckCommand+0x26e>
                    else slcanSetOutputChar('z');
 800754c:	207a      	movs	r0, #122	; 0x7a
 800754e:	f7ff fdb9 	bl	80070c4 <slcanSetOutputChar>
 8007552:	e7e8      	b.n	8007526 <slCanCheckCommand+0x2f2>
                }
            }
            break;
        case 'F': // Read status flags
            {
                unsigned char status = HAL_CAN_GetError(&hcan);
 8007554:	481a      	ldr	r0, [pc, #104]	; (80075c0 <slCanCheckCommand+0x38c>)
 8007556:	f7f9 fceb 	bl	8000f30 <HAL_CAN_GetError>
 800755a:	0005      	movs	r5, r0
//                unsigned char flags = HAL_CAN_GetError(&hcan);
//                if (flags & 0x01) status |= 0x04; // error warning
//                if (flags & 0xC0) status |= 0x08; // data overrun
//                if (flags & 0x18) status |= 0x20; // passive error
//                if (flags & 0x20) status |= 0x80; // bus error
                slcanSetOutputChar('F');
 800755c:	2046      	movs	r0, #70	; 0x46
 800755e:	f7ff fdb1 	bl	80070c4 <slcanSetOutputChar>
                slcanSetOutputAsHex(status);
 8007562:	b2e8      	uxtb	r0, r5
 8007564:	f7ff fdcd 	bl	8007102 <slcanSetOutputAsHex>
                result = terminator;
 8007568:	4b12      	ldr	r3, [pc, #72]	; (80075b4 <slCanCheckCommand+0x380>)
 800756a:	781d      	ldrb	r5, [r3, #0]
            }
            break;
 800756c:	e0ae      	b.n	80076cc <slCanCheckCommand+0x498>
         case 'Z': // Set time stamping
            {
                unsigned long stamping;
                if (parseHex(&line[1], 1, &stamping)) {
 800756e:	1c60      	adds	r0, r4, #1
 8007570:	aa0a      	add	r2, sp, #40	; 0x28
 8007572:	2101      	movs	r1, #1
 8007574:	f7ff fdcf 	bl	8007116 <parseHex>
	uint8_t result = SLCAN_BELL;
 8007578:	2507      	movs	r5, #7
                if (parseHex(&line[1], 1, &stamping)) {
 800757a:	2800      	cmp	r0, #0
 800757c:	d100      	bne.n	8007580 <slCanCheckCommand+0x34c>
 800757e:	e0a5      	b.n	80076cc <slCanCheckCommand+0x498>
                    timestamping = (stamping != 0);
                    result = terminator;
 8007580:	4b0c      	ldr	r3, [pc, #48]	; (80075b4 <slCanCheckCommand+0x380>)
 8007582:	781d      	ldrb	r5, [r3, #0]
 8007584:	e0a2      	b.n	80076cc <slCanCheckCommand+0x498>
                }
            }
            break;
         case 'm': // Set accpetance filter mask
         case 'M': // Set accpetance filter code
            if (line[1] == 'd') // disable all filtering
 8007586:	7863      	ldrb	r3, [r4, #1]
 8007588:	2b64      	cmp	r3, #100	; 0x64
 800758a:	d008      	beq.n	800759e <slCanCheckCommand+0x36a>
            	uint32_t n,b;
            	tCANFilterFlagsConf fflags;
            	tCANFilterFlagsId idflags,maskflags;
            	uint32_t id,mask;

            	if (!parseHex(&line[1], 2, &n)) break;
 800758c:	1c60      	adds	r0, r4, #1
 800758e:	aa03      	add	r2, sp, #12
 8007590:	2102      	movs	r1, #2
 8007592:	f7ff fdc0 	bl	8007116 <parseHex>
 8007596:	2800      	cmp	r0, #0
 8007598:	d116      	bne.n	80075c8 <slCanCheckCommand+0x394>
	uint8_t result = SLCAN_BELL;
 800759a:	2507      	movs	r5, #7
 800759c:	e096      	b.n	80076cc <slCanCheckCommand+0x498>
            	slcanClearAllFilters();
 800759e:	f000 f905 	bl	80077ac <slcanClearAllFilters>
            	result = terminator;
 80075a2:	4b04      	ldr	r3, [pc, #16]	; (80075b4 <slCanCheckCommand+0x380>)
 80075a4:	781d      	ldrb	r5, [r3, #0]
            	slcanSetOutputChar('M');
 80075a6:	204d      	movs	r0, #77	; 0x4d
 80075a8:	f7ff fd8c 	bl	80070c4 <slcanSetOutputChar>
 80075ac:	e08e      	b.n	80076cc <slCanCheckCommand+0x498>
 80075ae:	46c0      	nop			; (mov r8, r8)
 80075b0:	08007b58 	.word	0x08007b58
 80075b4:	2000015c 	.word	0x2000015c
 80075b8:	20000d05 	.word	0x20000d05
 80075bc:	08007c28 	.word	0x08007c28
 80075c0:	200001ec 	.word	0x200001ec
 80075c4:	200002b0 	.word	0x200002b0
            	if (!parseHex(&line[3], 2, &b)) break;
 80075c8:	1ce0      	adds	r0, r4, #3
 80075ca:	aa04      	add	r2, sp, #16
 80075cc:	2102      	movs	r1, #2
 80075ce:	f7ff fda2 	bl	8007116 <parseHex>
 80075d2:	2800      	cmp	r0, #0
 80075d4:	d0e1      	beq.n	800759a <slCanCheckCommand+0x366>
            	if (!parseHex(&line[5], 1, &fflags.reg)) break;
 80075d6:	1d60      	adds	r0, r4, #5
 80075d8:	aa05      	add	r2, sp, #20
 80075da:	2101      	movs	r1, #1
 80075dc:	f7ff fd9b 	bl	8007116 <parseHex>
 80075e0:	2800      	cmp	r0, #0
 80075e2:	d0da      	beq.n	800759a <slCanCheckCommand+0x366>
            	if (!parseHex(&line[6], 8, &id)) break;
 80075e4:	1da0      	adds	r0, r4, #6
 80075e6:	aa08      	add	r2, sp, #32
 80075e8:	2108      	movs	r1, #8
 80075ea:	f7ff fd94 	bl	8007116 <parseHex>
 80075ee:	2800      	cmp	r0, #0
 80075f0:	d0d3      	beq.n	800759a <slCanCheckCommand+0x366>
            	if (!parseHex(&line[14], 1, &idflags.reg)) break;
 80075f2:	aa06      	add	r2, sp, #24
 80075f4:	2101      	movs	r1, #1
 80075f6:	0020      	movs	r0, r4
 80075f8:	300e      	adds	r0, #14
 80075fa:	f7ff fd8c 	bl	8007116 <parseHex>
 80075fe:	2800      	cmp	r0, #0
 8007600:	d0cb      	beq.n	800759a <slCanCheckCommand+0x366>
            	if (!parseHex(&line[15], 8, &mask)) break;
 8007602:	aa09      	add	r2, sp, #36	; 0x24
 8007604:	2108      	movs	r1, #8
 8007606:	0020      	movs	r0, r4
 8007608:	300f      	adds	r0, #15
 800760a:	f7ff fd84 	bl	8007116 <parseHex>
 800760e:	2800      	cmp	r0, #0
 8007610:	d0c3      	beq.n	800759a <slCanCheckCommand+0x366>
            	if (!parseHex(&line[23], 1, &maskflags.reg)) break;
 8007612:	aa07      	add	r2, sp, #28
 8007614:	2101      	movs	r1, #1
 8007616:	0020      	movs	r0, r4
 8007618:	3017      	adds	r0, #23
 800761a:	f7ff fd7c 	bl	8007116 <parseHex>
 800761e:	2800      	cmp	r0, #0
 8007620:	d0bb      	beq.n	800759a <slCanCheckCommand+0x366>

            	if (fflags.bScale == CAN_FILTERSCALE_32BIT)
 8007622:	ab05      	add	r3, sp, #20
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	075b      	lsls	r3, r3, #29
 8007628:	d532      	bpl.n	8007690 <slCanCheckCommand+0x45c>
            	{
					freg = slcanFillIdRegister32(idflags, id);
 800762a:	9908      	ldr	r1, [sp, #32]
 800762c:	9806      	ldr	r0, [sp, #24]
 800762e:	f000 f8d7 	bl	80077e0 <slcanFillIdRegister32>
 8007632:	9001      	str	r0, [sp, #4]
					mreg = slcanFillIdRegister32(maskflags, mask);
 8007634:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007636:	9807      	ldr	r0, [sp, #28]
 8007638:	f000 f8d2 	bl	80077e0 <slcanFillIdRegister32>
 800763c:	9002      	str	r0, [sp, #8]
            	{
            		freg = slcanFillIdRegister16(idflags, id);
            		mreg = slcanFillIdRegister16(maskflags, mask);
            	}

            	sFilterConfig.FilterNumber = n;
 800763e:	9b03      	ldr	r3, [sp, #12]
 8007640:	930f      	str	r3, [sp, #60]	; 0x3c
            	sFilterConfig.BankNumber = b;
 8007642:	9b04      	ldr	r3, [sp, #16]
 8007644:	9313      	str	r3, [sp, #76]	; 0x4c
            	sFilterConfig.FilterActivation = fflags.bFilterActivation; // ENABLE == 1
 8007646:	ab05      	add	r3, sp, #20
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	07da      	lsls	r2, r3, #31
 800764c:	0fd2      	lsrs	r2, r2, #31
 800764e:	9212      	str	r2, [sp, #72]	; 0x48
				sFilterConfig.FilterMode = fflags.bMode; // CAN_FILTERMODE_IDLIST == 1
 8007650:	079a      	lsls	r2, r3, #30
 8007652:	0fd2      	lsrs	r2, r2, #31
 8007654:	9210      	str	r2, [sp, #64]	; 0x40
				sFilterConfig.FilterScale = fflags.bScale;  // CAN_FILTERSCALE_32BIT == 1
 8007656:	075a      	lsls	r2, r3, #29
 8007658:	0fd2      	lsrs	r2, r2, #31
 800765a:	9211      	str	r2, [sp, #68]	; 0x44
				sFilterConfig.FilterFIFOAssignment = fflags.bFIFO;
 800765c:	071b      	lsls	r3, r3, #28
 800765e:	0fdb      	lsrs	r3, r3, #31
 8007660:	930e      	str	r3, [sp, #56]	; 0x38
				sFilterConfig.FilterIdHigh = freg.h.reg;
 8007662:	ab01      	add	r3, sp, #4
 8007664:	881a      	ldrh	r2, [r3, #0]
 8007666:	920a      	str	r2, [sp, #40]	; 0x28
				sFilterConfig.FilterIdLow = freg.l.reg;
 8007668:	885b      	ldrh	r3, [r3, #2]
 800766a:	930b      	str	r3, [sp, #44]	; 0x2c
				sFilterConfig.FilterMaskIdHigh = mreg.h.reg;
 800766c:	ab02      	add	r3, sp, #8
 800766e:	881a      	ldrh	r2, [r3, #0]
 8007670:	920c      	str	r2, [sp, #48]	; 0x30
				sFilterConfig.FilterMaskIdLow = mreg.l.reg;
 8007672:	885b      	ldrh	r3, [r3, #2]
 8007674:	930d      	str	r3, [sp, #52]	; 0x34

				slcanSetOutputChar('M');
 8007676:	204d      	movs	r0, #77	; 0x4d
 8007678:	f7ff fd24 	bl	80070c4 <slcanSetOutputChar>
				if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) == HAL_OK)
 800767c:	a90a      	add	r1, sp, #40	; 0x28
 800767e:	4819      	ldr	r0, [pc, #100]	; (80076e4 <slCanCheckCommand+0x4b0>)
 8007680:	f7f8 ff38 	bl	80004f4 <HAL_CAN_ConfigFilter>
	uint8_t result = SLCAN_BELL;
 8007684:	2507      	movs	r5, #7
				if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) == HAL_OK)
 8007686:	2800      	cmp	r0, #0
 8007688:	d120      	bne.n	80076cc <slCanCheckCommand+0x498>
					result = terminator;
 800768a:	4b17      	ldr	r3, [pc, #92]	; (80076e8 <slCanCheckCommand+0x4b4>)
 800768c:	781d      	ldrb	r5, [r3, #0]
 800768e:	e01d      	b.n	80076cc <slCanCheckCommand+0x498>
            		freg = slcanFillIdRegister16(idflags, id);
 8007690:	9908      	ldr	r1, [sp, #32]
 8007692:	9806      	ldr	r0, [sp, #24]
 8007694:	f000 f8db 	bl	800784e <slcanFillIdRegister16>
 8007698:	9001      	str	r0, [sp, #4]
            		mreg = slcanFillIdRegister16(maskflags, mask);
 800769a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800769c:	9807      	ldr	r0, [sp, #28]
 800769e:	f000 f8d6 	bl	800784e <slcanFillIdRegister16>
 80076a2:	9002      	str	r0, [sp, #8]
 80076a4:	e7cb      	b.n	800763e <slCanCheckCommand+0x40a>
            }
            break;
         case 'b':
        	 if ((line[1] == 'o') && (line[2] == 'o') && (line[3] == 't')){
 80076a6:	7863      	ldrb	r3, [r4, #1]
	uint8_t result = SLCAN_BELL;
 80076a8:	2507      	movs	r5, #7
        	 if ((line[1] == 'o') && (line[2] == 'o') && (line[3] == 't')){
 80076aa:	2b6f      	cmp	r3, #111	; 0x6f
 80076ac:	d10e      	bne.n	80076cc <slCanCheckCommand+0x498>
 80076ae:	78a3      	ldrb	r3, [r4, #2]
 80076b0:	2b6f      	cmp	r3, #111	; 0x6f
 80076b2:	d10b      	bne.n	80076cc <slCanCheckCommand+0x498>
 80076b4:	78e3      	ldrb	r3, [r4, #3]
 80076b6:	2b74      	cmp	r3, #116	; 0x74
 80076b8:	d108      	bne.n	80076cc <slCanCheckCommand+0x498>
        		 line[0] = 0;
 80076ba:	2300      	movs	r3, #0
 80076bc:	7023      	strb	r3, [r4, #0]
        		 line[1] = 0;
 80076be:	7063      	strb	r3, [r4, #1]
        		 line[2] = 0;
 80076c0:	70a3      	strb	r3, [r4, #2]
        		 line[3] = 0;
 80076c2:	70e3      	strb	r3, [r4, #3]
        		 RebootToBootloader();
 80076c4:	f7ff f87b 	bl	80067be <RebootToBootloader>
 80076c8:	e000      	b.n	80076cc <slCanCheckCommand+0x498>
    switch (line[0]) {
 80076ca:	2507      	movs	r5, #7
        	 }
        	 break;

    }

   line[0] = 0;
 80076cc:	2300      	movs	r3, #0
 80076ce:	7023      	strb	r3, [r4, #0]
   slcanSetOutputChar(result);
 80076d0:	0028      	movs	r0, r5
 80076d2:	f7ff fcf7 	bl	80070c4 <slcanSetOutputChar>
   return 1;
 80076d6:	2001      	movs	r0, #1
}
 80076d8:	b014      	add	sp, #80	; 0x50
 80076da:	bc80      	pop	{r7}
 80076dc:	46b8      	mov	r8, r7
 80076de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076e0:	2507      	movs	r5, #7
 80076e2:	e7f3      	b.n	80076cc <slCanCheckCommand+0x498>
 80076e4:	200001ec 	.word	0x200001ec
 80076e8:	2000015c 	.word	0x2000015c

080076ec <slcan_getState>:
 * @param  none
 * @retval slcan state
 */
uint8_t slcan_getState()
{
	return state;
 80076ec:	4b01      	ldr	r3, [pc, #4]	; (80076f4 <slcan_getState+0x8>)
 80076ee:	7818      	ldrb	r0, [r3, #0]
}
 80076f0:	4770      	bx	lr
 80076f2:	46c0      	nop			; (mov r8, r8)
 80076f4:	20000d05 	.word	0x20000d05

080076f8 <slcanReciveCanFrame>:
 * @param  canmsg Pointer to can message
 * 			step Current step
 * @retval Next character to print out
 */
uint8_t slcanReciveCanFrame(CanRxMsgTypeDef *pRxMsg)
{
 80076f8:	b570      	push	{r4, r5, r6, lr}
 80076fa:	0005      	movs	r5, r0
	uint8_t i;

	// type
	if (pRxMsg->IDE == CAN_ID_EXT) {
 80076fc:	6883      	ldr	r3, [r0, #8]
 80076fe:	2b04      	cmp	r3, #4
 8007700:	d028      	beq.n	8007754 <slcanReciveCanFrame+0x5c>
		{
			slcanSetOutputAsHex(((uint8_t*)&pRxMsg->ExtId)[i - 1]);
		}
	} else
	{
		if (pRxMsg->RTR == CAN_RTR_REMOTE)
 8007702:	68c3      	ldr	r3, [r0, #12]
 8007704:	2b02      	cmp	r3, #2
 8007706:	d038      	beq.n	800777a <slcanReciveCanFrame+0x82>
		{
			slcanSetOutputChar('r');
		}
		else
		{
			slcanSetOutputChar('t');
 8007708:	2074      	movs	r0, #116	; 0x74
 800770a:	f7ff fcdb 	bl	80070c4 <slcanSetOutputChar>
		}
		//id
		slCanSendNibble(((uint8_t*)&pRxMsg->StdId)[1] & 0x0F);
 800770e:	786b      	ldrb	r3, [r5, #1]
 8007710:	200f      	movs	r0, #15
 8007712:	4018      	ands	r0, r3
 8007714:	f7ff fcea 	bl	80070ec <slCanSendNibble>
		slcanSetOutputAsHex(((uint8_t*)&pRxMsg->StdId)[0]);
 8007718:	7828      	ldrb	r0, [r5, #0]
 800771a:	f7ff fcf2 	bl	8007102 <slcanSetOutputAsHex>
	}
	// length
	slCanSendNibble(pRxMsg->DLC);
 800771e:	7c28      	ldrb	r0, [r5, #16]
 8007720:	f7ff fce4 	bl	80070ec <slCanSendNibble>

	//data
	if ((pRxMsg->DLC > 0) && (pRxMsg->RTR != CAN_RTR_REMOTE))
 8007724:	692b      	ldr	r3, [r5, #16]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00c      	beq.n	8007744 <slcanReciveCanFrame+0x4c>
 800772a:	68eb      	ldr	r3, [r5, #12]
 800772c:	2b02      	cmp	r3, #2
 800772e:	d009      	beq.n	8007744 <slcanReciveCanFrame+0x4c>
	{
		for (i = 0;  i != pRxMsg->DLC; i ++)
 8007730:	2400      	movs	r4, #0
		{
			slcanSetOutputAsHex(pRxMsg->Data[i]);
 8007732:	192b      	adds	r3, r5, r4
 8007734:	7d18      	ldrb	r0, [r3, #20]
 8007736:	f7ff fce4 	bl	8007102 <slcanSetOutputAsHex>
		for (i = 0;  i != pRxMsg->DLC; i ++)
 800773a:	3401      	adds	r4, #1
 800773c:	b2e4      	uxtb	r4, r4
 800773e:	692b      	ldr	r3, [r5, #16]
 8007740:	429c      	cmp	r4, r3
 8007742:	d1f6      	bne.n	8007732 <slcanReciveCanFrame+0x3a>
		}
	}
	slcanSetOutputChar(terminator);
 8007744:	4b0f      	ldr	r3, [pc, #60]	; (8007784 <slcanReciveCanFrame+0x8c>)
 8007746:	7818      	ldrb	r0, [r3, #0]
 8007748:	f7ff fcbc 	bl	80070c4 <slcanSetOutputChar>
	slcanOutputFlush();
 800774c:	f7ff fd1e 	bl	800718c <slcanOutputFlush>
	return 0;
}
 8007750:	2000      	movs	r0, #0
 8007752:	bd70      	pop	{r4, r5, r6, pc}
		if (pRxMsg->RTR == CAN_RTR_REMOTE)
 8007754:	68c3      	ldr	r3, [r0, #12]
 8007756:	2b02      	cmp	r3, #2
 8007758:	d00b      	beq.n	8007772 <slcanReciveCanFrame+0x7a>
			slcanSetOutputChar('T');
 800775a:	2054      	movs	r0, #84	; 0x54
 800775c:	f7ff fcb2 	bl	80070c4 <slcanSetOutputChar>
		for (i = 4; i != 0; i--)
 8007760:	1dec      	adds	r4, r5, #7
 8007762:	1cee      	adds	r6, r5, #3
			slcanSetOutputAsHex(((uint8_t*)&pRxMsg->ExtId)[i - 1]);
 8007764:	7820      	ldrb	r0, [r4, #0]
 8007766:	f7ff fccc 	bl	8007102 <slcanSetOutputAsHex>
		for (i = 4; i != 0; i--)
 800776a:	3c01      	subs	r4, #1
 800776c:	42a6      	cmp	r6, r4
 800776e:	d1f9      	bne.n	8007764 <slcanReciveCanFrame+0x6c>
 8007770:	e7d5      	b.n	800771e <slcanReciveCanFrame+0x26>
			slcanSetOutputChar('R');
 8007772:	2052      	movs	r0, #82	; 0x52
 8007774:	f7ff fca6 	bl	80070c4 <slcanSetOutputChar>
 8007778:	e7f2      	b.n	8007760 <slcanReciveCanFrame+0x68>
			slcanSetOutputChar('r');
 800777a:	2072      	movs	r0, #114	; 0x72
 800777c:	f7ff fca2 	bl	80070c4 <slcanSetOutputChar>
 8007780:	e7c5      	b.n	800770e <slcanReciveCanFrame+0x16>
 8007782:	46c0      	nop			; (mov r8, r8)
 8007784:	2000015c 	.word	0x2000015c

08007788 <CANInit>:
#include "slcan_additional.h"

extern CAN_HandleTypeDef hcan;
extern IWDG_HandleTypeDef hiwdg;
HAL_StatusTypeDef CANInit(void)
{
 8007788:	b570      	push	{r4, r5, r6, lr}
    while (HAL_CAN_Init(&hcan) == HAL_TIMEOUT)
 800778a:	4c06      	ldr	r4, [pc, #24]	; (80077a4 <CANInit+0x1c>)
    {
    	HAL_IWDG_Refresh(&hiwdg);
 800778c:	4d06      	ldr	r5, [pc, #24]	; (80077a8 <CANInit+0x20>)
    while (HAL_CAN_Init(&hcan) == HAL_TIMEOUT)
 800778e:	e002      	b.n	8007796 <CANInit+0xe>
    	HAL_IWDG_Refresh(&hiwdg);
 8007790:	0028      	movs	r0, r5
 8007792:	f7fa fc21 	bl	8001fd8 <HAL_IWDG_Refresh>
    while (HAL_CAN_Init(&hcan) == HAL_TIMEOUT)
 8007796:	0020      	movs	r0, r4
 8007798:	f7f8 fd88 	bl	80002ac <HAL_CAN_Init>
 800779c:	2803      	cmp	r0, #3
 800779e:	d0f7      	beq.n	8007790 <CANInit+0x8>
    }
    return HAL_OK;
}
 80077a0:	2000      	movs	r0, #0
 80077a2:	bd70      	pop	{r4, r5, r6, pc}
 80077a4:	200001ec 	.word	0x200001ec
 80077a8:	20000230 	.word	0x20000230

080077ac <slcanClearAllFilters>:

HAL_StatusTypeDef slcanClearAllFilters(void)
{
 80077ac:	b500      	push	{lr}
 80077ae:	b08b      	sub	sp, #44	; 0x2c
	CAN_FilterConfTypeDef sFilterConfig;
	sFilterConfig.FilterNumber = 0;
 80077b0:	2300      	movs	r3, #0
 80077b2:	9305      	str	r3, [sp, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80077b4:	9306      	str	r3, [sp, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80077b6:	2201      	movs	r2, #1
 80077b8:	9207      	str	r2, [sp, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 80077ba:	9300      	str	r3, [sp, #0]
	sFilterConfig.FilterIdLow = 0;
 80077bc:	9301      	str	r3, [sp, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80077be:	9302      	str	r3, [sp, #8]
	sFilterConfig.FilterMaskIdLow = 0;
 80077c0:	9303      	str	r3, [sp, #12]
	sFilterConfig.FilterFIFOAssignment = 0;
 80077c2:	9304      	str	r3, [sp, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80077c4:	9208      	str	r2, [sp, #32]
	sFilterConfig.BankNumber = 0;
 80077c6:	9309      	str	r3, [sp, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80077c8:	4669      	mov	r1, sp
 80077ca:	4804      	ldr	r0, [pc, #16]	; (80077dc <slcanClearAllFilters+0x30>)
 80077cc:	f7f8 fe92 	bl	80004f4 <HAL_CAN_ConfigFilter>
 80077d0:	1e43      	subs	r3, r0, #1
 80077d2:	4198      	sbcs	r0, r3
		return HAL_ERROR;
	else
		return HAL_OK;
}
 80077d4:	b2c0      	uxtb	r0, r0
 80077d6:	b00b      	add	sp, #44	; 0x2c
 80077d8:	bd00      	pop	{pc}
 80077da:	46c0      	nop			; (mov r8, r8)
 80077dc:	200001ec 	.word	0x200001ec

080077e0 <slcanFillIdRegister32>:

tCANfilter slcanFillIdRegister32(tCANFilterFlagsId fl, uint32_t id)
{
 80077e0:	b510      	push	{r4, lr}
 80077e2:	b082      	sub	sp, #8
	tCANfilter f;
	f.h.reg = 0;
 80077e4:	2300      	movs	r3, #0
 80077e6:	466a      	mov	r2, sp
 80077e8:	8013      	strh	r3, [r2, #0]
	f.l.reg = 0;
 80077ea:	8053      	strh	r3, [r2, #2]

	f.l.f32.RTR = fl.bRTR1;
 80077ec:	2401      	movs	r4, #1
 80077ee:	0002      	movs	r2, r0
 80077f0:	4022      	ands	r2, r4
	f.l.f32.IDE = fl.bExtedned1;
 80077f2:	0843      	lsrs	r3, r0, #1
 80077f4:	401c      	ands	r4, r3
 80077f6:	00a4      	lsls	r4, r4, #2
 80077f8:	0053      	lsls	r3, r2, #1
 80077fa:	4323      	orrs	r3, r4
 80077fc:	466a      	mov	r2, sp
 80077fe:	7093      	strb	r3, [r2, #2]
	if (fl.bExtedned1)
 8007800:	0783      	lsls	r3, r0, #30
 8007802:	d519      	bpl.n	8007838 <slcanFillIdRegister32+0x58>
	{
		f.l.f32.EXID4_0 = id;
 8007804:	00ca      	lsls	r2, r1, #3
 8007806:	466b      	mov	r3, sp
 8007808:	7898      	ldrb	r0, [r3, #2]
 800780a:	2307      	movs	r3, #7
 800780c:	4003      	ands	r3, r0
 800780e:	4313      	orrs	r3, r2
 8007810:	466a      	mov	r2, sp
 8007812:	7093      	strb	r3, [r2, #2]
		f.l.f32.EXID12_5 = id >> 5;
 8007814:	094b      	lsrs	r3, r1, #5
 8007816:	70d3      	strb	r3, [r2, #3]
		f.h.f32.EXID17_13 = id >> 13;
 8007818:	0389      	lsls	r1, r1, #14
 800781a:	0ecb      	lsrs	r3, r1, #27
 800781c:	7811      	ldrb	r1, [r2, #0]
 800781e:	221f      	movs	r2, #31
 8007820:	4391      	bics	r1, r2
 8007822:	4319      	orrs	r1, r3
 8007824:	466b      	mov	r3, sp
 8007826:	7019      	strb	r1, [r3, #0]
	} else {
		f.h.f32.STID2_0 = id;
		f.h.f32.STID10_3 = id >> 3;
	}
	return f;
 8007828:	9b00      	ldr	r3, [sp, #0]
 800782a:	0c1a      	lsrs	r2, r3, #16
 800782c:	0412      	lsls	r2, r2, #16
 800782e:	041b      	lsls	r3, r3, #16
 8007830:	0c18      	lsrs	r0, r3, #16
 8007832:	4310      	orrs	r0, r2
}
 8007834:	b002      	add	sp, #8
 8007836:	bd10      	pop	{r4, pc}
		f.h.f32.STID2_0 = id;
 8007838:	014a      	lsls	r2, r1, #5
 800783a:	466b      	mov	r3, sp
 800783c:	7818      	ldrb	r0, [r3, #0]
 800783e:	231f      	movs	r3, #31
 8007840:	4003      	ands	r3, r0
 8007842:	4313      	orrs	r3, r2
 8007844:	466a      	mov	r2, sp
 8007846:	7013      	strb	r3, [r2, #0]
		f.h.f32.STID10_3 = id >> 3;
 8007848:	08c9      	lsrs	r1, r1, #3
 800784a:	7051      	strb	r1, [r2, #1]
 800784c:	e7ec      	b.n	8007828 <slcanFillIdRegister32+0x48>

0800784e <slcanFillIdRegister16>:

tCANfilter slcanFillIdRegister16(tCANFilterFlagsId fl, uint32_t id)
{
 800784e:	b570      	push	{r4, r5, r6, lr}
 8007850:	b082      	sub	sp, #8
	tCANfilter f;
	f.h.reg = 0;
 8007852:	2300      	movs	r3, #0
 8007854:	466a      	mov	r2, sp
 8007856:	8013      	strh	r3, [r2, #0]
	f.l.reg = 0;
 8007858:	8053      	strh	r3, [r2, #2]

	f.l.f16.RTR = fl.bRTR1;
 800785a:	2401      	movs	r4, #1
 800785c:	0002      	movs	r2, r0
 800785e:	4022      	ands	r2, r4
	f.l.f16.IDE = fl.bExtedned1;
 8007860:	0843      	lsrs	r3, r0, #1
 8007862:	401c      	ands	r4, r3
 8007864:	0124      	lsls	r4, r4, #4
 8007866:	00d3      	lsls	r3, r2, #3
 8007868:	4323      	orrs	r3, r4
 800786a:	466a      	mov	r2, sp
 800786c:	7093      	strb	r3, [r2, #2]
	if (fl.bExtedned1)
 800786e:	b2c4      	uxtb	r4, r0
 8007870:	0783      	lsls	r3, r0, #30
 8007872:	d50f      	bpl.n	8007894 <slcanFillIdRegister16+0x46>
	{
		f.l.f16.STID2_0 = id;
 8007874:	014a      	lsls	r2, r1, #5
 8007876:	466b      	mov	r3, sp
 8007878:	789d      	ldrb	r5, [r3, #2]
 800787a:	231f      	movs	r3, #31
 800787c:	402b      	ands	r3, r5
 800787e:	4313      	orrs	r3, r2
		f.l.f16.STID10_3 = id >> 3;
 8007880:	08ca      	lsrs	r2, r1, #3
 8007882:	466d      	mov	r5, sp
 8007884:	70ea      	strb	r2, [r5, #3]
		f.l.f16.EXID17_15 = id >> 8;
 8007886:	054a      	lsls	r2, r1, #21
 8007888:	0f52      	lsrs	r2, r2, #29
 800788a:	25f8      	movs	r5, #248	; 0xf8
 800788c:	402b      	ands	r3, r5
 800788e:	4313      	orrs	r3, r2
 8007890:	466a      	mov	r2, sp
 8007892:	7093      	strb	r3, [r2, #2]
	}

	f.l.f16.RTR = fl.bRTR2;
 8007894:	0883      	lsrs	r3, r0, #2
 8007896:	2501      	movs	r5, #1
 8007898:	402b      	ands	r3, r5
 800789a:	00da      	lsls	r2, r3, #3
 800789c:	466b      	mov	r3, sp
 800789e:	789b      	ldrb	r3, [r3, #2]
 80078a0:	2608      	movs	r6, #8
 80078a2:	43b3      	bics	r3, r6
	f.l.f16.IDE = fl.bExtedned2;
 80078a4:	08c0      	lsrs	r0, r0, #3
 80078a6:	4028      	ands	r0, r5
 80078a8:	0100      	lsls	r0, r0, #4
 80078aa:	4313      	orrs	r3, r2
 80078ac:	2210      	movs	r2, #16
 80078ae:	4393      	bics	r3, r2
 80078b0:	4318      	orrs	r0, r3
 80078b2:	466b      	mov	r3, sp
 80078b4:	7098      	strb	r0, [r3, #2]
	if (fl.bExtedned2)
 80078b6:	0723      	lsls	r3, r4, #28
 80078b8:	d50f      	bpl.n	80078da <slcanFillIdRegister16+0x8c>
	{
		f.h.f16.STID2_0 = id >> 16;
 80078ba:	0c0a      	lsrs	r2, r1, #16
 80078bc:	0152      	lsls	r2, r2, #5
 80078be:	466b      	mov	r3, sp
 80078c0:	7818      	ldrb	r0, [r3, #0]
 80078c2:	231f      	movs	r3, #31
 80078c4:	4003      	ands	r3, r0
 80078c6:	4313      	orrs	r3, r2
		f.h.f16.STID10_3 = id >> (3 + 16);
 80078c8:	0cca      	lsrs	r2, r1, #19
 80078ca:	4668      	mov	r0, sp
 80078cc:	7042      	strb	r2, [r0, #1]
		f.h.f16.EXID17_15 = id >> (8 + 16);
 80078ce:	0149      	lsls	r1, r1, #5
 80078d0:	0f49      	lsrs	r1, r1, #29
 80078d2:	22f8      	movs	r2, #248	; 0xf8
 80078d4:	4013      	ands	r3, r2
 80078d6:	4319      	orrs	r1, r3
 80078d8:	7001      	strb	r1, [r0, #0]
	}

	return f;
 80078da:	9b00      	ldr	r3, [sp, #0]
 80078dc:	0c1a      	lsrs	r2, r3, #16
 80078de:	0412      	lsls	r2, r2, #16
 80078e0:	041b      	lsls	r3, r3, #16
 80078e2:	0c18      	lsrs	r0, r3, #16
 80078e4:	4310      	orrs	r0, r2
}
 80078e6:	b002      	add	sp, #8
 80078e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080078ec <slcanSetCANBaudRate>:

void slcanSetCANBaudRate(uint8_t br)
{ //todo it is for 75% sampling point
 80078ec:	b510      	push	{r4, lr}

	hcan.Init.SJW = CAN_SJW_2TQ;
 80078ee:	4b1b      	ldr	r3, [pc, #108]	; (800795c <slcanSetCANBaudRate+0x70>)
 80078f0:	2280      	movs	r2, #128	; 0x80
 80078f2:	0452      	lsls	r2, r2, #17
 80078f4:	60da      	str	r2, [r3, #12]
	hcan.Init.BS1 = CAN_BS1_11TQ;
 80078f6:	22a0      	movs	r2, #160	; 0xa0
 80078f8:	0312      	lsls	r2, r2, #12
 80078fa:	611a      	str	r2, [r3, #16]
	hcan.Init.BS2 = CAN_BS2_4TQ;
 80078fc:	22c0      	movs	r2, #192	; 0xc0
 80078fe:	0392      	lsls	r2, r2, #14
 8007900:	615a      	str	r2, [r3, #20]

	switch (br)
 8007902:	2824      	cmp	r0, #36	; 0x24
 8007904:	d806      	bhi.n	8007914 <slcanSetCANBaudRate+0x28>
 8007906:	0080      	lsls	r0, r0, #2
 8007908:	4b15      	ldr	r3, [pc, #84]	; (8007960 <slcanSetCANBaudRate+0x74>)
 800790a:	581b      	ldr	r3, [r3, r0]
 800790c:	469f      	mov	pc, r3
	{
		case CAN_BR_1M:
			hcan.Init.Prescaler = 3;
 800790e:	4b13      	ldr	r3, [pc, #76]	; (800795c <slcanSetCANBaudRate+0x70>)
 8007910:	2203      	movs	r2, #3
 8007912:	605a      	str	r2, [r3, #4]

		default:
			break;
	}

	CANInit();
 8007914:	f7ff ff38 	bl	8007788 <CANInit>
}
 8007918:	bd10      	pop	{r4, pc}
			hcan.Init.Prescaler = 6;
 800791a:	4b10      	ldr	r3, [pc, #64]	; (800795c <slcanSetCANBaudRate+0x70>)
 800791c:	2206      	movs	r2, #6
 800791e:	605a      	str	r2, [r3, #4]
		break;
 8007920:	e7f8      	b.n	8007914 <slcanSetCANBaudRate+0x28>
			hcan.Init.Prescaler = 12;
 8007922:	4b0e      	ldr	r3, [pc, #56]	; (800795c <slcanSetCANBaudRate+0x70>)
 8007924:	220c      	movs	r2, #12
 8007926:	605a      	str	r2, [r3, #4]
		break;
 8007928:	e7f4      	b.n	8007914 <slcanSetCANBaudRate+0x28>
			hcan.Init.Prescaler = 24;
 800792a:	4b0c      	ldr	r3, [pc, #48]	; (800795c <slcanSetCANBaudRate+0x70>)
 800792c:	2218      	movs	r2, #24
 800792e:	605a      	str	r2, [r3, #4]
		break;
 8007930:	e7f0      	b.n	8007914 <slcanSetCANBaudRate+0x28>
			hcan.Init.Prescaler = 30;
 8007932:	4b0a      	ldr	r3, [pc, #40]	; (800795c <slcanSetCANBaudRate+0x70>)
 8007934:	221e      	movs	r2, #30
 8007936:	605a      	str	r2, [r3, #4]
		break;
 8007938:	e7ec      	b.n	8007914 <slcanSetCANBaudRate+0x28>
			hcan.Init.Prescaler = 60;
 800793a:	4b08      	ldr	r3, [pc, #32]	; (800795c <slcanSetCANBaudRate+0x70>)
 800793c:	223c      	movs	r2, #60	; 0x3c
 800793e:	605a      	str	r2, [r3, #4]
		break;
 8007940:	e7e8      	b.n	8007914 <slcanSetCANBaudRate+0x28>
			hcan.Init.Prescaler = 150;
 8007942:	4b06      	ldr	r3, [pc, #24]	; (800795c <slcanSetCANBaudRate+0x70>)
 8007944:	2296      	movs	r2, #150	; 0x96
 8007946:	605a      	str	r2, [r3, #4]
		break;
 8007948:	e7e4      	b.n	8007914 <slcanSetCANBaudRate+0x28>
			hcan.Init.Prescaler = 300;
 800794a:	4b04      	ldr	r3, [pc, #16]	; (800795c <slcanSetCANBaudRate+0x70>)
 800794c:	2296      	movs	r2, #150	; 0x96
 800794e:	0052      	lsls	r2, r2, #1
 8007950:	605a      	str	r2, [r3, #4]
		break;
 8007952:	e7df      	b.n	8007914 <slcanSetCANBaudRate+0x28>
			hcan.Init.Prescaler = 36;
 8007954:	4b01      	ldr	r3, [pc, #4]	; (800795c <slcanSetCANBaudRate+0x70>)
 8007956:	2224      	movs	r2, #36	; 0x24
 8007958:	605a      	str	r2, [r3, #4]
		break;
 800795a:	e7db      	b.n	8007914 <slcanSetCANBaudRate+0x28>
 800795c:	200001ec 	.word	0x200001ec
 8007960:	08007c50 	.word	0x08007c50

08007964 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007964:	4813      	ldr	r0, [pc, #76]	; (80079b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007966:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8007968:	4813      	ldr	r0, [pc, #76]	; (80079b8 <LoopForever+0x6>)
    LDR R1, [R0]
 800796a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800796c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800796e:	4a13      	ldr	r2, [pc, #76]	; (80079bc <LoopForever+0xa>)
    CMP R1, R2
 8007970:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8007972:	d105      	bne.n	8007980 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8007974:	4812      	ldr	r0, [pc, #72]	; (80079c0 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8007976:	4913      	ldr	r1, [pc, #76]	; (80079c4 <LoopForever+0x12>)
    STR R1, [R0]
 8007978:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800797a:	4813      	ldr	r0, [pc, #76]	; (80079c8 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800797c:	4913      	ldr	r1, [pc, #76]	; (80079cc <LoopForever+0x1a>)
    STR R1, [R0]
 800797e:	6001      	str	r1, [r0, #0]

08007980 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007980:	4813      	ldr	r0, [pc, #76]	; (80079d0 <LoopForever+0x1e>)
  ldr r1, =_edata
 8007982:	4914      	ldr	r1, [pc, #80]	; (80079d4 <LoopForever+0x22>)
  ldr r2, =_sidata
 8007984:	4a14      	ldr	r2, [pc, #80]	; (80079d8 <LoopForever+0x26>)
  movs r3, #0
 8007986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007988:	e002      	b.n	8007990 <LoopCopyDataInit>

0800798a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800798a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800798c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800798e:	3304      	adds	r3, #4

08007990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007994:	d3f9      	bcc.n	800798a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007996:	4a11      	ldr	r2, [pc, #68]	; (80079dc <LoopForever+0x2a>)
  ldr r4, =_ebss
 8007998:	4c11      	ldr	r4, [pc, #68]	; (80079e0 <LoopForever+0x2e>)
  movs r3, #0
 800799a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800799c:	e001      	b.n	80079a2 <LoopFillZerobss>

0800799e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800799e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80079a0:	3204      	adds	r2, #4

080079a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80079a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80079a4:	d3fb      	bcc.n	800799e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80079a6:	f7ff f91d 	bl	8006be4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80079aa:	f000 f81d 	bl	80079e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80079ae:	f7fe ff7f 	bl	80068b0 <main>

080079b2 <LoopForever>:

LoopForever:
    b LoopForever
 80079b2:	e7fe      	b.n	80079b2 <LoopForever>
  ldr   r0, =_estack
 80079b4:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80079b8:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80079bc:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80079c0:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80079c4:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80079c8:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80079cc:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80079d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80079d4:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 80079d8:	08007cec 	.word	0x08007cec
  ldr r2, =_sbss
 80079dc:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 80079e0:	20000d08 	.word	0x20000d08

080079e4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80079e4:	e7fe      	b.n	80079e4 <ADC1_IRQHandler>
	...

080079e8 <__libc_init_array>:
 80079e8:	b570      	push	{r4, r5, r6, lr}
 80079ea:	2600      	movs	r6, #0
 80079ec:	4d0c      	ldr	r5, [pc, #48]	; (8007a20 <__libc_init_array+0x38>)
 80079ee:	4c0d      	ldr	r4, [pc, #52]	; (8007a24 <__libc_init_array+0x3c>)
 80079f0:	1b64      	subs	r4, r4, r5
 80079f2:	10a4      	asrs	r4, r4, #2
 80079f4:	42a6      	cmp	r6, r4
 80079f6:	d109      	bne.n	8007a0c <__libc_init_array+0x24>
 80079f8:	2600      	movs	r6, #0
 80079fa:	f000 f823 	bl	8007a44 <_init>
 80079fe:	4d0a      	ldr	r5, [pc, #40]	; (8007a28 <__libc_init_array+0x40>)
 8007a00:	4c0a      	ldr	r4, [pc, #40]	; (8007a2c <__libc_init_array+0x44>)
 8007a02:	1b64      	subs	r4, r4, r5
 8007a04:	10a4      	asrs	r4, r4, #2
 8007a06:	42a6      	cmp	r6, r4
 8007a08:	d105      	bne.n	8007a16 <__libc_init_array+0x2e>
 8007a0a:	bd70      	pop	{r4, r5, r6, pc}
 8007a0c:	00b3      	lsls	r3, r6, #2
 8007a0e:	58eb      	ldr	r3, [r5, r3]
 8007a10:	4798      	blx	r3
 8007a12:	3601      	adds	r6, #1
 8007a14:	e7ee      	b.n	80079f4 <__libc_init_array+0xc>
 8007a16:	00b3      	lsls	r3, r6, #2
 8007a18:	58eb      	ldr	r3, [r5, r3]
 8007a1a:	4798      	blx	r3
 8007a1c:	3601      	adds	r6, #1
 8007a1e:	e7f2      	b.n	8007a06 <__libc_init_array+0x1e>
 8007a20:	08007ce4 	.word	0x08007ce4
 8007a24:	08007ce4 	.word	0x08007ce4
 8007a28:	08007ce4 	.word	0x08007ce4
 8007a2c:	08007ce8 	.word	0x08007ce8

08007a30 <memcpy>:
 8007a30:	2300      	movs	r3, #0
 8007a32:	b510      	push	{r4, lr}
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d100      	bne.n	8007a3a <memcpy+0xa>
 8007a38:	bd10      	pop	{r4, pc}
 8007a3a:	5ccc      	ldrb	r4, [r1, r3]
 8007a3c:	54c4      	strb	r4, [r0, r3]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	e7f8      	b.n	8007a34 <memcpy+0x4>
	...

08007a44 <_init>:
 8007a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a46:	46c0      	nop			; (mov r8, r8)
 8007a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a4a:	bc08      	pop	{r3}
 8007a4c:	469e      	mov	lr, r3
 8007a4e:	4770      	bx	lr

08007a50 <_fini>:
 8007a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a52:	46c0      	nop			; (mov r8, r8)
 8007a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a56:	bc08      	pop	{r3}
 8007a58:	469e      	mov	lr, r3
 8007a5a:	4770      	bx	lr
